'use strict';
var COMPILED = !0,
    goog = goog || {};
goog.global = this;
goog.DEBUG = !0;
goog.LOCALE = "en";
goog.TRUSTED_SITE = !0;
goog.provide = function(a) {
    if (!COMPILED) {
        if (goog.isProvided_(a)) throw Error('Namespace "' + a + '" already declared.');
        delete goog.implicitNamespaces_[a];
        for (var b = a;
            (b = b.substring(0, b.lastIndexOf("."))) && !goog.getObjectByName(b);) goog.implicitNamespaces_[b] = !0
    }
    goog.exportPath_(a)
};
goog.setTestOnly = function(a) {
    if (COMPILED && !goog.DEBUG) throw a = a || "", Error("Importing test-only code into non-debug environment" + a ? ": " + a : ".");
};
COMPILED || (goog.isProvided_ = function(a) {
    return !goog.implicitNamespaces_[a] && !! goog.getObjectByName(a)
}, goog.implicitNamespaces_ = {});
goog.exportPath_ = function(a, b, c) {
    a = a.split(".");
    c = c || goog.global;
    a[0] in c || !c.execScript || c.execScript("var " + a[0]);
    for (var d; a.length && (d = a.shift());)!a.length && goog.isDef(b) ? c[d] = b : c = c[d] ? c[d] : c[d] = {}
};
goog.getObjectByName = function(a, b) {
    for (var c = a.split("."), d = b || goog.global, e; e = c.shift();)
        if (goog.isDefAndNotNull(d[e])) d = d[e];
        else return null;
    return d
};
goog.globalize = function(a, b) {
    var c = b || goog.global,
        d;
    for (d in a) c[d] = a[d]
};
goog.addDependency = function(a, b, c) {
    if (!COMPILED) {
        var d;
        a = a.replace(/\\/g, "/");
        for (var e = goog.dependencies_, f = 0; d = b[f]; f++) e.nameToPath[d] = a, a in e.pathToNames || (e.pathToNames[a] = {}), e.pathToNames[a][d] = !0;
        for (d = 0; b = c[d]; d++) a in e.requires || (e.requires[a] = {}), e.requires[a][b] = !0
    }
};
goog.ENABLE_DEBUG_LOADER = !0;
goog.require = function(a) {
    if (!COMPILED && !goog.isProvided_(a)) {
        if (goog.ENABLE_DEBUG_LOADER) {
            var b = goog.getPathFromDeps_(a);
            if (b) {
                goog.included_[b] = !0;
                goog.writeScripts_();
                return
            }
        }
        a = "goog.require could not find: " + a;
        goog.global.console && goog.global.console.error(a);
        throw Error(a);
    }
};
goog.basePath = "";
goog.global.CLOSURE_NO_DEPS = !0;
goog.nullFunction = function() {};
goog.identityFunction = function(a, b) {
    return a
};
goog.abstractMethod = function() {
    throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(a) {
    a.getInstance = function() {
        if (a.instance_) return a.instance_;
        goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = a);
        return a.instance_ = new a
    }
};
goog.instantiatedSingletons_ = [];
!COMPILED && goog.ENABLE_DEBUG_LOADER && (goog.included_ = {}, goog.dependencies_ = {
    pathToNames: {},
    nameToPath: {},
    requires: {},
    visited: {},
    written: {}
}, goog.inHtmlDocument_ = function() {
    var a = goog.global.document;
    return "undefined" != typeof a && "write" in a
}, goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) goog.basePath = goog.global.CLOSURE_BASE_PATH;
    else if (goog.inHtmlDocument_())
        for (var a = goog.global.document.getElementsByTagName("script"), b = a.length - 1; 0 <= b; --b) {
            var c = a[b].src,
                d = c.lastIndexOf("?"),
                d = -1 == d ? c.length : d;
            if ("base.js" == c.substr(d - 7, 7)) {
                goog.basePath = c.substr(0, d - 7);
                break
            }
        }
}, goog.importScript_ = function(a) {
    var b = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    !goog.dependencies_.written[a] && b(a) && (goog.dependencies_.written[a] = !0)
}, goog.writeScriptTag_ = function(a) {
    if (goog.inHtmlDocument_()) {
        var b = goog.global.document;
        if ("complete" == b.readyState) {
            if (/\bdeps.js$/.test(a)) return !1;
            throw Error('Cannot write "' + a + '" after document load');
        }
        b.write('<script type="text/javascript" src="' +
            a + '">\x3c/script>');
        return !0
    }
    return !1
}, goog.writeScripts_ = function() {
    function a(e) {
        if (!(e in d.written)) {
            if (!(e in d.visited) && (d.visited[e] = !0, e in d.requires))
                for (var g in d.requires[e])
                    if (!goog.isProvided_(g))
                        if (g in d.nameToPath) a(d.nameToPath[g]);
                        else throw Error("Undefined nameToPath for " + g);
            e in c || (c[e] = !0, b.push(e))
        }
    }
    var b = [],
        c = {}, d = goog.dependencies_,
        e;
    for (e in goog.included_) d.written[e] || a(e);
    for (e = 0; e < b.length; e++)
        if (b[e]) goog.importScript_(goog.basePath + b[e]);
        else throw Error("Undefined script input");
}, goog.getPathFromDeps_ = function(a) {
    return a in goog.dependencies_.nameToPath ? goog.dependencies_.nameToPath[a] : null
}, goog.findBasePath_(), goog.global.CLOSURE_NO_DEPS || goog.importScript_(goog.basePath + "deps.js"));
goog.typeOf = function(a) {
    var b = typeof a;
    if ("object" == b)
        if (a) {
            if (a instanceof Array) return "array";
            if (a instanceof Object) return b;
            var c = Object.prototype.toString.call(a);
            if ("[object Window]" == c) return "object";
            if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";
            if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function"
        } else return "null";
        else if ("function" == b && "undefined" == typeof a.call) return "object";
    return b
};
goog.isDef = function(a) {
    return void 0 !== a
};
goog.isNull = function(a) {
    return null === a
};
goog.isDefAndNotNull = function(a) {
    return null != a
};
goog.isArray = function(a) {
    return "array" == goog.typeOf(a)
};
goog.isArrayLike = function(a) {
    var b = goog.typeOf(a);
    return "array" == b || "object" == b && "number" == typeof a.length
};
goog.isDateLike = function(a) {
    return goog.isObject(a) && "function" == typeof a.getFullYear
};
goog.isString = function(a) {
    return "string" == typeof a
};
goog.isBoolean = function(a) {
    return "boolean" == typeof a
};
goog.isNumber = function(a) {
    return "number" == typeof a
};
goog.isFunction = function(a) {
    return "function" == goog.typeOf(a)
};
goog.isObject = function(a) {
    var b = typeof a;
    return "object" == b && null != a || "function" == b
};
goog.getUid = function(a) {
    return a[goog.UID_PROPERTY_] || (a[goog.UID_PROPERTY_] = ++goog.uidCounter_)
};
goog.removeUid = function(a) {
    "removeAttribute" in a && a.removeAttribute(goog.UID_PROPERTY_);
    try {
        delete a[goog.UID_PROPERTY_]
    } catch (b) {}
};
goog.UID_PROPERTY_ = "closure_uid_" + (1E9 * Math.random() >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(a) {
    var b = goog.typeOf(a);
    if ("object" == b || "array" == b) {
        if (a.clone) return a.clone();
        var b = "array" == b ? [] : {}, c;
        for (c in a) b[c] = goog.cloneObject(a[c]);
        return b
    }
    return a
};
goog.bindNative_ = function(a, b, c) {
    return a.call.apply(a.bind, arguments)
};
goog.bindJs_ = function(a, b, c) {
    if (!a) throw Error();
    if (2 < arguments.length) {
        var d = Array.prototype.slice.call(arguments, 2);
        return function() {
            var c = Array.prototype.slice.call(arguments);
            Array.prototype.unshift.apply(c, d);
            return a.apply(b, c)
        }
    }
    return function() {
        return a.apply(b, arguments)
    }
};
goog.bind = function(a, b, c) {
    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? goog.bind = goog.bindNative_ : goog.bind = goog.bindJs_;
    return goog.bind.apply(null, arguments)
};
goog.partial = function(a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function() {
        var b = Array.prototype.slice.call(arguments);
        b.unshift.apply(b, c);
        return a.apply(this, b)
    }
};
goog.mixin = function(a, b) {
    for (var c in b) a[c] = b[c]
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
    return +new Date
};
goog.globalEval = function(a) {
    if (goog.global.execScript) goog.global.execScript(a, "JavaScript");
    else if (goog.global.eval)
        if (null == goog.evalWorksForGlobals_ && (goog.global.eval("var _et_ = 1;"), "undefined" != typeof goog.global._et_ ? (delete goog.global._et_, goog.evalWorksForGlobals_ = !0) : goog.evalWorksForGlobals_ = !1), goog.evalWorksForGlobals_) goog.global.eval(a);
        else {
            var b = goog.global.document,
                c = b.createElement("script");
            c.type = "text/javascript";
            c.defer = !1;
            c.appendChild(b.createTextNode(a));
            b.body.appendChild(c);
            b.body.removeChild(c)
        } else throw Error("goog.globalEval not available");
};
goog.evalWorksForGlobals_ = null;
goog.getCssName = function(a, b) {
    var c = function(a) {
        return goog.cssNameMapping_[a] || a
    }, d = function(a) {
            a = a.split("-");
            for (var b = [], d = 0; d < a.length; d++) b.push(c(a[d]));
            return b.join("-")
        }, d = goog.cssNameMapping_ ? "BY_WHOLE" == goog.cssNameMappingStyle_ ? c : d : function(a) {
            return a
        };
    return b ? a + "-" + d(b) : d(a)
};
goog.setCssNameMapping = function(a, b) {
    goog.cssNameMapping_ = a;
    goog.cssNameMappingStyle_ = b
};
!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING && (goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING);
goog.getMsg = function(a, b) {
    var c = b || {}, d;
    for (d in c) {
        var e = ("" + c[d]).replace(/\$/g, "$$$$");
        a = a.replace(RegExp("\\{\\$" + d + "\\}", "gi"), e)
    }
    return a
};
goog.getMsgWithFallback = function(a, b) {
    return a
};
goog.exportSymbol = function(a, b, c) {
    goog.exportPath_(a, b, c)
};
goog.exportProperty = function(a, b, c) {
    a[b] = c
};
goog.inherits = function(a, b) {
    function c() {}
    c.prototype = b.prototype;
    a.superClass_ = b.prototype;
    a.prototype = new c;
    a.prototype.constructor = a
};
goog.base = function(a, b, c) {
    var d = arguments.callee.caller;
    if (d.superClass_) return d.superClass_.constructor.apply(a, Array.prototype.slice.call(arguments, 1));
    for (var e = Array.prototype.slice.call(arguments, 2), f = !1, g = a.constructor; g; g = g.superClass_ && g.superClass_.constructor)
        if (g.prototype[b] === d) f = !0;
        else if (f) return g.prototype[b].apply(a, e);
    if (a[b] === d) return a.constructor.prototype[b].apply(a, e);
    throw Error("goog.base called from a method of one name to a method of a different name");
};
goog.scope = function(a) {
    a.call(goog.global)
};

function Assets() {}
window.Assets = Assets;
Assets.assetsParams = {
    gui_tutorial_tap: {
        u: "gui_tutorial_tap.png",
        w: 120,
        h: 102,
        f: [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 43,
        cy: 61
    },
    gui_tutorial_swipe_throw: {
        u: "gui_tutorial_swipe_throw.png",
        w: 185,
        h: 253,
        f: [0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 5],
        fps: 20,
        cx: 74,
        cy: 99
    },
    gui_tutorial_swipe_goal: {
        u: "gui_tutorial_swipe_goal.png",
        w: 267,
        h: 150,
        f: [0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 5],
        fps: 20,
        cx: 107,
        cy: 77
    },
    gui_tutorial_swipe: {
        u: "gui_tutorial_swipe.png",
        w: 219,
        h: 259,
        f: [0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 5],
        fps: 20,
        cx: 106,
        cy: 155
    },
    gui_tutorial_drag_straight: {
        u: "gui_tutorial_drag_straight.png",
        w: 235,
        h: 102,
        f: [0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
        fps: 15,
        cx: 105,
        cy: 42
    },
    gui_tutorial_drag02: {
        u: "gui_tutorial_drag02.png",
        w: 191,
        h: 190,
        f: [0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
        fps: 15,
        cx: 79,
        cy: 91
    },
    gui_tutorial_drag: {
        u: "gui_tutorial_drag.png",
        w: 194,
        h: 175,
        f: [0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
        fps: 15,
        cx: 83,
        cy: 67
    },
    gui_tutorial_arrow_collect: {
        u: "gui_tutorial_arrow_collect.png",
        w: 40,
        h: 72,
        f: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 19,
        cy: 49
    },
    gui_screen_intro_07: {
        u: "gui_screen_intro_07.png",
        w: 982,
        h: 500,
        f: [0],
        fps: 30,
        cx: 490,
        cy: 250
    },
    gui_screen_intro_06: {
        u: "gui_screen_intro_06.png",
        w: 982,
        h: 500,
        f: [0],
        fps: 30,
        cx: 490,
        cy: 250
    },
    gui_screen_intro_05: {
        u: "gui_screen_intro_05.png",
        w: 982,
        h: 500,
        f: [0],
        fps: 30,
        cx: 490,
        cy: 250
    },
    gui_screen_intro_04: {
        u: "gui_screen_intro_04.png",
        w: 982,
        h: 500,
        f: [0],
        fps: 30,
        cx: 490,
        cy: 250
    },
    gui_screen_intro_03: {
        u: "gui_screen_intro_03.png",
        w: 982,
        h: 500,
        f: [0],
        fps: 30,
        cx: 490,
        cy: 250
    },
    gui_screen_intro_02: {
        u: "gui_screen_intro_02.png",
        w: 982,
        h: 500,
        f: [0],
        fps: 30,
        cx: 490,
        cy: 250
    },
    gui_screen_intro_01: {
        u: "gui_screen_intro_01.png",
        w: 982,
        h: 500,
        f: [0],
        fps: 30,
        cx: 490,
        cy: 250
    },
    mcTurboIcon: {
        u: "mcTurboIcon.png",
        w: 38,
        h: 39,
        f: [0],
        fps: 30,
        cx: 18,
        cy: 19,
        collision: "x:-20;y:-20;w:40;h:40",
        bounds: "x:-20;y:-20;w:40;h:40",
        boundsAttack: "x:-20;y:-20;w:40;h:40"
    },
    mcTargetDisplace: {
        u: "mcTargetDisplace.png",
        w: 71,
        h: 36,
        f: [0],
        fps: 30,
        cx: 35,
        cy: 19
    },
    mcSelectedFull: {
        u: "mcSelectedFull.png",
        w: 72,
        h: 51,
        f: [0, 0, 1, 1, 2, 2],
        fps: 30,
        cx: 33,
        cy: 37
    },
    mcSelected: {
        u: "mcSelected.png",
        w: 64,
        h: 33,
        f: [0],
        fps: 30,
        cx: 30,
        cy: 17
    },
    mcSSIcon: {
        u: "mcSSIcon.png",
        w: 40,
        h: 40,
        f: [0],
        fps: 30,
        cx: 20,
        cy: 20,
        collision: "x:-20;y:-20;w:40;h:40",
        bounds: "x:-20;y:-20;w:40;h:40",
        boundsAttack: "x:-20;y:-20;w:40;h:40"
    },
    mcPointer: {
        u: "mcPointer.png",
        w: 168,
        h: 90,
        f: [0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 8],
        fps: 30,
        cx: 84,
        cy: 46
    },
    mcGoal_right_piece: {
        u: "mcGoal_right_piece.png",
        w: 67,
        h: 379,
        f: [0],
        fps: 30,
        cx: 31,
        cy: 185,
        collision: "x:0;y:0;w:0;h:0",
        bounds: "x:0;y:0;w:0;h:0",
        boundsAttack: "x:0;y:0;w:0;h:0"
    },
    mcGoal_left_piece: {
        u: "mcGoal_left_piece.png",
        w: 67,
        h: 389,
        f: [0],
        fps: 30,
        cx: 32,
        cy: 194,
        collision: "x:0;y:0;w:0;h:0",
        bounds: "x:0;y:0;w:0;h:0",
        boundsAttack: "x:0;y:0;w:0;h:0"
    },
    mcGoal_DKO_right: {
        u: "mcGoal_DKO_right.png",
        w: 65,
        h: 379,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 29,
        cy: 185,
        collision: "x:0;y:0;w:0;h:0",
        bounds: "x:0;y:0;w:0;h:0",
        boundsAttack: "x:0;y:0;w:0;h:0"
    },
    mcGoal_DKO_left: {
        u: "mcGoal_DKO_left.png",
        w: 65,
        h: 379,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 32,
        cy: 185,
        collision: "x:0;y:0;w:0;h:0",
        bounds: "x:0;y:0;w:0;h:0",
        boundsAttack: "x:0;y:0;w:0;h:0"
    },
    mcDirection: {
        u: "mcDirection.png",
        w: 42,
        h: 32,
        f: [0],
        fps: 30,
        cx: 0,
        cy: 17
    },
    line: {
        u: "line.png",
        w: 52,
        h: 6,
        f: [0],
        fps: 30,
        cx: 25,
        cy: 3
    },
    adBase: {
        u: "ad.png",
        w: 369,
        h: 63,
        f: [0],
        fps: 30,
        cx: 183,
        cy: 31
    },
    ad: {
        u: "ad.png",
        w: 344,
        h: 53,
        f: [0],
        fps: 30,
        cx: 172,
        cy: 26
    },
    central_logo_1: {
        u: "central_logo_1.png",
        w: 202,
        h: 194,
        f: [0],
        fps: 30,
        cx: 101,
        cy: 97
    },
    mcBallStand: {
        u: "mcBallStand.png",
        w: 28,
        h: 26,
        f: [0],
        fps: 30,
        cx: 13,
        cy: 26,
        collision: "x:-15;y:-15;w:30;h:30",
        bounds: "x:-15;y:-15;w:30;h:30",
        boundsAttack: "x:0;y:0;w:0;h:0"
    },
    mcBallSpecialShoot: {
        u: "mcBallSpecialShoot.png",
        w: 50,
        h: 48,
        f: [0, 0, 1,
            1, 2, 2, 3, 3
        ],
        fps: 30,
        cx: 24,
        cy: 37,
        collision: "x:-15;y:-15;w:30;h:30",
        bounds: "x:-15;y:-15;w:30;h:30",
        boundsAttack: "x:0;y:0;w:0;h:0"
    },
    mcBallShoot: {
        u: "mcBallShoot.png",
        w: 28,
        h: 26,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 13,
        cy: 26,
        collision: "x:-15;y:-15;w:30;h:30",
        bounds: "x:-15;y:-15;w:30;h:30",
        boundsAttack: "x:0;y:0;w:0;h:0"
    },
    mcBallShadow: {
        u: "mcBallShadow.png",
        w: 28,
        h: 16,
        f: [0],
        fps: 30,
        cx: 14,
        cy: 9,
        collision: "x:-15;y:-15;w:30;h:30",
        bounds: "x:-15;y:-15;w:30;h:30",
        boundsAttack: "x:0;y:0;w:0;h:0"
    },
    mcBallRun3: {
        u: "mcBallRun3.png",
        w: 38,
        h: 36,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4],
        fps: 30,
        cx: 18,
        cy: 31,
        collision: "x:-15;y:-15;w:30;h:30",
        bounds: "x:-15;y:-15;w:30;h:30",
        boundsAttack: "x:0;y:0;w:0;h:0"
    },
    mcBallRun2: {
        u: "mcBallRun2.png",
        w: 38,
        h: 39,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4],
        fps: 30,
        cx: 18,
        cy: 34,
        collision: "x:-15;y:-15;w:30;h:30",
        bounds: "x:-15;y:-15;w:30;h:30",
        boundsAttack: "x:0;y:0;w:0;h:0"
    },
    mcBallRun1: {
        u: "mcBallRun1.png",
        w: 38,
        h: 44,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],
        fps: 30,
        cx: 18,
        cy: 39,
        collision: "x:-15;y:-15;w:30;h:30",
        bounds: "x:-15;y:-15;w:30;h:30",
        boundsAttack: "x:0;y:0;w:0;h:0"
    },
    mcBallPlayerRun: {
        u: "mcBallPlayerRun.png",
        w: 38,
        h: 47,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],
        fps: 30,
        cx: 18,
        cy: 42,
        collision: "x:-15;y:-15;w:30;h:30",
        bounds: "x:-15;y:-15;w:30;h:30",
        boundsAttack: "x:0;y:0;w:0;h:0"
    },
    soccerbeijing_DKO_bg_beijing: {
        u: "soccerbeijing_DKO_bg_beijing.png",
        w: "1685",
        h: "699",
        f: [0],
        fps: "30"
    },
    soccerbrazil_DKO_bg_brazil: {
        u: "soccerbrazil_DKO_bg_brazil.png",
        w: "1685",
        h: "699",
        f: [0],
        fps: "30"
    },
    socceridaho_DKO_bg_idaho: {
        u: "socceridaho_DKO_bg_idaho.png",
        w: "1685",
        h: "699",
        f: [0],
        fps: "30"
    },
    soccernewyork_DKO_bg_newyork: {
        u: "soccernewyork_DKO_bg_newyork.png",
        w: "1685",
        h: "699",
        f: [0],
        fps: "30"
    },
    socceritaly_DKO_bg_italy: {
        u: "socceritaly_DKO_bg_italy.png",
        w: "1685",
        h: "699",
        f: [0],
        fps: "30"
    },
    soccerparis_DKO_bg_paris: {
        u: "soccerparis_DKO_bg_paris.png",
        w: "1685",
        h: "699",
        f: [0],
        fps: "30"
    },
    soccertokyo_DKO_bg_tokyo: {
        u: "soccertokyo_DKO_bg_tokyo.png",
        w: "1685",
        h: "699",
        f: [0],
        fps: "30"
    },
    mcMinigame3Player04Sad: {
        u: "mcMinigame3Player04Sad.png",
        w: 139,
        h: 133,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 84,
        cy: 127,
        collision: "x:-80;y:-125;w:160;h:160",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcM1Soda: {
        u: "mcM1Soda.png",
        w: 68,
        h: 95,
        f: [0, 0, 1, 1, 2, 2, 1, 1],
        fps: 30,
        cx: 33,
        cy: 87,
        bounds: "x:-20;y:-20;w:40;h:40"
    },
    mcLifeFx: {
        u: "mcLifeFx.png",
        w: 89,
        h: 87,
        f: [0],
        fps: 30,
        cx: 44,
        cy: 44
    },
    mcBgMinigame3: {
        u: "mcBgMinigame3.png",
        w: 752,
        h: 500,
        f: [0],
        fps: 30,
        cx: 0,
        cy: 0
    },
    mcMinigame2Player04Sad: {
        u: "mcMinigame2Player04Sad.png",
        w: 139,
        h: 133,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 84,
        cy: 127
    },
    mcLine: {
        u: "mcLine.png",
        w: 257,
        h: 45,
        f: [0],
        fps: 30,
        cx: 0,
        cy: 24
    },
    mcBgMinigame2: {
        u: "mcBgMinigame2.png",
        w: 752,
        h: 500,
        f: [0],
        fps: 30,
        cx: 0,
        cy: 0
    },
    mcArrow: {
        u: "mcArrow.png",
        w: 272,
        h: 126,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0],
        fps: 30,
        cx: 136,
        cy: 63
    },
    mcM1SodaPink: {
        u: "mcM1SodaPink.png",
        w: 68,
        h: 83,
        f: [0],
        fps: 30,
        cx: 33,
        cy: 41,
        bounds: "x:-20;y:-20;w:40;h:40"
    },
    mcM1SodaGreen: {
        u: "mcM1SodaGreen.png",
        w: 68,
        h: 83,
        f: [0],
        fps: 30,
        cx: 33,
        cy: 41,
        bounds: "x:-20;y:-20;w:40;h:40"
    },
    mcM1PatienceSodaPink: {
        u: "mcM1PatienceSodaPink.png",
        w: 27,
        h: 33,
        f: [0],
        fps: 30,
        cx: 13,
        cy: 17
    },
    mcM1PatienceSodaGreen: {
        u: "mcM1PatienceSodaGreen.png",
        w: 27,
        h: 33,
        f: [0],
        fps: 30,
        cx: 13,
        cy: 17
    },
    mcM1PatienceBarPink: {
        u: "mcM1PatienceBarPink.png",
        w: 31,
        h: 4,
        f: [0],
        fps: 30,
        cx: 0,
        cy: 2
    },
    mcM1PatienceBarGreen: {
        u: "mcM1PatienceBarGreen.png",
        w: 31,
        h: 4,
        f: [0],
        fps: 30,
        cx: 0,
        cy: 2
    },
    mcM1PatienceBarContainer: {
        u: "mcM1PatienceBarContainer.png",
        w: 50,
        h: 51,
        f: [0],
        fps: 30,
        cx: 24,
        cy: 25
    },
    mcM1Cooler: {
        u: "mcM1Cooler.png",
        w: 97,
        h: 66,
        f: [0],
        fps: 30,
        cx: 48,
        cy: 34
    },
    mcBgMinigame1: {
        u: "mcBgMinigame1.png",
        w: 752,
        h: 500,
        f: [0],
        fps: 30,
        cx: 0,
        cy: 0
    },
    mcPlayer06Throw: {
        u: "mcPlayer06Throw.png",
        w: 108,
        h: 94,
        f: [0, 0, 1, 1, 2, 0, 0, 0],
        fps: 30,
        cx: 56,
        cy: 87
    },
    mcPlayer06StandFront: {
        u: "mcPlayer06StandFront.png",
        w: 67,
        h: 101,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1],
        fps: 30,
        cx: 32,
        cy: 94
    },
    mcPlayer06Stand: {
        u: "mcPlayer06Stand.png",
        w: 67,
        h: 97,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 32,
        cy: 90
    },
    mcPlayer06Sad: {
        u: "mcPlayer06Sad.png",
        w: 109,
        h: 61,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 49,
        cy: 51
    },
    mcPlayer06RunFront: {
        u: "mcPlayer06RunFront.png",
        w: 62,
        h: 106,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5],
        fps: 30,
        cx: 29,
        cy: 100
    },
    mcPlayer06RunBack: {
        u: "mcPlayer06RunBack.png",
        w: 78,
        h: 83,
        f: [0, 0, 0, 1, 1,
            1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5
        ],
        fps: 30,
        cx: 41,
        cy: 75
    },
    mcPlayer06Run2: {
        u: "mcPlayer06Run2.png",
        w: 121,
        h: 96,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 34,
        cy: 91
    },
    mcPlayer06Run: {
        u: "mcPlayer06Run.png",
        w: 202,
        h: 113,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],
        fps: 30,
        cx: 139,
        cy: 103
    },
    mcPlayer06Hit: {
        u: "mcPlayer06Hit.png",
        w: 153,
        h: 143,
        f: [0, 0, 1, 1, 2, 2, 2, 2],
        fps: 30,
        cx: 70,
        cy: 137,
        collision: "x:-80;y:-125;w:160;h:160",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer06Celebration: {
        u: "mcPlayer06Celebration.png",
        w: 72,
        h: 92,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 34,
        cy: 85
    },
    mcPlayer05Throw: {
        u: "mcPlayer05Throw.png",
        w: 171,
        h: 219,
        f: [0, 0, 1, 1, 2, 0, 0, 0],
        fps: 30,
        cx: 79,
        cy: 208
    },
    mcPlayer05StandFront: {
        u: "mcPlayer05StandFront.png",
        w: 106,
        h: 201,
        f: [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 52,
        cy: 190
    },
    mcPlayer05Stand: {
        u: "mcPlayer05Stand.png",
        w: 112,
        h: 205,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 52,
        cy: 194
    },
    mcPlayer05Sad: {
        u: "mcPlayer05Sad.png",
        w: 115,
        h: 195,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 52,
        cy: 184
    },
    mcPlayer05RunFront: {
        u: "mcPlayer05RunFront.png",
        w: 103,
        h: 201,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5],
        fps: 30,
        cx: 49,
        cy: 190
    },
    mcPlayer05RunBack: {
        u: "mcPlayer05RunBack.png",
        w: 101,
        h: 199,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5],
        fps: 30,
        cx: 48,
        cy: 188
    },
    mcPlayer05Run2: {
        u: "mcPlayer05Run2.png",
        w: 166,
        h: 213,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 106,
        cy: 201
    },
    mcPlayer05Run: {
        u: "mcPlayer05Run.png",
        w: 247,
        h: 202,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 3, 3],
        fps: 30,
        cx: 175,
        cy: 187
    },
    mcPlayer05Hit: {
        u: "mcPlayer05Hit.png",
        w: 181,
        h: 245,
        f: [0, 0, 1, 1, 2, 2, 2, 2],
        fps: 30,
        cx: 92,
        cy: 235,
        collision: "x:-80;y:-125;w:160;h:160",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer05Celebration: {
        u: "mcPlayer05Celebration.png",
        w: 172,
        h: 237,
        f: [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 82,
        cy: 226
    },
    mcPlayer04Throw: {
        u: "mcPlayer04Throw.png",
        w: 90,
        h: 118,
        f: [0, 0, 1, 1, 2, 2, 0, 0, 0],
        fps: 30,
        cx: 40,
        cy: 112
    },
    mcPlayer04StandFront: {
        u: "mcPlayer04StandFront.png",
        w: 66,
        h: 121,
        f: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 31,
        cy: 115,
        collision: "x:-30;y:-90;w:60;h:90",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer04Stand: {
        u: "mcPlayer04Stand.png",
        w: 82,
        h: 117,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 34,
        cy: 111
    },
    mcPlayer04Sad: {
        u: "mcPlayer04Sad.png",
        w: 131,
        h: 116,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 24,
        cy: 111
    },
    mcPlayer04RunFront: {
        u: "mcPlayer04RunFront.png",
        w: 99,
        h: 125,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5],
        fps: 30,
        cx: 48,
        cy: 118,
        collision: "x:-30;y:-90;w:60;h:90",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer04RunBack: {
        u: "mcPlayer04RunBack.png",
        w: 70,
        h: 119,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5],
        fps: 30,
        cx: 33,
        cy: 106,
        collision: "x:-30;y:-90;w:60;h:90",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer04Run2: {
        u: "mcPlayer04Run2.png",
        w: 159,
        h: 144,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 101,
        cy: 138
    },
    mcPlayer04Run: {
        u: "mcPlayer04Run.png",
        w: 204,
        h: 125,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7],
        fps: 30,
        cx: 140,
        cy: 117
    },
    mcPlayer04Hit: {
        u: "mcPlayer04Hit.png",
        w: 153,
        h: 147,
        f: [0, 0, 1, 1, 2, 2, 2, 2],
        fps: 30,
        cx: 63,
        cy: 142,
        collision: "x:-80;y:-125;w:160;h:160",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer04Celebration: {
        u: "mcPlayer04Celebration.png",
        w: 74,
        h: 146,
        f: [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 36,
        cy: 140
    },
    mcPlayer03Throw: {
        u: "mcPlayer03Throw.png",
        w: 76,
        h: 103,
        f: [0, 0, 1, 1, 2, 0, 0, 0, 0],
        fps: 30,
        cx: 34,
        cy: 95
    },
    mcPlayer03StandFront: {
        u: "mcPlayer03StandFront.png",
        w: 68,
        h: 99,
        f: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 32,
        cy: 92,
        collision: "x:-30;y:-90;w:60;h:90",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer03Stand: {
        u: "mcPlayer03Stand.png",
        w: 69,
        h: 102,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 33,
        cy: 94
    },
    mcPlayer03Sad: {
        u: "mcPlayer03Sad.png",
        w: 62,
        h: 101,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 28,
        cy: 95
    },
    mcPlayer03RunFront: {
        u: "mcPlayer03RunFront.png",
        w: 79,
        h: 112,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5],
        fps: 30,
        cx: 38,
        cy: 105,
        collision: "x:-30;y:-90;w:60;h:90",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer03RunBack: {
        u: "mcPlayer03RunBack.png",
        w: 73,
        h: 111,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 2, 2, 2],
        fps: 30,
        cx: 33,
        cy: 104,
        collision: "x:-30;y:-90;w:60;h:90",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer03Run2: {
        u: "mcPlayer03Run2.png",
        w: 151,
        h: 131,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 93,
        cy: 124
    },
    mcPlayer03Run: {
        u: "mcPlayer03Run.png",
        w: 197,
        h: 109,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7],
        fps: 30,
        cx: 127,
        cy: 101
    },
    mcPlayer03Hit: {
        u: "mcPlayer03Hit.png",
        w: 153,
        h: 146,
        f: [0, 0, 1, 1, 2, 2, 2, 2],
        fps: 30,
        cx: 63,
        cy: 140,
        collision: "x:-80;y:-125;w:160;h:160",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer03Celebration: {
        u: "mcPlayer03Celebration.png",
        w: 80,
        h: 145,
        f: [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 2, 2, 1, 1],
        fps: 30,
        cx: 39,
        cy: 138
    },
    mcPlayer02Throw: {
        u: "mcPlayer02Throw.png",
        w: 90,
        h: 117,
        f: [0, 0, 1, 1, 2, 2, 0, 0],
        fps: 30,
        cx: 47,
        cy: 111
    },
    mcPlayer02StandFront: {
        u: "mcPlayer02StandFront.png",
        w: 77,
        h: 120,
        f: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 26,
        cy: 114,
        collision: "x:-30;y:-90;w:60;h:90",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer02Stand: {
        u: "mcPlayer02Stand.png",
        w: 79,
        h: 116,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 47,
        cy: 110
    },
    mcPlayer02Sad: {
        u: "mcPlayer02Sad.png",
        w: 91,
        h: 105,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 41,
        cy: 99
    },
    mcPlayer02RunFront: {
        u: "mcPlayer02RunFront.png",
        w: 76,
        h: 123,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5],
        fps: 30,
        cx: 32,
        cy: 116,
        collision: "x:-30;y:-90;w:60;h:90",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer02RunBack: {
        u: "mcPlayer02RunBack.png",
        w: 77,
        h: 121,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5],
        fps: 30,
        cx: 32,
        cy: 114,
        collision: "x:-30;y:-90;w:60;h:90",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer02Run2: {
        u: "mcPlayer02Run2.png",
        w: 117,
        h: 119,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3],
        fps: 30,
        cx: 75,
        cy: 112
    },
    mcPlayer02Run: {
        u: "mcPlayer02Run.png",
        w: 198,
        h: 134,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7],
        fps: 30,
        cx: 136,
        cy: 126
    },
    mcPlayer02Hit: {
        u: "mcPlayer02Hit.png",
        w: 153,
        h: 147,
        f: [0, 0, 1, 1, 2, 2, 2, 2],
        fps: 30,
        cx: 63,
        cy: 141,
        collision: "x:-80;y:-125;w:160;h:160",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer02Celebration: {
        u: "mcPlayer02Celebration.png",
        w: 85,
        h: 144,
        f: [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 47,
        cy: 137
    },
    mcPlayer01Throw: {
        u: "mcPlayer01Throw.png",
        w: 84,
        h: 102,
        f: [0, 0, 1, 1, 2, 2],
        fps: 30,
        cx: 46,
        cy: 96
    },
    mcPlayer01StandFront: {
        u: "mcPlayer01StandFront.png",
        w: 57,
        h: 98,
        f: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 26,
        cy: 92,
        collision: "x:-30;y:-90;w:60;h:90",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer01Stand: {
        u: "mcPlayer01Stand.png",
        w: 86,
        h: 100,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 44,
        cy: 94
    },
    mcPlayer01Sad: {
        u: "mcPlayer01Sad.png",
        w: 57,
        h: 92,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 26,
        cy: 87
    },
    mcPlayer01RunFront: {
        u: "mcPlayer01RunFront.png",
        w: 89,
        h: 110,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5],
        fps: 30,
        cx: 44,
        cy: 103,
        collision: "x:-30;y:-90;w:60;h:90",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer01RunBack: {
        u: "mcPlayer01RunBack.png",
        w: 67,
        h: 103,
        f: [0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 32,
        cy: 96,
        collision: "x:-30;y:-90;w:60;h:90",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer01Run2: {
        u: "mcPlayer01Run2.png",
        w: 153,
        h: 130,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 91,
        cy: 123
    },
    mcPlayer01Run: {
        u: "mcPlayer01Run.png",
        w: 169,
        h: 121,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7],
        fps: 30,
        cx: 112,
        cy: 109
    },
    mcPlayer01Hit: {
        u: "mcPlayer01Hit.png",
        w: 153,
        h: 146,
        f: [0, 0, 1, 1, 2, 2, 2, 2],
        fps: 30,
        cx: 63,
        cy: 140,
        collision: "x:-80;y:-125;w:160;h:160",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcPlayer01Celebration: {
        u: "mcPlayer01Celebration.png",
        w: 112,
        h: 117,
        f: [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 55,
        cy: 110
    },
    mcNpc05Run: {
        u: "mcNpc05Run.png",
        w: 94,
        h: 134,
        f: [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3],
        fps: 30,
        cx: 46,
        cy: 128,
        collision: "x:-80;y:-125;w:160;h:160",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcNpc04Run: {
        u: "mcNpc04Run.png",
        w: 98,
        h: 141,
        f: [0, 0, 0, 0,
            0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3
        ],
        fps: 30,
        cx: 46,
        cy: 137,
        collision: "x:-80;y:-125;w:160;h:160",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcNpc03Thankyou: {
        u: "mcNpc03Thankyou.png",
        w: 93,
        h: 179,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3, 2, 2, 1, 1],
        fps: 30,
        cx: 48,
        cy: 182
    },
    mcNpc03Stand: {
        u: "mcNpc03Stand.png",
        w: 33,
        h: 97,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 14,
        cy: 69
    },
    mcNpc03Idle: {
        u: "mcNpc03Idle.png",
        w: 33,
        h: 98,
        f: [0, 0, 0, 1, 1, 1],
        fps: 30,
        cx: 14,
        cy: 70
    },
    mcNpc03DrinkPink: {
        u: "mcNpc03DrinkPink.png",
        w: 33,
        h: 97,
        f: [0, 0, 0, 0, 1, 1,
            1, 1
        ],
        fps: 30,
        cx: 14,
        cy: 69
    },
    mcNpc03DrinkGreen: {
        u: "mcNpc03DrinkGreen.png",
        w: 33,
        h: 97,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 14,
        cy: 69
    },
    mcNpc03Celebrate: {
        u: "mcNpc03Celebrate.png",
        w: 93,
        h: 181,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3, 2, 2, 1, 1],
        fps: 30,
        cx: 48,
        cy: 182
    },
    mcNpc03Ask: {
        u: "mcNpc03Ask.png",
        w: 91,
        h: 140,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 1, 1, 1],
        fps: 30,
        cx: 38,
        cy: 115,
        collision: "x:-80;y:-125;w:160;h:160",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcNpc03Angry2Hit: {
        u: "mcNpc03Angry2Hit.png",
        w: 78,
        h: 109,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2],
        fps: 30,
        cx: 32,
        cy: 75
    },
    mcNpc03Angry2: {
        u: "mcNpc03Angry2.png",
        w: 33,
        h: 97,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 14,
        cy: 69
    },
    mcNpc03Angry: {
        u: "mcNpc03Angry.png",
        w: 33,
        h: 97,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 14,
        cy: 69
    },
    mcNpc02Thankyou: {
        u: "mcNpc02Thankyou.png",
        w: 79,
        h: 126,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3, 2, 2, 1, 1],
        fps: 30,
        cx: 40,
        cy: 123
    },
    mcNpc02Stand: {
        u: "mcNpc02Stand.png",
        w: 46,
        h: 101,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 25,
        cy: 81
    },
    mcNpc02Idle: {
        u: "mcNpc02Idle.png",
        w: 53,
        h: 100,
        f: [0, 0, 0, 1, 1, 1],
        fps: 30,
        cx: 28,
        cy: 80
    },
    mcNpc02DrinkPink: {
        u: "mcNpc02DrinkPink.png",
        w: 46,
        h: 100,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 25,
        cy: 80
    },
    mcNpc02DrinkGreen: {
        u: "mcNpc02DrinkGreen.png",
        w: 46,
        h: 100,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 25,
        cy: 80
    },
    mcNpc02Celebrate: {
        u: "mcNpc02Celebrate.png",
        w: 79,
        h: 128,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3, 2, 2, 1, 1],
        fps: 30,
        cx: 40,
        cy: 125
    },
    mcNpc02Ask: {
        u: "mcNpc02Ask.png",
        w: 79,
        h: 110,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 1, 1, 1],
        fps: 30,
        cx: 39,
        cy: 98,
        collision: "x:-80;y:-125;w:160;h:160",
        bounds: "x:-25;y:-90;w:50;h:90",
        boundsAttack: "x:0;y:-70;w:100;h:50"
    },
    mcNpc02Angry2Hit: {
        u: "mcNpc02Angry2Hit.png",
        w: 78,
        h: 110,
        f: [0,
            0, 0, 1, 1, 1, 2, 2, 2
        ],
        fps: 30,
        cx: 32,
        cy: 76
    },
    mcNpc02Angry2: {
        u: "mcNpc02Angry2.png",
        w: 54,
        h: 99,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 27,
        cy: 79
    },
    mcNpc02Angry: {
        u: "mcNpc02Angry.png",
        w: 54,
        h: 99,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 27,
        cy: 79
    },
    mcNpc01Thankyou: {
        u: "mcNpc01Thankyou.png",
        w: 88,
        h: 180,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3, 2, 2, 1, 1],
        fps: 30,
        cx: 47,
        cy: 159,
        collision: "x:-43;y:-150;w:86;h:150",
        bounds: "x:-43;y:-150;w:86;h:150",
        boundsAttack: "x:-43;y:-150;w:86;h:150"
    },
    mcNpc01Stand: {
        u: "mcNpc01Stand.png",
        w: 37,
        h: 102,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 17,
        cy: 74,
        collision: "x:-17;y:-101;w:35;h:101",
        bounds: "x:-17;y:-101;w:35;h:101",
        boundsAttack: "x:-17;y:-101;w:35;h:101"
    },
    mcNpc01Idle: {
        u: "mcNpc01Idle.png",
        w: 61,
        h: 104,
        f: [0, 0, 0, 1, 1, 1],
        fps: 30,
        cx: 27,
        cy: 76,
        collision: "x:-24;y:-104;w:50;h:104",
        bounds: "x:-24;y:-104;w:50;h:104",
        boundsAttack: "x:-24;y:-104;w:50;h:104"
    },
    mcNpc01DrinkPink: {
        u: "mcNpc01DrinkPink.png",
        w: 39,
        h: 104,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 17,
        cy: 76,
        collision: "x:-17;y:-104;w:37;h:104",
        bounds: "x:-17;y:-104;w:37;h:104",
        boundsAttack: "x:-17;y:-104;w:37;h:104"
    },
    mcNpc01DrinkGreen: {
        u: "mcNpc01DrinkGreen.png",
        w: 39,
        h: 104,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 17,
        cy: 76,
        collision: "x:-17;y:-104;w:37;h:104",
        bounds: "x:-17;y:-104;w:37;h:104",
        boundsAttack: "x:-17;y:-104;w:37;h:104"
    },
    mcNpc01Celebrate: {
        u: "mcNpc01Celebrate.png",
        w: 88,
        h: 180,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3, 2, 2, 1, 1],
        fps: 30,
        cx: 47,
        cy: 159,
        collision: "x:-43;y:-150;w:86;h:150",
        bounds: "x:-43;y:-150;w:86;h:150",
        boundsAttack: "x:-43;y:-150;w:86;h:150"
    },
    mcNpc01Ask: {
        u: "mcNpc01Ask.png",
        w: 79,
        h: 147,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 1, 1, 1],
        fps: 30,
        cx: 32,
        cy: 127,
        collision: "x:-80;y:-125;w:160;h:160",
        bounds: "x:-80;y:-125;w:160;h:160",
        boundsAttack: "x:-80;y:-125;w:160;h:160"
    },
    mcNpc01Angry2Hit: {
        u: "mcNpc01Angry2Hit.png",
        w: 78,
        h: 111,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2],
        fps: 30,
        cx: 32,
        cy: 77,
        collision: "x:-20;y:-100;w:40;h:100",
        bounds: "x:-20;y:-100;w:40;h:100",
        boundsAttack: "x:-20;y:-100;w:40;h:100"
    },
    mcNpc01Angry2: {
        u: "mcNpc01Angry2.png",
        w: 40,
        h: 99,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 18,
        cy: 71,
        collision: "x:-20;y:-100;w:40;h:100",
        bounds: "x:-20;y:-100;w:40;h:100",
        boundsAttack: "x:-20;y:-100;w:40;h:100"
    },
    mcNpc01Angry: {
        u: "mcNpc01Angry.png",
        w: 40,
        h: 99,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 18,
        cy: 71,
        collision: "x:-20;y:-100;w:40;h:100",
        bounds: "x:-20;y:-100;w:40;h:100",
        boundsAttack: "x:-20;y:-100;w:40;h:100"
    },
    mcFxItem: {
        u: "mcFxItem.png",
        w: 220,
        h: 218,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 110,
        cy: 110
    },
    mcTeamDonald_Win2: {
        u: "mcTeamDonald_Win2.png",
        w: 106,
        h: 111,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 49,
        cy: 89,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_Win: {
        u: "mcTeamDonald_Win.png",
        w: 85,
        h: 133,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 42,
        cy: 115,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_ThrowinUpStand: {
        u: "mcTeamDonald_ThrowinUpStand.png",
        w: 78,
        h: 142,
        f: [0, 0],
        fps: 30,
        cx: 42,
        cy: 124,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_ThrowinUp: {
        u: "mcTeamDonald_ThrowinUp.png",
        w: 119,
        h: 142,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 43,
        cy: 124,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_ThrowinDownStand: {
        u: "mcTeamDonald_ThrowinDownStand.png",
        w: 69,
        h: 130,
        f: [0, 0],
        fps: 30,
        cx: 31,
        cy: 112,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_ThrowinDown: {
        u: "mcTeamDonald_ThrowinDown.png",
        w: 100,
        h: 143,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 38,
        cy: 125,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_Sweep: {
        u: "mcTeamDonald_Sweep.png",
        w: 168,
        h: 97,
        f: [0, 0, 1, 1, 2, 2, 3],
        fps: 30,
        cx: 80,
        cy: 76,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_Stand: {
        u: "mcTeamDonald_Stand.png",
        w: 105,
        h: 105,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 57,
        cy: 87,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_SpecialShoot: {
        u: "mcTeamDonald_SpecialShoot.png",
        w: 249,
        h: 155,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6],
        fps: 30,
        cx: 73,
        cy: 126,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_SpecialCharge: {
        u: "mcTeamDonald_SpecialCharge.png",
        w: 158,
        h: 113,
        f: [0, 0, 1, 1],
        fps: 30,
        cx: 100,
        cy: 80,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_RunSuperSpeed: {
        u: "mcTeamDonald_RunSuperSpeed.png",
        w: 131,
        h: 110,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3],
        fps: 30,
        cx: 72,
        cy: 92,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_RunHappy: {
        u: "mcTeamDonald_RunHappy.png",
        w: 117,
        h: 122,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 54,
        cy: 104,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_Run: {
        u: "mcTeamDonald_Run.png",
        w: 118,
        h: 110,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 59,
        cy: 92,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_KickHigh: {
        u: "mcTeamDonald_KickHigh.png",
        w: 194,
        h: 135,
        f: [0, 0, 1, 1, 2, 2, 2, 2],
        fps: 30,
        cx: 63,
        cy: 110,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_Kick: {
        u: "mcTeamDonald_Kick.png",
        w: 142,
        h: 119,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3],
        fps: 30,
        cx: 31,
        cy: 101,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_Hit: {
        u: "mcTeamDonald_Hit.png",
        w: 153,
        h: 103,
        f: [0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 80,
        cy: 79,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_FastShoot: {
        u: "mcTeamDonald_FastShoot.png",
        w: 212,
        h: 187,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 76,
        cy: 152,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_Defeat2: {
        u: "mcTeamDonald_Defeat2.png",
        w: 82,
        h: 111,
        f: [0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 3, 2, 2],
        fps: 30,
        cx: 38,
        cy: 90,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_Defeat: {
        u: "mcTeamDonald_Defeat.png",
        w: 77,
        h: 106,
        f: [0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 1, 1],
        fps: 30,
        cx: 35,
        cy: 88,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_CornerUpStand: {
        u: "mcTeamDonald_CornerUpStand.png",
        w: 91,
        h: 120,
        f: [0, 0],
        fps: 30,
        cx: 31,
        cy: 102,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_CornerUp: {
        u: "mcTeamDonald_CornerUp.png",
        w: 134,
        h: 126,
        f: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 47,
        cy: 102,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_CornerDownStand: {
        u: "mcTeamDonald_CornerDownStand.png",
        w: 98,
        h: 106,
        f: [0, 0],
        fps: 30,
        cx: 63,
        cy: 88,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_CornerDown: {
        u: "mcTeamDonald_CornerDown.png",
        w: 154,
        h: 113,
        f: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 78,
        cy: 92,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonald_ChargeShoot: {
        u: "mcTeamDonald_ChargeShoot.png",
        w: 114,
        h: 111,
        f: [0, 0, 1, 1],
        fps: 30,
        cx: 84,
        cy: 82,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonaldGK_Win2: {
        u: "mcTeamDonaldGK_Win2.png",
        w: 111,
        h: 112,
        f: [0, 0, 1, 1, 0, 0, 2, 2],
        fps: 30,
        cx: 49,
        cy: 90,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonaldGK_Win: {
        u: "mcTeamDonaldGK_Win.png",
        w: 85,
        h: 135,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 42,
        cy: 117,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonaldGK_Sweep: {
        u: "mcTeamDonaldGK_Sweep.png",
        w: 187,
        h: 75,
        f: [0, 0, 1, 1, 2, 2, 3],
        fps: 30,
        cx: 72,
        cy: 51,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonaldGK_StandBalloon: {
        u: "mcTeamDonaldGK_StandBalloon.png",
        w: 83,
        h: 108,
        f: [0, 0, 0, 0, 0, 0],
        fps: 30,
        cx: 39,
        cy: 90,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonaldGK_Stand: {
        u: "mcTeamDonaldGK_Stand.png",
        w: 96,
        h: 97,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 49,
        cy: 79,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonaldGK_RunHappy: {
        u: "mcTeamDonaldGK_RunHappy.png",
        w: 120,
        h: 129,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 54,
        cy: 111,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonaldGK_RunBack: {
        u: "mcTeamDonaldGK_RunBack.png",
        w: 103,
        h: 105,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 54,
        cy: 87,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonaldGK_Run: {
        u: "mcTeamDonaldGK_Run.png",
        w: 100,
        h: 103,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 48,
        cy: 85,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonaldGK_Kick: {
        u: "mcTeamDonaldGK_Kick.png",
        w: 186,
        h: 125,
        f: [0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 50,
        cy: 102,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonaldGK_GrabUp: {
        u: "mcTeamDonaldGK_GrabUp.png",
        w: 89,
        h: 169,
        f: [0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 44,
        cy: 143,
        collision: "x:-20;y:-140;w:40;h:100",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonaldGK_GrabMiddle: {
        u: "mcTeamDonaldGK_GrabMiddle.png",
        w: 87,
        h: 142,
        f: [0, 0, 1, 1, 2, 2],
        fps: 30,
        cx: 52,
        cy: 127,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonaldGK_GrabDown: {
        u: "mcTeamDonaldGK_GrabDown.png",
        w: 85,
        h: 168,
        f: [0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 32,
        cy: 119,
        collision: "x:-20;y:-50;w:40;h:80",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonaldGK_Defeat2: {
        u: "mcTeamDonaldGK_Defeat2.png",
        w: 82,
        h: 112,
        f: [0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 3, 2, 2],
        fps: 30,
        cx: 38,
        cy: 91,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDonaldGK_Defeat: {
        u: "mcTeamDonaldGK_Defeat.png",
        w: 77,
        h: 104,
        f: [0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 2, 2],
        fps: 30,
        cx: 35,
        cy: 89,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_Win2: {
        u: "mcTeamMickey_Win2.png",
        w: 82,
        h: 114,
        f: [0, 1, 1, 0, 2, 3, 3, 3],
        fps: 30,
        cx: 38,
        cy: 100,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_Win: {
        u: "mcTeamMickey_Win.png",
        w: 111,
        h: 125,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 61,
        cy: 113,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_ThrowinUpStand: {
        u: "mcTeamMickey_ThrowinUpStand.png",
        w: 61,
        h: 135,
        f: [0, 0],
        fps: 30,
        cx: 33,
        cy: 123,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_ThrowinUp: {
        u: "mcTeamMickey_ThrowinUp.png",
        w: 112,
        h: 136,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 45,
        cy: 124,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_ThrowinDownStand: {
        u: "mcTeamMickey_ThrowinDownStand.png",
        w: 65,
        h: 131,
        f: [0, 0],
        fps: 30,
        cx: 30,
        cy: 119,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_ThrowinDown: {
        u: "mcTeamMickey_ThrowinDown.png",
        w: 106,
        h: 137,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 40,
        cy: 125,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_Sweep: {
        u: "mcTeamMickey_Sweep.png",
        w: 155,
        h: 70,
        f: [0, 0, 1, 1, 2, 2, 3],
        fps: 30,
        cx: 86,
        cy: 56,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_Stand: {
        u: "mcTeamMickey_Stand.png",
        w: 103,
        h: 107,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 45,
        cy: 95,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_SpecialShoot: {
        u: "mcTeamMickey_SpecialShoot.png",
        w: 190,
        h: 159,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6],
        fps: 30,
        cx: 16,
        cy: 115,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_SpecialCharge: {
        u: "mcTeamMickey_SpecialCharge.png",
        w: 125,
        h: 107,
        f: [0, 0, 1, 1],
        fps: 30,
        cx: 45,
        cy: 80,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_RunSuperSpeed: {
        u: "mcTeamMickey_RunSuperSpeed.png",
        w: 114,
        h: 110,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3],
        fps: 30,
        cx: 59,
        cy: 96,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_RunHappy: {
        u: "mcTeamMickey_RunHappy.png",
        w: 102,
        h: 112,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 4, 4],
        fps: 30,
        cx: 32,
        cy: 98,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_Run: {
        u: "mcTeamMickey_Run.png",
        w: 87,
        h: 110,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 32,
        cy: 96,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_KickHigh: {
        u: "mcTeamMickey_KickHigh.png",
        w: 152,
        h: 124,
        f: [0, 0, 1, 1, 2, 2, 2, 2],
        fps: 30,
        cx: 20,
        cy: 112,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_Kick: {
        u: "mcTeamMickey_Kick.png",
        w: 136,
        h: 115,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3],
        fps: 30,
        cx: 44,
        cy: 103,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_Hit: {
        u: "mcTeamMickey_Hit.png",
        w: 148,
        h: 121,
        f: [0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 59,
        cy: 90,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_FastShoot: {
        u: "mcTeamMickey_FastShoot.png",
        w: 159,
        h: 157,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 64,
        cy: 147,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_Defeat2: {
        u: "mcTeamMickey_Defeat2.png",
        w: 84,
        h: 89,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
        fps: 30,
        cx: 44,
        cy: 75,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_Defeat: {
        u: "mcTeamMickey_Defeat.png",
        w: 66,
        h: 104,
        f: [0, 0, 0, 0, 1, 2, 2, 2, 1],
        fps: 30,
        cx: 25,
        cy: 92,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_CornerUpStand: {
        u: "mcTeamMickey_CornerUpStand.png",
        w: 77,
        h: 114,
        f: [0, 0],
        fps: 30,
        cx: 25,
        cy: 102,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_CornerUp: {
        u: "mcTeamMickey_CornerUp.png",
        w: 117,
        h: 128,
        f: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 41,
        cy: 104,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_CornerDownStand: {
        u: "mcTeamMickey_CornerDownStand.png",
        w: 73,
        h: 118,
        f: [0, 0],
        fps: 30,
        cx: 38,
        cy: 106,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_CornerDown: {
        u: "mcTeamMickey_CornerDown.png",
        w: 123,
        h: 126,
        f: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 47,
        cy: 112,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickey_ChargeShoot: {
        u: "mcTeamMickey_ChargeShoot.png",
        w: 114,
        h: 107,
        f: [0, 0, 1, 1],
        fps: 30,
        cx: 44,
        cy: 84,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickeyGK_Win2: {
        u: "mcTeamMickeyGK_Win2.png",
        w: 79,
        h: 119,
        f: [0, 1, 1, 0, 2, 3, 3, 3],
        fps: 30,
        cx: 38,
        cy: 105,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickeyGK_Win: {
        u: "mcTeamMickeyGK_Win.png",
        w: 114,
        h: 130,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 63,
        cy: 118,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickeyGK_Sweep: {
        u: "mcTeamMickeyGK_Sweep.png",
        w: 167,
        h: 74,
        f: [0, 0, 1, 1, 2, 2, 3],
        fps: 30,
        cx: 72,
        cy: 59,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickeyGK_StandBalloon: {
        u: "mcTeamMickeyGK_StandBalloon.png",
        w: 69,
        h: 110,
        f: [0, 0, 0, 0, 0, 0],
        fps: 30,
        cx: 32,
        cy: 98,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickeyGK_Stand: {
        u: "mcTeamMickeyGK_Stand.png",
        w: 82,
        h: 107,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 35,
        cy: 95,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickeyGK_RunHappy: {
        u: "mcTeamMickeyGK_RunHappy.png",
        w: 114,
        h: 119,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 38,
        cy: 105,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickeyGK_RunBack: {
        u: "mcTeamMickeyGK_RunBack.png",
        w: 88,
        h: 111,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 42,
        cy: 97,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickeyGK_Run: {
        u: "mcTeamMickeyGK_Run.png",
        w: 86,
        h: 109,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 35,
        cy: 94,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickeyGK_Kick: {
        u: "mcTeamMickeyGK_Kick.png",
        w: 155,
        h: 118,
        f: [0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 41,
        cy: 104,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickeyGK_GrabUp: {
        u: "mcTeamMickeyGK_GrabUp.png",
        w: 75,
        h: 156,
        f: [0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 44,
        cy: 132,
        collision: "x:-20;y:-140;w:40;h:100",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickeyGK_GrabMiddle: {
        u: "mcTeamMickeyGK_GrabMiddle.png",
        w: 91,
        h: 137,
        f: [0, 0, 1, 1, 2, 2],
        fps: 30,
        cx: 52,
        cy: 127,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickeyGK_GrabDown: {
        u: "mcTeamMickeyGK_GrabDown.png",
        w: 65,
        h: 150,
        f: [0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 31,
        cy: 98,
        collision: "x:-20;y:-50;w:40;h:80",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickeyGK_Defeat2: {
        u: "mcTeamMickeyGK_Defeat2.png",
        w: 84,
        h: 89,
        f: [0, 0, 0, 0, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3
        ],
        fps: 30,
        cx: 44,
        cy: 75,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMickeyGK_Defeat: {
        u: "mcTeamMickeyGK_Defeat.png",
        w: 59,
        h: 105,
        f: [0, 1, 1, 1, 2, 3, 3, 3, 2],
        fps: 30,
        cx: 18,
        cy: 93,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_Win2: {
        u: "mcTeamDaisy_Win2.png",
        w: 95,
        h: 120,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3],
        fps: 30,
        cx: 52,
        cy: 107,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_Win: {
        u: "mcTeamDaisy_Win.png",
        w: 72,
        h: 106,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 35,
        cy: 95,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_ThrowinUpStand: {
        u: "mcTeamDaisy_ThrowinUpStand.png",
        w: 63,
        h: 137,
        f: [0, 0],
        fps: 30,
        cx: 31,
        cy: 126,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_ThrowinUp: {
        u: "mcTeamDaisy_ThrowinUp.png",
        w: 95,
        h: 137,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 31,
        cy: 126,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_ThrowinDownStand: {
        u: "mcTeamDaisy_ThrowinDownStand.png",
        w: 62,
        h: 130,
        f: [0, 0],
        fps: 30,
        cx: 28,
        cy: 119,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_ThrowinDown: {
        u: "mcTeamDaisy_ThrowinDown.png",
        w: 99,
        h: 136,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 31,
        cy: 125,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_Sweep: {
        u: "mcTeamDaisy_Sweep.png",
        w: 168,
        h: 54,
        f: [0, 0, 1, 1, 2, 2, 3],
        fps: 30,
        cx: 75,
        cy: 42,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_Stand: {
        u: "mcTeamDaisy_Stand.png",
        w: 78,
        h: 106,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 31,
        cy: 95,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_SpecialShoot: {
        u: "mcTeamDaisy_SpecialShoot.png",
        w: 200,
        h: 146,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6],
        fps: 30,
        cx: 32,
        cy: 135,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_SpecialCharge: {
        u: "mcTeamDaisy_SpecialCharge.png",
        w: 120,
        h: 98,
        f: [0, 0, 1, 1],
        fps: 30,
        cx: 61,
        cy: 72,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_RunSuperSpeed: {
        u: "mcTeamDaisy_RunSuperSpeed.png",
        w: 114,
        h: 110,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3],
        fps: 30,
        cx: 59,
        cy: 96,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_RunHappy: {
        u: "mcTeamDaisy_RunHappy.png",
        w: 99,
        h: 127,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 40,
        cy: 113,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_Run: {
        u: "mcTeamDaisy_Run.png",
        w: 95,
        h: 110,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 40,
        cy: 96,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_KickHigh: {
        u: "mcTeamDaisy_KickHigh.png",
        w: 174,
        h: 125,
        f: [0, 0, 1, 1, 2, 2, 2, 2],
        fps: 30,
        cx: 43,
        cy: 102,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_Kick: {
        u: "mcTeamDaisy_Kick.png",
        w: 134,
        h: 116,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3],
        fps: 30,
        cx: 50,
        cy: 105,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_Hit: {
        u: "mcTeamDaisy_Hit.png",
        w: 112,
        h: 129,
        f: [0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 62,
        cy: 101,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_FastShoot: {
        u: "mcTeamDaisy_FastShoot.png",
        w: 170,
        h: 180,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 61,
        cy: 154,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_Defeat2: {
        u: "mcTeamDaisy_Defeat2.png",
        w: 83,
        h: 93,
        f: [0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 46,
        cy: 81,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_Defeat: {
        u: "mcTeamDaisy_Defeat.png",
        w: 104,
        h: 119,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 46,
        cy: 108,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_CornerUpStand: {
        u: "mcTeamDaisy_CornerUpStand.png",
        w: 76,
        h: 110,
        f: [0, 0],
        fps: 30,
        cx: 23,
        cy: 98,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_CornerUp: {
        u: "mcTeamDaisy_CornerUp.png",
        w: 141,
        h: 113,
        f: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 35,
        cy: 92,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_CornerDownStand: {
        u: "mcTeamDaisy_CornerDownStand.png",
        w: 65,
        h: 109,
        f: [0, 0],
        fps: 30,
        cx: 30,
        cy: 98,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_CornerDown: {
        u: "mcTeamDaisy_CornerDown.png",
        w: 111,
        h: 113,
        f: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 35,
        cy: 101,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisy_ChargeShoot: {
        u: "mcTeamDaisy_ChargeShoot.png",
        w: 113,
        h: 113,
        f: [0, 0, 1, 1],
        fps: 30,
        cx: 44,
        cy: 84,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisyGK_Win2: {
        u: "mcTeamDaisyGK_Win2.png",
        w: 102,
        h: 123,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3],
        fps: 30,
        cx: 53,
        cy: 110,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisyGK_Win: {
        u: "mcTeamDaisyGK_Win.png",
        w: 72,
        h: 108,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 35,
        cy: 97,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisyGK_Sweep: {
        u: "mcTeamDaisyGK_Sweep.png",
        w: 165,
        h: 63,
        f: [0, 0, 1, 1, 2, 2, 3],
        fps: 30,
        cx: 72,
        cy: 43,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisyGK_StandBalloon: {
        u: "mcTeamDaisyGK_StandBalloon.png",
        w: 70,
        h: 110,
        f: [0, 0, 0, 0, 0, 0],
        fps: 30,
        cx: 31,
        cy: 99,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisyGK_Stand: {
        u: "mcTeamDaisyGK_Stand.png",
        w: 80,
        h: 101,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 31,
        cy: 90,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisyGK_RunHappy: {
        u: "mcTeamDaisyGK_RunHappy.png",
        w: 101,
        h: 132,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 37,
        cy: 118,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisyGK_RunBack: {
        u: "mcTeamDaisyGK_RunBack.png",
        w: 86,
        h: 107,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 38,
        cy: 96,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisyGK_Run: {
        u: "mcTeamDaisyGK_Run.png",
        w: 84,
        h: 105,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 31,
        cy: 93,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisyGK_Kick: {
        u: "mcTeamDaisyGK_Kick.png",
        w: 167,
        h: 124,
        f: [0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 31,
        cy: 101,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisyGK_GrabUp: {
        u: "mcTeamDaisyGK_GrabUp.png",
        w: 72,
        h: 152,
        f: [0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 28,
        cy: 125,
        collision: "x:-20;y:-140;w:40;h:100",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisyGK_GrabMiddle: {
        u: "mcTeamDaisyGK_GrabMiddle.png",
        w: 83,
        h: 146,
        f: [0, 0, 1, 1, 2, 2],
        fps: 30,
        cx: 42,
        cy: 137,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisyGK_GrabDown: {
        u: "mcTeamDaisyGK_GrabDown.png",
        w: 67,
        h: 138,
        f: [0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 31,
        cy: 100,
        collision: "x:-20;y:-50;w:40;h:80",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisyGK_Defeat2: {
        u: "mcTeamDaisyGK_Defeat2.png",
        w: 83,
        h: 94,
        f: [0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 46,
        cy: 82,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamDaisyGK_Defeat: {
        u: "mcTeamDaisyGK_Defeat.png",
        w: 104,
        h: 120,
        f: [0, 0, 0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 46,
        cy: 109,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_Win2: {
        u: "mcTeamMinnie_Win2.png",
        w: 76,
        h: 89,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3],
        fps: 30,
        cx: 25,
        cy: 78,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_Win: {
        u: "mcTeamMinnie_Win.png",
        w: 59,
        h: 108,
        f: [0, 0, 1, 1, 2, 2, 1, 1],
        fps: 30,
        cx: 23,
        cy: 99,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_ThrowinUpStand: {
        u: "mcTeamMinnie_ThrowinUpStand.png",
        w: 42,
        h: 135,
        f: [0, 0],
        fps: 30,
        cx: 21,
        cy: 127,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_ThrowinUp: {
        u: "mcTeamMinnie_ThrowinUp.png",
        w: 90,
        h: 136,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 26,
        cy: 127,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_ThrowinDownStand: {
        u: "mcTeamMinnie_ThrowinDownStand.png",
        w: 49,
        h: 135,
        f: [0, 0],
        fps: 30,
        cx: 17,
        cy: 123,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_ThrowinDown: {
        u: "mcTeamMinnie_ThrowinDown.png",
        w: 81,
        h: 137,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 19,
        cy: 125,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_Sweep: {
        u: "mcTeamMinnie_Sweep.png",
        w: 151,
        h: 66,
        f: [0, 0, 1, 1, 2, 2, 3],
        fps: 30,
        cx: 72,
        cy: 53,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_Stand: {
        u: "mcTeamMinnie_Stand.png",
        w: 55,
        h: 108,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 19,
        cy: 99,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_SpecialShoot: {
        u: "mcTeamMinnie_SpecialShoot.png",
        w: 147,
        h: 124,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6],
        fps: 30,
        cx: 17,
        cy: 106,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_SpecialCharge: {
        u: "mcTeamMinnie_SpecialCharge.png",
        w: 120,
        h: 117,
        f: [0, 0, 1, 1],
        fps: 30,
        cx: 60,
        cy: 90,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_RunSuperSpeed: {
        u: "mcTeamMinnie_RunSuperSpeed.png",
        w: 106,
        h: 108,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3],
        fps: 30,
        cx: 59,
        cy: 98,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_RunHappy: {
        u: "mcTeamMinnie_RunHappy.png",
        w: 82,
        h: 108,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 32,
        cy: 98,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_Run: {
        u: "mcTeamMinnie_Run.png",
        w: 76,
        h: 108,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 32,
        cy: 98,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_KickHigh: {
        u: "mcTeamMinnie_KickHigh.png",
        w: 145,
        h: 109,
        f: [0, 0, 1, 1, 2, 2, 2, 2],
        fps: 30,
        cx: 13,
        cy: 101,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_Kick: {
        u: "mcTeamMinnie_Kick.png",
        w: 104,
        h: 99,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3],
        fps: 30,
        cx: 30,
        cy: 89,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_Hit: {
        u: "mcTeamMinnie_Hit.png",
        w: 115,
        h: 123,
        f: [0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 40,
        cy: 87,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_FastShoot: {
        u: "mcTeamMinnie_FastShoot.png",
        w: 146,
        h: 176,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 46,
        cy: 158,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_Defeat2: {
        u: "mcTeamMinnie_Defeat2.png",
        w: 88,
        h: 79,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
        fps: 30,
        cx: 26,
        cy: 50,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_Defeat: {
        u: "mcTeamMinnie_Defeat.png",
        w: 64,
        h: 94,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3],
        fps: 30,
        cx: 17,
        cy: 86,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_CornerUpStand: {
        u: "mcTeamMinnie_CornerUpStand.png",
        w: 54,
        h: 107,
        f: [0, 0],
        fps: 30,
        cx: 15,
        cy: 94,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_CornerUp: {
        u: "mcTeamMinnie_CornerUp.png",
        w: 107,
        h: 118,
        f: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 35,
        cy: 94,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_CornerDownStand: {
        u: "mcTeamMinnie_CornerDownStand.png",
        w: 63,
        h: 117,
        f: [0, 0],
        fps: 30,
        cx: 13,
        cy: 105,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_CornerDown: {
        u: "mcTeamMinnie_CornerDown.png",
        w: 106,
        h: 118,
        f: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 30,
        cy: 106,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnie_ChargeShoot: {
        u: "mcTeamMinnie_ChargeShoot.png",
        w: 114,
        h: 103,
        f: [0, 0, 1, 1],
        fps: 30,
        cx: 54,
        cy: 77,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnieGK_Win2: {
        u: "mcTeamMinnieGK_Win2.png",
        w: 84,
        h: 91,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3],
        fps: 30,
        cx: 28,
        cy: 80,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnieGK_Win: {
        u: "mcTeamMinnieGK_Win.png",
        w: 60,
        h: 108,
        f: [0, 0, 1, 1, 2, 2, 1, 1],
        fps: 30,
        cx: 24,
        cy: 99,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnieGK_Sweep: {
        u: "mcTeamMinnieGK_Sweep.png",
        w: 177,
        h: 66,
        f: [0, 0, 1, 1, 2, 2, 3],
        fps: 30,
        cx: 81,
        cy: 32,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnieGK_StandBalloon: {
        u: "mcTeamMinnieGK_StandBalloon.png",
        w: 63,
        h: 107,
        f: [0, 0, 0, 0, 0, 0],
        fps: 30,
        cx: 19,
        cy: 97,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnieGK_Stand: {
        u: "mcTeamMinnieGK_Stand.png",
        w: 53,
        h: 104,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 19,
        cy: 95,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnieGK_RunHappy: {
        u: "mcTeamMinnieGK_RunHappy.png",
        w: 86,
        h: 108,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 32,
        cy: 98,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnieGK_RunBack: {
        u: "mcTeamMinnieGK_RunBack.png",
        w: 62,
        h: 107,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 29,
        cy: 96,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnieGK_Run: {
        u: "mcTeamMinnieGK_Run.png",
        w: 60,
        h: 107,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 22,
        cy: 94,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnieGK_Kick: {
        u: "mcTeamMinnieGK_Kick.png",
        w: 124,
        h: 108,
        f: [0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 30,
        cy: 96,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnieGK_GrabUp: {
        u: "mcTeamMinnieGK_GrabUp.png",
        w: 64,
        h: 153,
        f: [0, 0, 1, 2, 2, 2],
        fps: 30,
        cx: 34,
        cy: 129,
        collision: "x:-20;y:-140;w:40;h:100",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnieGK_GrabMiddle: {
        u: "mcTeamMinnieGK_GrabMiddle.png",
        w: 81,
        h: 133,
        f: [0, 0, 1, 2, 3, 3],
        fps: 30,
        cx: 42,
        cy: 126,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnieGK_GrabDown: {
        u: "mcTeamMinnieGK_GrabDown.png",
        w: 60,
        h: 144,
        f: [0, 0, 1, 2, 2, 2],
        fps: 30,
        cx: 31,
        cy: 98,
        collision: "x:-20;y:-50;w:40;h:80",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnieGK_Defeat2: {
        u: "mcTeamMinnieGK_Defeat2.png",
        w: 88,
        h: 79,
        f: [0, 0, 0, 0, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
        ],
        fps: 30,
        cx: 26,
        cy: 50,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamMinnieGK_Defeat: {
        u: "mcTeamMinnieGK_Defeat.png",
        w: 66,
        h: 94,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3],
        fps: 30,
        cx: 17,
        cy: 86,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_Win2: {
        u: "mcTeamGoofy_Win2.png",
        w: 72,
        h: 134,
        f: [0, 0, 1, 1, 2, 3, 3, 4, 4, 4],
        fps: 30,
        cx: 37,
        cy: 125,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_Win: {
        u: "mcTeamGoofy_Win.png",
        w: 79,
        h: 134,
        f: [0, 0, 1, 2, 2, 1],
        fps: 30,
        cx: 42,
        cy: 125,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_ThrowinUpStand: {
        u: "mcTeamGoofy_ThrowinUpStand.png",
        w: 61,
        h: 137,
        f: [0, 0],
        fps: 30,
        cx: 32,
        cy: 129,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_ThrowinUp: {
        u: "mcTeamGoofy_ThrowinUp.png",
        w: 98,
        h: 139,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 34,
        cy: 130,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_ThrowinDownStand: {
        u: "mcTeamGoofy_ThrowinDownStand.png",
        w: 52,
        h: 141,
        f: [0, 0],
        fps: 30,
        cx: 27,
        cy: 130,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_ThrowinDown: {
        u: "mcTeamGoofy_ThrowinDown.png",
        w: 103,
        h: 141,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 38,
        cy: 130,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_Sweep: {
        u: "mcTeamGoofy_Sweep.png",
        w: 157,
        h: 71,
        f: [0, 0, 1, 1, 2, 2, 3],
        fps: 30,
        cx: 72,
        cy: 60,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_Stand: {
        u: "mcTeamGoofy_Stand.png",
        w: 68,
        h: 125,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 32,
        cy: 117,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_SpecialShoot: {
        u: "mcTeamGoofy_SpecialShoot.png",
        w: 190,
        h: 142,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5],
        fps: 30,
        cx: 15,
        cy: 128,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_SpecialCharge: {
        u: "mcTeamGoofy_SpecialCharge.png",
        w: 120,
        h: 139,
        f: [0, 0, 1, 1],
        fps: 30,
        cx: 60,
        cy: 112,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_RunSuperSpeed: {
        u: "mcTeamGoofy_RunSuperSpeed.png",
        w: 106,
        h: 125,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3],
        fps: 30,
        cx: 59,
        cy: 116,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_RunHappy: {
        u: "mcTeamGoofy_RunHappy.png",
        w: 85,
        h: 127,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 32,
        cy: 118,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_Run: {
        u: "mcTeamGoofy_Run.png",
        w: 70,
        h: 125,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 32,
        cy: 116,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_KickHigh: {
        u: "mcTeamGoofy_KickHigh.png",
        w: 151,
        h: 126,
        f: [0, 0, 1, 1, 2, 2, 2, 2],
        fps: 30,
        cx: 19,
        cy: 118,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_Kick: {
        u: "mcTeamGoofy_Kick.png",
        w: 133,
        h: 133,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3],
        fps: 30,
        cx: 35,
        cy: 124,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_Hit: {
        u: "mcTeamGoofy_Hit.png",
        w: 133,
        h: 140,
        f: [0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
            4, 4, 5, 5
        ],
        fps: 30,
        cx: 58,
        cy: 112,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_FastShoot: {
        u: "mcTeamGoofy_FastShoot.png",
        w: 181,
        h: 189,
        f: [0, 0, 1, 1, 2, 2, 2, 3],
        fps: 30,
        cx: 58,
        cy: 162,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_Defeat2: {
        u: "mcTeamGoofy_Defeat2.png",
        w: 102,
        h: 73,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3],
        fps: 30,
        cx: 38,
        cy: 66,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_Defeat: {
        u: "mcTeamGoofy_Defeat.png",
        w: 67,
        h: 104,
        f: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 25,
        cy: 95,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_CornerUpStand: {
        u: "mcTeamGoofy_CornerUpStand.png",
        w: 56,
        h: 135,
        f: [0, 0],
        fps: 30,
        cx: 15,
        cy: 127,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_CornerUp: {
        u: "mcTeamGoofy_CornerUp.png",
        w: 107,
        h: 141,
        f: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 35,
        cy: 117,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_CornerDownStand: {
        u: "mcTeamGoofy_CornerDownStand.png",
        w: 51,
        h: 129,
        f: [0, 0],
        fps: 30,
        cx: 36,
        cy: 121,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_CornerDown: {
        u: "mcTeamGoofy_CornerDown.png",
        w: 129,
        h: 132,
        f: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 53,
        cy: 121,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofy_ChargeShoot: {
        u: "mcTeamGoofy_ChargeShoot.png",
        w: 114,
        h: 145,
        f: [0, 0, 1, 1],
        fps: 30,
        cx: 54,
        cy: 122,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofyGK_Win2: {
        u: "mcTeamGoofyGK_Win2.png",
        w: 74,
        h: 132,
        f: [0, 0, 1, 1, 0, 2, 2, 3, 3, 3],
        fps: 30,
        cx: 40,
        cy: 123,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofyGK_Win: {
        u: "mcTeamGoofyGK_Win.png",
        w: 82,
        h: 134,
        f: [0, 0, 1, 2, 2, 1],
        fps: 30,
        cx: 44,
        cy: 125,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofyGK_Sweep: {
        u: "mcTeamGoofyGK_Sweep.png",
        w: 177,
        h: 86,
        f: [0, 0, 1, 1, 2, 2, 3],
        fps: 30,
        cx: 79,
        cy: 74,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofyGK_StandBalloon: {
        u: "mcTeamGoofyGK_StandBalloon.png",
        w: 71,
        h: 125,
        f: [0, 0, 0, 0, 0, 0],
        fps: 30,
        cx: 32,
        cy: 117,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofyGK_Stand: {
        u: "mcTeamGoofyGK_Stand.png",
        w: 68,
        h: 125,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 37,
        cy: 117,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofyGK_RunHappy: {
        u: "mcTeamGoofyGK_RunHappy.png",
        w: 88,
        h: 127,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 32,
        cy: 118,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofyGK_RunBack: {
        u: "mcTeamGoofyGK_RunBack.png",
        w: 76,
        h: 131,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 40,
        cy: 120,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofyGK_Run: {
        u: "mcTeamGoofyGK_Run.png",
        w: 73,
        h: 130,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 31,
        cy: 118,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofyGK_Kick: {
        u: "mcTeamGoofyGK_Kick.png",
        w: 146,
        h: 129,
        f: [0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 32,
        cy: 119,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofyGK_GrabUp: {
        u: "mcTeamGoofyGK_GrabUp.png",
        w: 60,
        h: 165,
        f: [0, 0, 1, 2, 2, 2],
        fps: 30,
        cx: 34,
        cy: 141,
        collision: "x:-20;y:-140;w:40;h:100",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofyGK_GrabMiddle: {
        u: "mcTeamGoofyGK_GrabMiddle.png",
        w: 72,
        h: 139,
        f: [0, 0, 1, 2, 3, 3],
        fps: 30,
        cx: 42,
        cy: 132,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofyGK_GrabDown: {
        u: "mcTeamGoofyGK_GrabDown.png",
        w: 60,
        h: 143,
        f: [0, 0, 1, 2, 2, 2],
        fps: 30,
        cx: 33,
        cy: 99,
        collision: "x:-20;y:-50;w:40;h:80",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofyGK_Defeat2: {
        u: "mcTeamGoofyGK_Defeat2.png",
        w: 102,
        h: 75,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3],
        fps: 30,
        cx: 38,
        cy: 66,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamGoofyGK_Defeat: {
        u: "mcTeamGoofyGK_Defeat.png",
        w: 67,
        h: 104,
        f: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 25,
        cy: 95,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_Win2: {
        u: "mcTeamPluto_Win2.png",
        w: 134,
        h: 99,
        f: [0, 1, 1, 0, 2, 3, 3, 3],
        fps: 30,
        cx: 63,
        cy: 87,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_Win: {
        u: "mcTeamPluto_Win.png",
        w: 97,
        h: 121,
        f: [0, 0, 0, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 45,
        cy: 107,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_ThrowinUpStand: {
        u: "mcTeamPluto_ThrowinUpStand.png",
        w: 75,
        h: 142,
        f: [0, 0],
        fps: 30,
        cx: 39,
        cy: 134,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_ThrowinUp: {
        u: "mcTeamPluto_ThrowinUp.png",
        w: 114,
        h: 145,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 48,
        cy: 136,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_ThrowinDownStand: {
        u: "mcTeamPluto_ThrowinDownStand.png",
        w: 78,
        h: 145,
        f: [0, 0],
        fps: 30,
        cx: 38,
        cy: 133,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_ThrowinDown: {
        u: "mcTeamPluto_ThrowinDown.png",
        w: 119,
        h: 145,
        f: [0, 0, 1, 1, 2, 2, 3, 3],
        fps: 30,
        cx: 51,
        cy: 133,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_Sweep: {
        u: "mcTeamPluto_Sweep.png",
        w: 162,
        h: 98,
        f: [0, 0, 1, 1, 2, 2, 3],
        fps: 30,
        cx: 72,
        cy: 70,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_Stand: {
        u: "mcTeamPluto_Stand.png",
        w: 114,
        h: 116,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 49,
        cy: 108,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_SpecialShoot: {
        u: "mcTeamPluto_SpecialShoot.png",
        w: 205,
        h: 142,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5],
        fps: 30,
        cx: 30,
        cy: 128,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_SpecialCharge: {
        u: "mcTeamPluto_SpecialCharge.png",
        w: 137,
        h: 130,
        f: [0, 0, 1, 1],
        fps: 30,
        cx: 60,
        cy: 103,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_RunSuperSpeed: {
        u: "mcTeamPluto_RunSuperSpeed.png",
        w: 125,
        h: 117,
        f: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3],
        fps: 30,
        cx: 66,
        cy: 108,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_RunHappy: {
        u: "mcTeamPluto_RunHappy.png",
        w: 130,
        h: 125,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 4, 4],
        fps: 30,
        cx: 60,
        cy: 116,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_Run: {
        u: "mcTeamPluto_Run.png",
        w: 95,
        h: 117,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 40,
        cy: 108,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_KickHigh: {
        u: "mcTeamPluto_KickHigh.png",
        w: 158,
        h: 122,
        f: [0, 0, 1, 1, 2, 2, 2, 2],
        fps: 30,
        cx: 26,
        cy: 113,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_Kick: {
        u: "mcTeamPluto_Kick.png",
        w: 140,
        h: 119,
        f: [0, 0, 1, 1, 2, 2, 3, 3, 3],
        fps: 30,
        cx: 63,
        cy: 110,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_Hit: {
        u: "mcTeamPluto_Hit.png",
        w: 134,
        h: 153,
        f: [0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 37,
        cy: 99,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_FastShoot: {
        u: "mcTeamPluto_FastShoot.png",
        w: 173,
        h: 182,
        f: [0, 0, 1, 1, 2, 2, 2, 3],
        fps: 30,
        cx: 58,
        cy: 162,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_Defeat2: {
        u: "mcTeamPluto_Defeat2.png",
        w: 80,
        h: 87,
        f: [0, 1, 1, 1, 1, 2, 3, 3, 3, 2],
        fps: 30,
        cx: 35,
        cy: 79,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_Defeat: {
        u: "mcTeamPluto_Defeat.png",
        w: 103,
        h: 88,
        f: [0, 0, 0, 0, 1, 2, 2, 2, 1],
        fps: 30,
        cx: 42,
        cy: 79,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_CornerUpStand: {
        u: "mcTeamPluto_CornerUpStand.png",
        w: 86,
        h: 119,
        f: [0, 0],
        fps: 30,
        cx: 41,
        cy: 108,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_CornerUp: {
        u: "mcTeamPluto_CornerUp.png",
        w: 118,
        h: 132,
        f: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 46,
        cy: 108,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_CornerDownStand: {
        u: "mcTeamPluto_CornerDownStand.png",
        w: 84,
        h: 126,
        f: [0, 0],
        fps: 30,
        cx: 30,
        cy: 114,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_CornerDown: {
        u: "mcTeamPluto_CornerDown.png",
        w: 120,
        h: 131,
        f: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 44,
        cy: 119,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPluto_ChargeShoot: {
        u: "mcTeamPluto_ChargeShoot.png",
        w: 114,
        h: 131,
        f: [0, 0, 1, 1],
        fps: 30,
        cx: 54,
        cy: 108,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPlutoGK_Win2: {
        u: "mcTeamPlutoGK_Win2.png",
        w: 136,
        h: 102,
        f: [0, 1, 1, 0, 2, 3, 3, 3],
        fps: 30,
        cx: 64,
        cy: 90,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPlutoGK_Win: {
        u: "mcTeamPlutoGK_Win.png",
        w: 100,
        h: 114,
        f: [0, 0, 0, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 45,
        cy: 110,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPlutoGK_Sweep: {
        u: "mcTeamPlutoGK_Sweep.png",
        w: 183,
        h: 82,
        f: [0, 0, 1, 1, 2, 2, 3],
        fps: 30,
        cx: 72,
        cy: 62,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPlutoGK_StandBalloon: {
        u: "mcTeamPlutoGK_StandBalloon.png",
        w: 74,
        h: 114,
        f: [0, 0, 0, 0, 0, 0],
        fps: 30,
        cx: 31,
        cy: 105,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPlutoGK_Stand: {
        u: "mcTeamPlutoGK_Stand.png",
        w: 91,
        h: 106,
        f: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        fps: 30,
        cx: 42,
        cy: 98,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPlutoGK_RunHappy: {
        u: "mcTeamPlutoGK_RunHappy.png",
        w: 133,
        h: 127,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 62,
        cy: 118,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPlutoGK_RunBack: {
        u: "mcTeamPlutoGK_RunBack.png",
        w: 97,
        h: 116,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 44,
        cy: 105,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPlutoGK_Run: {
        u: "mcTeamPlutoGK_Run.png",
        w: 95,
        h: 114,
        f: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
        fps: 30,
        cx: 37,
        cy: 102,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPlutoGK_Kick: {
        u: "mcTeamPlutoGK_Kick.png",
        w: 170,
        h: 119,
        f: [0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5],
        fps: 30,
        cx: 56,
        cy: 108,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPlutoGK_GrabUp: {
        u: "mcTeamPlutoGK_GrabUp.png",
        w: 89,
        h: 168,
        f: [0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 44,
        cy: 144,
        collision: "x:-20;y:-140;w:40;h:100",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPlutoGK_GrabMiddle: {
        u: "mcTeamPlutoGK_GrabMiddle.png",
        w: 90,
        h: 145,
        f: [0, 0, 1, 1, 2, 2],
        fps: 30,
        cx: 52,
        cy: 138,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPlutoGK_GrabDown: {
        u: "mcTeamPlutoGK_GrabDown.png",
        w: 85,
        h: 143,
        f: [0, 0, 1, 1, 1, 1],
        fps: 30,
        cx: 32,
        cy: 98,
        collision: "x:-20;y:-50;w:40;h:80",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPlutoGK_Defeat2: {
        u: "mcTeamPlutoGK_Defeat2.png",
        w: 80,
        h: 88,
        f: [0, 1, 1, 1, 1, 2, 3, 3, 3, 2],
        fps: 30,
        cx: 35,
        cy: 80,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    },
    mcTeamPlutoGK_Defeat: {
        u: "mcTeamPlutoGK_Defeat.png",
        w: 103,
        h: 89,
        f: [0, 1, 1, 1, 2, 3, 3, 3, 2],
        fps: 30,
        cx: 42,
        cy: 80,
        collision: "x:-20;y:-40;w:40;h:40",
        bounds: "x:-40;y:-120;w:80;h:140",
        boundsAttack: "x:0;y:-40;w:40;h:40"
    }
};

function UIAssets() {}
UIAssets.loaderBack = "media/images/ui_images/screens/gui_screens_loader_background.jpg";
UIAssets.mainMenu = "screens/gui_screens_mainmenu_background.jpg buttons/gui_buttons_text.png buttons/gui_buttons_text02.png buttons/gui_buttons_icons03.png screens/gui_screens_common_teamside.png popups/gui_popups_panel.png popups/gui_popups_character.png screens/gui_screens_advertising_support.png buttons/gui_buttons_icons02.png buttons/gui_buttons_icons01.png buttons/gui_buttons_icons04.png hud/gui_hud_minigame_lifesupport.png hud/gui_hud_lifes.png common/gui_rotatescreen.jpg common/console_bg.png common/unsupported.jpg screens/gui_screens_cutscene01_background.jpg screens/gui_screens_cutscene01_background02.jpg screens/gui_screens_trophies_background.jpg buttons/gui_buttons_trophies.png".split(" ");
UIAssets.externs = ["images/localized/gui_screens_mainmenu_logo.png", "images/localized/gui_screens_mainmenu_name.png"];
UIAssets.buttons = ["gui_buttons_character.png", "gui_buttons_coke.png", "gui_buttons_level.png"];
UIAssets.common = [];
UIAssets.hud = "gui_hud_confetti01.png gui_hud_confetti02.png gui_hud_minigame_collect.png gui_hud_minigame_lifefx.png gui_hud_pin.png gui_hud_special.png gui_hud_special_base.png gui_hud_special_fx.png gui_hud_support.png gui_hud_timer_fx.png gui_hud_timer_fx2.png gui_hud_trophies_base.png".split(" ");
UIAssets.popups = "gui_popup_tutorial_base.png gui_popups_help_minigame_base.png gui_popups_help_minigame01.png gui_popups_help_minigame02.png gui_popups_help_minigame03.png gui_popups_message1.png gui_popups_message2.png gui_popups_minigame_plus.png gui_popups_minigame_powerup01.png gui_popups_minigame_powerup02.png gui_popups_minigame_powerup03.png".split(" ");
UIAssets.screens = "gui_rotatescreen.jpg gui_screens_common_confetti01.png gui_screens_common_confetti02.png gui_screens_cutscene02_background.jpg gui_screens_cutscene02_background02.jpg gui_screens_dailymatch_background.jpg gui_screens_dailymatch_championship_character01.png gui_screens_dailymatch_championship_character02.png gui_screens_dailymatch_championship_character03.png gui_screens_dailymatch_championship_character04.png gui_screens_dailymatch_championship_character05.png gui_screens_dailymatch_championship_character06.png gui_screens_dailymatch_championship_support.png gui_screens_dailymatch_pin.png gui_screens_dailymatch_semifinal_background.jpg gui_screens_dailymatch_semifinal_defeat.png gui_screens_dailymatch_semifinal_pin.png gui_screens_endgame_background.jpg gui_screens_endlevel_background.jpg gui_screens_endlevel_fan01.png gui_screens_endlevel_fan02.png gui_screens_endlevel_fan03.png gui_screens_endlevel_fan04.png gui_screens_endlevel_fan05.png gui_screens_endlevel_fan06.png gui_screens_endlevel_pin.png gui_screens_endlevel_score.png gui_screens_endlevel_trophy.png gui_screens_help_background.jpg gui_screens_help_background01.jpg gui_screens_help_background02.jpg gui_screens_help_background03.jpg gui_screens_help_character.png gui_screens_loader_background.jpg gui_screens_loader_bar.jpg gui_screens_results_background.jpg gui_screens_results_icons.png gui_screens_results_pin.png gui_screens_selectteam_background.jpg gui_screens_selectteam_fan01.png gui_screens_selectteam_fan02.png gui_screens_selectteam_fan03.png gui_screens_selectteam_fan04.png gui_screens_selectteam_fan05.png gui_screens_selectteam_fan06.png gui_screens_selectteam_team01.jpg gui_screens_selectteam_team02.jpg gui_screens_selectteam_team03.jpg gui_screens_selectteam_team04.jpg gui_screens_selectteam_team05.jpg gui_screens_selectteam_team06.jpg gui_screens_selectvenue_background.jpg gui_screens_selectvenue_character.png gui_screens_teamstanding_background.jpg gui_screens_teamstanding_characters.png unsupported.jpg".split(" ");

function soccerbeijing() {}
window.soccerbeijing = soccerbeijing;
soccerbeijing.properties = {
    width: 1685,
    height: 699,
    cameraWidth: 750,
    cameraHeight: 500,
    cameraScreenX: 0,
    cameraScreenY: 0,
    cameraYMin: 0.47,
    cameraYMax: 0.53,
    cameraXMin: 0.43,
    cameraXMax: 0.57,
    showCollisions: 1,
    playerX: 0,
    playerY: 0,
    useEmbeddedAssets: 1,
    scalePlayerX: 1,
    scalePlayerY: 1,
    limitUp: 135,
    limitDown: 665,
    limitLeft: 60,
    limitRight: 1625,
    goalDepth: 50,
    goalYInit: 265,
    goalYEnd: 510
};
soccerbeijing.layerTypes = [{
    type: "player",
    name: "player",
    x: 0,
    y: 0,
    width: 0,
    height: 0
}, {
    type: "collision",
    name: "collisions",
    matrix: [
        [0]
    ],
    cols: 1,
    rows: 1,
    tileW: 1685,
    tileH: 699,
    width: 1685,
    height: 699
}, {
    type: "cell",
    name: "background",
    matrix: [
        [1]
    ],
    image: ["soccerbeijing_DKO_bg_beijing"],
    cols: 1,
    rows: 1,
    tileW: 1685,
    tileH: 699,
    width: 1685,
    height: 699
}, {
    type: "objects",
    name: "objects",
    object: []
}];

function soccerbrazil() {}
window.soccerbrazil = soccerbrazil;
soccerbrazil.properties = {
    width: 1685,
    height: 699,
    cameraWidth: 750,
    cameraHeight: 500,
    cameraScreenX: 0,
    cameraScreenY: 0,
    cameraYMin: 0.47,
    cameraYMax: 0.53,
    cameraXMin: 0.43,
    cameraXMax: 0.57,
    showCollisions: 1,
    playerX: 0,
    playerY: 0,
    useEmbeddedAssets: 1,
    scalePlayerX: 1,
    scalePlayerY: 1,
    limitUp: 135,
    limitDown: 665,
    limitLeft: 60,
    limitRight: 1625,
    goalDepth: 50,
    goalYInit: 265,
    goalYEnd: 510
};
soccerbrazil.layerTypes = [{
    type: "player",
    name: "player",
    x: 0,
    y: 0,
    width: 0,
    height: 0
}, {
    type: "collision",
    name: "collisions",
    matrix: [
        [0]
    ],
    cols: 1,
    rows: 1,
    tileW: 1685,
    tileH: 699,
    width: 1685,
    height: 699
}, {
    type: "cell",
    name: "background",
    matrix: [
        [2]
    ],
    image: ["soccerbrazil_DKO_bg_brazil"],
    cols: 1,
    rows: 1,
    tileW: 1685,
    tileH: 699,
    width: 1685,
    height: 699
}, {
    type: "objects",
    name: "objects",
    object: []
}];

function socceridaho() {}
window.socceridaho = socceridaho;
socceridaho.properties = {
    width: 1685,
    height: 699,
    cameraWidth: 750,
    cameraHeight: 500,
    cameraScreenX: 0,
    cameraScreenY: 0,
    cameraYMin: 0.47,
    cameraYMax: 0.53,
    cameraXMin: 0.43,
    cameraXMax: 0.57,
    showCollisions: 1,
    playerX: 0,
    playerY: 0,
    useEmbeddedAssets: 1,
    scalePlayerX: 1,
    scalePlayerY: 1,
    limitUp: 135,
    limitDown: 665,
    limitLeft: 60,
    limitRight: 1625,
    goalDepth: 50,
    goalYInit: 265,
    goalYEnd: 510
};
socceridaho.layerTypes = [{
    type: "player",
    name: "player",
    x: 0,
    y: 0,
    width: 0,
    height: 0
}, {
    type: "collision",
    name: "collisions",
    matrix: [
        [0]
    ],
    cols: 1,
    rows: 1,
    tileW: 1685,
    tileH: 699,
    width: 1685,
    height: 699
}, {
    type: "cell",
    name: "background",
    matrix: [
        [1]
    ],
    image: ["socceridaho_DKO_bg_idaho"],
    cols: 1,
    rows: 1,
    tileW: 1685,
    tileH: 699,
    width: 1685,
    height: 699
}, {
    type: "objects",
    name: "objects",
    object: []
}];

function socceritaly() {}
window.socceritaly = socceritaly;
socceritaly.properties = {
    width: 1685,
    height: 699,
    cameraWidth: 750,
    cameraHeight: 500,
    cameraScreenX: 0,
    cameraScreenY: 0,
    cameraYMin: 0.47,
    cameraYMax: 0.53,
    cameraXMin: 0.43,
    cameraXMax: 0.57,
    showCollisions: 1,
    playerX: 0,
    playerY: 0,
    useEmbeddedAssets: 1,
    scalePlayerX: 1,
    scalePlayerY: 1,
    limitUp: 135,
    limitDown: 665,
    limitLeft: 60,
    limitRight: 1625,
    goalDepth: 50,
    goalYInit: 265,
    goalYEnd: 510
};
socceritaly.layerTypes = [{
    type: "player",
    name: "player",
    x: 0,
    y: 0,
    width: 0,
    height: 0
}, {
    type: "collision",
    name: "collisions",
    matrix: [
        [0]
    ],
    cols: 1,
    rows: 1,
    tileW: 1685,
    tileH: 699,
    width: 1685,
    height: 699
}, {
    type: "cell",
    name: "background",
    matrix: [
        [1]
    ],
    image: ["socceritaly_DKO_bg_italy"],
    cols: 1,
    rows: 1,
    tileW: 1685,
    tileH: 699,
    width: 1685,
    height: 699
}, {
    type: "objects",
    name: "objects",
    object: []
}];

function soccernewyork() {}
window.soccernewyork = soccernewyork;
soccernewyork.properties = {
    width: 1685,
    height: 699,
    cameraWidth: 750,
    cameraHeight: 500,
    cameraScreenX: 0,
    cameraScreenY: 0,
    cameraYMin: 0.47,
    cameraYMax: 0.53,
    cameraXMin: 0.43,
    cameraXMax: 0.57,
    showCollisions: 1,
    playerX: 0,
    playerY: 0,
    useEmbeddedAssets: 1,
    scalePlayerX: 1,
    scalePlayerY: 1,
    limitUp: 135,
    limitDown: 665,
    limitLeft: 60,
    limitRight: 1625,
    goalDepth: 50,
    goalYInit: 265,
    goalYEnd: 510
};
soccernewyork.layerTypes = [{
    type: "player",
    name: "player",
    x: 0,
    y: 0,
    width: 0,
    height: 0
}, {
    type: "collision",
    name: "collisions",
    matrix: [
        [0]
    ],
    cols: 1,
    rows: 1,
    tileW: 1685,
    tileH: 699,
    width: 1685,
    height: 699
}, {
    type: "cell",
    name: "background",
    matrix: [
        [1]
    ],
    image: ["soccernewyork_DKO_bg_newyork"],
    cols: 1,
    rows: 1,
    tileW: 1685,
    tileH: 699,
    width: 1685,
    height: 699
}, {
    type: "objects",
    name: "objects",
    object: []
}];

function soccerparis() {}
window.soccerparis = soccerparis;
soccerparis.properties = {
    width: 1685,
    height: 699,
    cameraWidth: 750,
    cameraHeight: 500,
    cameraScreenX: 0,
    cameraScreenY: 0,
    cameraYMin: 0.47,
    cameraYMax: 0.53,
    cameraXMin: 0.43,
    cameraXMax: 0.57,
    showCollisions: 1,
    playerX: 0,
    playerY: 0,
    useEmbeddedAssets: 1,
    scalePlayerX: 1,
    scalePlayerY: 1,
    limitUp: 135,
    limitDown: 665,
    limitLeft: 60,
    limitRight: 1625,
    goalDepth: 50,
    goalYInit: 265,
    goalYEnd: 510
};
soccerparis.layerTypes = [{
    type: "player",
    name: "player",
    x: 0,
    y: 0,
    width: 0,
    height: 0
}, {
    type: "collision",
    name: "collisions",
    matrix: [
        [0]
    ],
    cols: 1,
    rows: 1,
    tileW: 1685,
    tileH: 699,
    width: 1685,
    height: 699
}, {
    type: "cell",
    name: "background",
    matrix: [
        [1]
    ],
    image: ["soccerparis_DKO_bg_paris"],
    cols: 1,
    rows: 1,
    tileW: 1685,
    tileH: 699,
    width: 1685,
    height: 699
}, {
    type: "objects",
    name: "objects",
    object: []
}];

function soccertokyo() {}
window.soccertokyo = soccertokyo;
soccertokyo.properties = {
    width: 1685,
    height: 699,
    cameraWidth: 750,
    cameraHeight: 500,
    cameraScreenX: 0,
    cameraScreenY: 0,
    cameraYMin: 0.47,
    cameraYMax: 0.53,
    cameraXMin: 0.43,
    cameraXMax: 0.57,
    showCollisions: 1,
    playerX: 0,
    playerY: 0,
    useEmbeddedAssets: 1,
    scalePlayerX: 1,
    scalePlayerY: 1,
    limitUp: 135,
    limitDown: 665,
    limitLeft: 60,
    limitRight: 1625,
    goalDepth: 50,
    goalYInit: 265,
    goalYEnd: 510
};
soccertokyo.layerTypes = [{
    type: "player",
    name: "player",
    x: 0,
    y: 0,
    width: 0,
    height: 0
}, {
    type: "collision",
    name: "collisions",
    matrix: [
        [0]
    ],
    cols: 1,
    rows: 1,
    tileW: 1685,
    tileH: 699,
    width: 1685,
    height: 699
}, {
    type: "cell",
    name: "background",
    matrix: [
        [1]
    ],
    image: ["soccertokyo_DKO_bg_tokyo"],
    cols: 1,
    rows: 1,
    tileW: 1685,
    tileH: 699,
    width: 1685,
    height: 699
}, {
    type: "objects",
    name: "objects",
    object: []
}];

function RunnerLevel01() {}
window.RunnerLevel01 = RunnerLevel01;
RunnerLevel01.properties = {
    width: 950,
    height: 500,
    cameraWidth: 750,
    cameraHeight: 500,
    cameraScreenX: 0,
    cameraScreenY: 0,
    cameraYMin: 0.6,
    cameraYMax: 0.8,
    cameraXMin: 0.35,
    cameraXMax: 0.65,
    showCollisions: 1,
    playerX: 347,
    playerY: 333,
    useEmbeddedAssets: 1,
    scalePlayerX: 1,
    scalePlayerY: 1
};
RunnerLevel01.layerTypes = [{
    type: "player",
    name: "player",
    x: 0,
    y: 0,
    width: 0,
    height: 0
}, {
    type: "collision",
    name: "collisions",
    matrix: [
        [0]
    ],
    cols: 1,
    rows: 1,
    tileW: 950,
    tileH: 500,
    width: 950,
    height: 500
}, {
    type: "cell",
    name: "background",
    matrix: [
        [1]
    ],
    image: ["SoccerLevel01_background"],
    cols: 1,
    rows: 1,
    tileW: 950,
    tileH: 500,
    width: 950,
    height: 500
}, {
    type: "objects",
    name: "objects",
    object: []
}];

function Global() {}
Global.engine = null;
Global.game = null;
Global.app = null;
Global.level = 1;
Global.matchups = null;
Global.countSponsors = 3;
Global.countCentralLogo = 0;
Global.enableChampionship = !0;
Global.showAds = !1;
Global.KEY_NUM_DATA = "DKO_numData";
Global.savedNumData = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Global.INDEX_CHAMPIONSHIP_SELECTED_TEAM = 0;
Global.INDEX_CHAMPIONSHIP_END = "end";
Global.INDEX_ACHIEVEMENT_1 = 1;
Global.INDEX_ACHIEVEMENT_2 = 2;
Global.INDEX_ACHIEVEMENT_3 = 3;
Global.INDEX_ACHIEVEMENT_4 = 4;
Global.INDEX_ACHIEVEMENT_5 = 5;
Global.INDEX_ACH_COUNTER_2 = 6;
Global.INDEX_ACH_COUNTER_3 = 7;
Global.INDEX_ACH_COUNTER_4 = 8;
Global.INDEX_ACH_COUNTER_5 = 9;
Global.game_mode = "";
Global.mode_tournament = "tournament";
Global.mode_quick_play = "quick_play";
Global.URL_ASSETS = "media/images/animo/";
Global.URL_UI_IMAGES = "media/images/ui_images/";
Global.selectedTeam = 0;
Global.enemyTeam = 0;
Global.TEAM_NONE = 0;
Global.TEAM_MICKEY = 1;
Global.TEAM_MINNIE = 2;
Global.TEAM_DONALD = 3;
Global.TEAM_DAISY = 4;
Global.TEAM_GOOFY = 5;
Global.TEAM_PLUTO = 6;
Global.TOTAL_TEAMS = 6;
Global.selectedVenue = 0;
Global.VENUE_NONE = 0;
Global.VENUE_PARIS = 1;
Global.VENUE_NEW_YORK = 2;
Global.VENUE_TOKYO = 3;
Global.VENUE_BEIJING = 4;
Global.VENUE_ITALY = 5;
Global.VENUE_IDAHO = 6;
Global.scoreTeamLeft = 0;
Global.scoreTeamRight = 0;
Global.onHalfTime = !1;
Global.numOfTeams = 6;
Global.isTeamPlayerLocal = !1;
Global.mickeyEarned = 0;
Global.mickeyShots = 0;
Global.extraMickeyShot = 0;
Global.extraTimeGame = 0;
Global.extraTime = 0;
Global.boostOn = 0;
Global.minigameScore = 0;
Global.achievements = null;
Global.CHAMPIONSHIP_NORMAL = 1;
Global.CHAMPIONSHIP_SEMI = 2;
Global.CHAMPIONSHIP_FINAL = 3;
Global.CHAMPIONSHIP_END = 4;
Global.championship_stage = Global.CHAMPIONSHIP_NORMAL;

function Circle(a, b, c) {
    this.x = "undefined" === typeof a ? 0 : a;
    this.y = "undefined" === typeof b ? 0 : b;
    this.r = "undefined" === typeof c ? 0 : c
}
Circle.prototype.hitTest = function(a, b) {
    return (this.x - a) * (this.x - a) + (this.y - b) * (this.y - b) <= this.r * this.r
};
Circle.prototype.toString = function() {
    return "circle x:" + this.x + " y:" + this.y + " r:" + this.r
};

function Path(a) {
    this.m_sections = [];
    this.m_length = 0;
    for (var b = a.point.length(), c = 0; c < b; ++c) {
        for (var d = a.point[c].n, e = [], f = 0; f < d; ++f) e.push(new Vector2D(parseFloat(a.point[c]["x" + f]), parseFloat(a.point[c]["y" + f])));
        e.push(new Vector2D(parseFloat(a.point[(c + 1) % b].x0), parseFloat(a.point[(c + 1) % b].y0)));
        d = new PathSection(e, this.m_length);
        this.m_length += d.length();
        this.m_sections.push(d)
    }
}
Path.prototype.free = function() {
    this.m_sections = null
};
Path.prototype.update = function(a, b) {
    this.m_sections[b.pathPosition.section].update(a, b);
    b.pathPosition.point ? b.setPosition(b.pathPosition.point.x, b.pathPosition.point.y) : (b.pathPosition.section < this.m_sections.length - 1 ? b.pathPosition.section += 1 : (b.pathPosition.section = 0, b.pathPosition.distance = 0), this.m_sections[b.pathPosition.section].update(a, b), b.pathPosition.point ? b.setPosition(b.pathPosition.point.x, b.pathPosition.point.y) : Application.info("ERROR"))
};
Path.prototype.toString = function() {
    for (var a = "Path:", b = this.m_sections.length, c = 0; c < b; ++c) a += "\n" + this.m_sections[c];
    return a
};

function PathSection(a, b) {
    this.m_order = a.length - 1;
    this.m_points = a;
    this.m_initLength = b;
    this.m_length = 0;
    this.m_oldPos = null;
    switch (this.m_order) {
        case PathSection.CONIC:
        case PathSection.CUBIC:
        case PathSection.LINE:
            this.m_dir = new Vector2D(this.m_points[this.m_order].x - this.m_points[0].x, this.m_points[this.m_order].y - this.m_points[0].y);
            this.m_length = this.m_dir.length();
            this.m_angle = this.m_dir.angle();
            this.m_dir.normalize();
            break;
        default:
            Application.error("Invalid path section order: " + this.m_order)
    }
}
PathSection.LINE = 1;
PathSection.CONIC = 2;
PathSection.CUBIC = 3;
PathSection.SECTIONS = 3;
PathSection.prototype.free = function() {
    this.m_points = null
};
PathSection.prototype.length = function() {
    return this.m_length
};
PathSection.prototype.update = function(a, b) {
    var c = b.pathPosition.distance + a,
        d;
    if (c <= this.m_initLength + this.m_length) {
        switch (this.m_order) {
            case PathSection.LINE:
                b.pathPosition.point = this.m_dir.clone();
                b.pathPosition.point.scale(c - this.m_initLength);
                b.pathPosition.point.add(this.m_points[0]);
                b.pathPosition.tangent = this.m_angle;
                break;
            case PathSection.CONIC:
                b.pathPosition.point = new Vector2D;
                d = (c - this.m_initLength) / this.m_length;
                b.pathPosition.point.x = (1 - d) * (1 - d) * this.m_points[0].x + 2 * (1 - d) * d * this.m_points[1].x +
                    d * d * this.m_points[2].x;
                b.pathPosition.point.y = (1 - d) * (1 - d) * this.m_points[0].y + 2 * (1 - d) * d * this.m_points[1].y + d * d * this.m_points[2].y;
                this.m_oldPos && (this.m_oldPos.subtract(b.pathPosition.point), this.m_oldPos.scale(-1), b.pathPosition.tangent = this.m_oldPos.angle());
                this.m_oldPos = b.pathPosition.point;
                break;
            case PathSection.CUBIC:
                b.pathPosition.point = new Vector2D;
                d = (c - this.m_initLength) / this.m_length;
                b.pathPosition.point.x = (1 - d) * (1 - d) * (1 - d) * this.m_points[0].x + 3 * (1 - d) * (1 - d) * d * this.m_points[1].x + 3 * (1 - d) * d *
                    d * this.m_points[2].x + d * d * d * this.m_points[3].x;
                b.pathPosition.point.y = (1 - d) * (1 - d) * (1 - d) * this.m_points[0].y + 3 * (1 - d) * (1 - d) * d * this.m_points[1].y + 3 * (1 - d) * d * d * this.m_points[2].y + d * d * d * this.m_points[3].y;
                this.m_oldPos && (this.m_oldPos.subtract(b.pathPosition.point), this.m_oldPos.scale(-1), b.pathPosition.tangent = this.m_oldPos.angle());
                this.m_oldPos = b.pathPosition.point;
                break;
            default:
                Application.error("Invalid path section order: " + this.m_order)
        }
        b.pathPosition.distance = c
    } else this.m_oldPos = b.pathPosition.point =
        null
};
PathSection.prototype.toString = function() {
    for (var a = "section:", b = 0; b < this.m_points.length; ++b) a += this.m_points[b] + " ";
    return a
};

function TweenManager() {
    this._tweens = [];
    TweenManager.instance = this
}
TweenManager.prototype.getAll = function() {
    return this._tweens
};
TweenManager.prototype.removeAll = function() {
    this._tweens = []
};
TweenManager.prototype.add = function(a) {
    this._tweens.push(a)
};
TweenManager.prototype.remove = function(a) {
    a = this._tweens.indexOf(a); - 1 !== a && this._tweens.splice(a, 1)
};
TweenManager.prototype.update = function(a) {
    if (0 === this._tweens.length) return !1;
    var b = 0,
        c = this._tweens.length;
    for (a = void 0 !== a ? a : "undefined" !== typeof window && void 0 !== window.performance && void 0 !== window.performance.now ? window.performance.now() : Date.now(); b < c;) this._tweens[b].update(a) ? b++ : (this._tweens.splice(b, 1), c--);
    return !0
};

function TweenEasing() {}
TweenEasing.LinearNone = function(a) {
    return a
};
TweenEasing.QuadraticIn = function(a) {
    return a * a
};
TweenEasing.QuadraticOut = function(a) {
    return a * (2 - a)
};
TweenEasing.QuadraticInOut = function(a) {
    return 1 > (a *= 2) ? 0.5 * a * a : -0.5 * (--a * (a - 2) - 1)
};
TweenEasing.CubicIn = function(a) {
    return a * a * a
};
TweenEasing.CubicOut = function(a) {
    return --a * a * a + 1
};
TweenEasing.CubicInOut = function(a) {
    return 1 > (a *= 2) ? 0.5 * a * a * a : 0.5 * ((a -= 2) * a * a + 2)
};
TweenEasing.QuarticIn = function(a) {
    return a * a * a * a
};
TweenEasing.QuarticOut = function(a) {
    return 1 - --a * a * a * a
};
TweenEasing.QuarticInOut = function(a) {
    return 1 > (a *= 2) ? 0.5 * a * a * a * a : -0.5 * ((a -= 2) * a * a * a - 2)
};
TweenEasing.QuinticIn = function(a) {
    return a * a * a * a * a
};
TweenEasing.QuinticOut = function(a) {
    return --a * a * a * a * a + 1
};
TweenEasing.QuinticInOut = function(a) {
    return 1 > (a *= 2) ? 0.5 * a * a * a * a * a : 0.5 * ((a -= 2) * a * a * a * a + 2)
};
TweenEasing.SinusoidalIn = function(a) {
    return 1 - Math.cos(a * Math.PI / 2)
};
TweenEasing.SinusoidalOut = function(a) {
    return Math.sin(a * Math.PI / 2)
};
TweenEasing.SinusoidalInOut = function(a) {
    return 0.5 * (1 - Math.cos(Math.PI * a))
};
TweenEasing.ExponentialIn = function(a) {
    return 0 === a ? 0 : Math.pow(1024, a - 1)
};
TweenEasing.ExponentialOut = function(a) {
    return 1 === a ? 1 : 1 - Math.pow(2, -10 * a)
};
TweenEasing.ExponentialInOut = function(a) {
    return 0 === a ? 0 : 1 === a ? 1 : 1 > (a *= 2) ? 0.5 * Math.pow(1024, a - 1) : 0.5 * (-Math.pow(2, -10 * (a - 1)) + 2)
};
TweenEasing.CircularIn = function(a) {
    return 1 - Math.sqrt(1 - a * a)
};
TweenEasing.CircularOut = function(a) {
    return Math.sqrt(1 - --a * a)
};
TweenEasing.CircularInOut = function(a) {
    return 1 > (a *= 2) ? -0.5 * (Math.sqrt(1 - a * a) - 1) : 0.5 * (Math.sqrt(1 - (a -= 2) * a) + 1)
};
TweenEasing.ElasticIn = function(a) {
    var b, c = 0.1;
    if (0 === a) return 0;
    if (1 === a) return 1;
    !c || 1 > c ? (c = 1, b = 0.1) : b = 0.4 * Math.asin(1 / c) / (2 * Math.PI);
    return -(c * Math.pow(2, 10 * (a -= 1)) * Math.sin(2 * (a - b) * Math.PI / 0.4))
};
TweenEasing.ElasticOut = function(a) {
    var b, c = 0.1;
    if (0 === a) return 0;
    if (1 === a) return 1;
    !c || 1 > c ? (c = 1, b = 0.1) : b = 0.4 * Math.asin(1 / c) / (2 * Math.PI);
    return c * Math.pow(2, -10 * a) * Math.sin(2 * (a - b) * Math.PI / 0.4) + 1
};
TweenEasing.ElasticInOut = function(a) {
    var b, c = 0.1;
    if (0 === a) return 0;
    if (1 === a) return 1;
    !c || 1 > c ? (c = 1, b = 0.1) : b = 0.4 * Math.asin(1 / c) / (2 * Math.PI);
    return 1 > (a *= 2) ? -0.5 * c * Math.pow(2, 10 * (a -= 1)) * Math.sin(2 * (a - b) * Math.PI / 0.4) : c * Math.pow(2, -10 * (a -= 1)) * Math.sin(2 * (a - b) * Math.PI / 0.4) * 0.5 + 1
};
TweenEasing.BackIn = function(a) {
    return a * a * (2.70158 * a - 1.70158)
};
TweenEasing.BackOut = function(a) {
    return --a * a * (2.70158 * a + 1.70158) + 1
};
TweenEasing.BackInOut = function(a) {
    return 1 > (a *= 2) ? 0.5 * a * a * (3.5949095 * a - 2.5949095) : 0.5 * ((a -= 2) * a * (3.5949095 * a + 2.5949095) + 2)
};
TweenEasing.BounceIn = function(a) {
    return 1 - TweenEasing.BounceOut(1 - a)
};
TweenEasing.BounceOut = function(a) {
    return a < 1 / 2.75 ? 7.5625 * a * a : a < 2 / 2.75 ? 7.5625 * (a -= 1.5 / 2.75) * a + 0.75 : a < 2.5 / 2.75 ? 7.5625 * (a -= 2.25 / 2.75) * a + 0.9375 : 7.5625 * (a -= 2.625 / 2.75) * a + 0.984375
};
TweenEasing.BounceInOut = function(a) {
    return 0.5 > a ? 0.5 * TweenEasing.BounceIn(2 * a) : 0.5 * TweenEasing.BounceOut(2 * a - 1) + 0.5
};

function TweenInterpolation() {}
TweenInterpolation.Linear = function(a, b) {
    var c = a.length - 1,
        d = c * b,
        e = Math.floor(d),
        f = TweenInterpolation.UtilsLinear;
    return 0 > b ? f(a[0], a[1], d) : 1 < b ? f(a[c], a[c - 1], c - d) : f(a[e], a[e + 1 > c ? c : e + 1], d - e)
};
TweenInterpolation.Bezier = function(a, b) {
    var c = 0,
        d = a.length - 1,
        e = Math.pow,
        f = TweenInterpolation.UtilsBernstein,
        g;
    for (g = 0; g <= d; g++) c += e(1 - b, d - g) * e(b, g) * a[g] * f(d, g);
    return c
};
TweenInterpolation.CatmullRom = function(a, b) {
    var c = a.length - 1,
        d = c * b,
        e = Math.floor(d),
        f = TweenInterpolation.UtilsCatmullRom;
    return a[0] === a[c] ? (0 > b && (e = Math.floor(d = c * (1 + b))), f(a[(e - 1 + c) % c], a[e], a[(e + 1) % c], a[(e + 2) % c], d - e)) : 0 > b ? a[0] - (f(a[0], a[0], a[1], a[1], -d) - a[0]) : 1 < b ? a[c] - (f(a[c], a[c], a[c - 1], a[c - 1], d - c) - a[c]) : f(a[e ? e - 1 : 0], a[e], a[c < e + 1 ? c : e + 1], a[c < e + 2 ? c : e + 2], d - e)
};
TweenInterpolation.UtilsLinear = function(a, b, c) {
    return (b - a) * c + a
};
TweenInterpolation.UtilsBernstein = function(a, b) {
    var c = TweenInterpolation.UtilsFactorial;
    return c(a) / c(b) / c(a - b)
};
TweenInterpolation.UtilsFactorial = function(a) {
    for (var b = 1, c = 1; c <= a; c++) b *= c;
    return b
};
TweenInterpolation.UtilsCatmullRom = function(a, b, c, d, e) {
    a = 0.5 * (c - a);
    d = 0.5 * (d - b);
    var f = e * e;
    return (2 * b - 2 * c + a + d) * e * f + (-3 * b + 3 * c - 2 * a - d) * f + a * e + b
};

function Tween(a) {
    this._object = this.target = a;
    this._valuesStart = {};
    this._valuesEnd = {};
    this._valuesStartRepeat = {};
    this._duration = 1E3;
    this._repeat = 0;
    this._reversed = this._yoyo = !1;
    this._delayTime = 0;
    this._startTime = null;
    this._easingFunction = TweenEasing.LinearNone;
    this._interpolationFunction = TweenInterpolation.Linear;
    this._chainedTweens = [];
    this._onStartCallback = null;
    this._onStartCallbackFired = !1;
    this._onCompleteCallback = this._onUpdateCallback = null;
    for (var b in a) this._valuesStart[b] = parseFloat(a[b])
}
Tween.prototype.to = function(a, b) {
    void 0 !== b && (this._duration = b);
    this._valuesEnd = a;
    return this
};
Tween.prototype.start = function(a) {
    TweenManager.instance.add(this);
    this._onStartCallbackFired = !1;
    this._startTime = void 0 !== a ? a : "undefined" !== typeof window && void 0 !== window.performance && void 0 !== window.performance.now ? window.performance.now() : Date.now();
    this._startTime += this._delayTime;
    for (var b in this._valuesEnd) {
        if (this._valuesEnd[b] instanceof Array) {
            if (0 === this._valuesEnd[b].length) continue;
            this._valuesEnd[b] = [this._object[b]].concat(this._valuesEnd[b])
        }
        this._valuesStart[b] = this._object[b];
        !1 ===
            this._valuesStart[b] instanceof Array && (this._valuesStart[b] *= 1);
        this._valuesStartRepeat[b] = this._valuesStart[b] || 0
    }
    return this
};
Tween.prototype.stop = function() {
    TweenManager.instance.remove(this);
    return this
};
Tween.prototype.delay = function(a) {
    this._delayTime = a;
    return this
};
Tween.prototype.repeat = function(a) {
    this._repeat = a;
    return this
};
Tween.prototype.yoyo = function(a) {
    this._yoyo = a;
    return this
};
Tween.prototype.easing = function(a) {
    this._easingFunction = a;
    return this
};
Tween.prototype.interpolation = function(a) {
    this._interpolationFunction = a;
    return this
};
Tween.prototype.chain = function() {
    this._chainedTweens = arguments;
    return this
};
Tween.prototype.onStart = function(a) {
    this._onStartCallback = a;
    return this
};
Tween.prototype.onUpdate = function(a) {
    this._onUpdateCallback = a;
    return this
};
Tween.prototype.onComplete = function(a) {
    this._onCompleteCallback = a;
    return this
};
Tween.prototype.update = function(a) {
    var b;
    if (a < this._startTime) return !0;
    !1 === this._onStartCallbackFired && (null !== this._onStartCallback && this._onStartCallback.call(this._object, this), this._onStartCallbackFired = !0);
    var c = (a - this._startTime) / this._duration,
        c = 1 < c ? 1 : c,
        d = this._easingFunction(c);
    for (b in this._valuesEnd) {
        var e = this._valuesStart[b] || 0,
            f = this._valuesEnd[b];
        f instanceof Array ? this._object[b] = this._interpolationFunction(f, d) : ("string" === typeof f && (f = e + parseFloat(f)), "number" === typeof f && (this._object[b] =
            e + (f - e) * d))
    }
    null !== this._onUpdateCallback && this._onUpdateCallback.call(this._object, this);
    if (1 == c)
        if (0 < this._repeat) {
            isFinite(this._repeat) && this._repeat--;
            for (b in this._valuesStartRepeat) "string" === typeof this._valuesEnd[b] && (this._valuesStartRepeat[b] += parseFloat(this._valuesEnd[b])), this._yoyo && (c = this._valuesStartRepeat[b], this._valuesStartRepeat[b] = this._valuesEnd[b], this._valuesEnd[b] = c, this._reversed = !this._reversed), this._valuesStart[b] = this._valuesStartRepeat[b];
            this._startTime = a + this._delayTime
        } else {
            null !==
                this._onCompleteCallback && this._onCompleteCallback.call(this._object, this);
            b = 0;
            for (c = this._chainedTweens.length; b < c; b++) this._chainedTweens[b].start(a);
            return !1
        }
    return !0
};

function Common() {}
Common.saveData = function(a, b) {
    var c = new Date;
    c.setDate(c.getDate() + Common.COOKIE_EXPIRATION_DAYS);
    c = "; expires=" + c.toUTCString();
    document.cookie = a + "=" + b + c + "; path=/"
};
Common.loadData = function(a, b) {
    for (var c = a + "=", d = document.cookie.split(";"), e = 0; e < d.length; ++e) {
        for (var f = d[e];
            " " === f.charAt(0);) f = f.substring(1, f.length);
        if (0 === f.indexOf(c)) return f.substring(c.length, f.length)
    }
    return b
};
Common.storageString = function(a, b) {
    b = "undefined" !== typeof b ? b : "|";
    for (var c = "", d = 0; d < a.length; d++) c += 0 !== d ? b : "", c += a[d];
    return c
};
Common.initArr = function(a, b) {
    for (var c = [], d = 0; d < b; d++) c.push(a);
    return c
};
Common.inArray = function(a, b) {
    return -1 !== b.indexOf(a)
};
Common.random = function(a, b) {
    return Math.floor(Math.random() * (b - a + 1)) + a
};
Common.getRandomFromArray = function(a, b) {
    var c = a.length;
    if (1 < c) {
        if ("undefined" !== typeof b) {
            for (var d = [], e = 0; e < c; ++e) a[e] !== b && d.push(e);
            if (0 < d.length) return a[d[Math.floor(d.length * Math.random())]]
        }
        return a[Math.floor(c * Math.random())]
    }
    return 1 === c ? a[0] : null
};
Common.shuffleArray = function(a) {
    for (var b, c, d = a.length - 1; 1 <= d; --d) b = Math.floor(Math.random() * (d + 1)), c = a[b], a[b] = a[d], a[d] = c
};
Common.getParams = function(a) {
    var b = {};
    a = a.split(";");
    for (var c = 0; c < a.length; c++)
        for (var d = a[c].split(":"), e = 0; e < d.length; e++) b[String(d[0]).concat()] = d[1];
    return b
};
Common.lengthObject = function(a) {
    var b = 0,
        c;
    for (c in a) a.hasOwnProperty(c) && ++b;
    return b
};
Common.trim = function(a) {
    return String(a).replace(/^\s*(.*?)\s*$/g, "$1")
};
Common.parseNum = function(a) {
    return 10 > a ? "0" + a : "" + a
};
Common.timeString = function(a) {
    var b = parseInt(a / 6E4, 10),
        b = 10 > b ? "0" + b : "" + b;
    a = parseInt(a % 6E4, 10);
    a = parseInt(a / 1E3, 10);
    a = 10 > a ? "0" + a : "" + a;
    b = "mm:ss".replace("mm", b);
    return b = b.replace("ss", a)
};
Common.replaceAt = function(a, b, c) {
    return a.substr(0, b) + c + a.substr(b + c.length)
};
Common.disableCssEvents = function(a) {
    $(a).css("pointer-events", "none");
    $(a).css("-webkit-touch-callout", "none");
    $(a).css("-webkit-user-select", "none");
    $(a).css("-khtml-user-select", "none");
    $(a).css("-moz-user-select", "none");
    $(a).css("-ms-user-select", "none");
    $(a).css("user-select", "none");
    $(a).css("cursor", "default")
};
Common.circumferenceAngle = function(a, b) {
    var c = Math.atan2(b, a),
        c = 180 / Math.PI * c;
    return 0 > c ? 360 - c : c
};
Common.KEY_1 = 49;
Common.KEY_2 = 50;
Common.KEY_3 = 51;
Common.KEY_4 = 52;
Common.KEY_5 = 53;
Common.KEY_6 = 54;
Common.KEY_7 = 55;
Common.KEY_8 = 56;
Common.KEY_9 = 57;
Common.KEY_0 = 48;
Common.KEY_A = 65;
Common.KEY_B = 66;
Common.KEY_C = 67;
Common.KEY_D = 68;
Common.KEY_E = 69;
Common.KEY_F = 70;
Common.KEY_G = 71;
Common.KEY_H = 72;
Common.KEY_I = 73;
Common.KEY_J = 74;
Common.KEY_K = 75;
Common.KEY_L = 76;
Common.KEY_M = 77;
Common.KEY_N = 78;
Common.KEY_O = 79;
Common.KEY_P = 80;
Common.KEY_Q = 81;
Common.KEY_R = 82;
Common.KEY_S = 83;
Common.KEY_T = 84;
Common.KEY_U = 85;
Common.KEY_V = 86;
Common.KEY_W = 87;
Common.KEY_X = 88;
Common.KEY_Z = 90;
Common.KEY_ESC = 27;
Common.KEY_SPACE = 32;
Common.KEY_ENTER = 13;
Common.KEY_LEFT = 37;
Common.KEY_RIGHT = 39;
Common.KEY_DOWN = 40;
Common.KEY_UP = 38;
Common.COLOR_NONE = "rgba(0, 0, 0, 0)";
Common.COLOR_RED = "#FF0000";
Common.COLOR_GREEN = "#00FF00";
Common.COLOR_BLUE = "#0000FF";
Common.COLOR_BLACK = "#000000";
Common.COLOR_WHITE = "#FFFFFF";
Common.COLOR_ORANGE = "#FF9900";
Common.COLOR_MAGENTA = "#FF00FF";
Common.COLOR_PURPLE = "#990066";
Common.COLOR_PINK = "#FF66FF";
Common.COLOR_BROWN = "#663300";
Common.COLOR_YELLOW = "#FFFF00";
Common.COLOR_GREY = "#666666";
Common.COLOR_DARK_BLUE = "#000066";
Common.COOKIE_EXPIRATION_DAYS = 1E3;

function ConsolePanel(a) {
    ConsolePanel.COLOR_BUTTON_NORMAL = "blue";
    ConsolePanel.COLOR_BUTTON_SELECT = "#5F04B4";
    this.mode = a;
    this.mode === ConsolePanel.MODE_SIMPLE ? (this.content = $("<div id='consolePanel'> <div id='consoleButtons'> <div class='console onlyfps' id='consoleFPS'>FPS</div></div></div>"), $("body").append(this.content), this.content.css("z-index", "100")) : (this.show = !0, this.stop = !1, this.type = this.counter = 0, this.showMaxLines = 40, this.content = $("<div id='consolePanel'> <div id='consoleButtons'> <div class='console toogle' id='consoleToogle'>SHOW</div><div class='console fps' id='consoleFPS'>FPS</div><div class='console play' id='consolePlay'>STOP</div><div class='console all' id='consoleAll'>ALL</div><div class='console infos' id='consoleInfos'>INFOS</div><div class='console logs' id='consoleLogs'>LOGS</div><div class='console warns' id='consoleWarns'>WARNS</div><div class='console errors' id='consoleErrors'>ERRORS</div><div class='console clear' id='consoleClear'>CLEAR</div></div><br><div><p id='consoleTextInfo'></p></div><div><p id='consoleText'></p></div></div>"),
        $("body").append(this.content), this.content.css("pointer-events", "none"), this.content.css("position", "absolute"), this.content.css("width", Application.APP_WIDTH + "px"), this.content.css("height", Application.APP_HEIGHT + "px"), this.content.css("z-index", "100"), this.content.css("overflow-y", "scroll"), this.content.css("-webkit-overflow-scrolling", "touch"), $("#consoleText").css("position", "relative"), $("#consoleText").css("top", "-20px"), $("#consoleText").css("font-size", "12px"), $("#consoleText").css("line-height",
            "100%"), $("#consoleButtons").css("pointer-events", "auto"), this.addPressListener("consoleToogle"), this.addPressListener("consoleAll"), this.addPressListener("consoleInfos"), this.addPressListener("consoleLogs"), this.addPressListener("consoleWarns"), this.addPressListener("consoleErrors"), this.addPressListener("consolePlay"), this.addPressListener("consoleClear"), this.lines = [], this.lastMsn = {}, this.lastMsnCounter = 1, this.toogle(), this.textInfo = "", $("#consoleAll").css("background-color", ConsolePanel.COLOR_BUTTON_SELECT))
}
ConsolePanel.initialize = function(a) {
    ConsolePanel.instance = new ConsolePanel(a)
};
ConsolePanel.prototype.onPress = function(a) {
    switch (a.id) {
        case "consoleAll":
        case "consoleInfos":
        case "consoleLogs":
        case "consoleWarns":
        case "consoleErrors":
            $("#consoleAll").css("background-color", ConsolePanel.COLOR_BUTTON_NORMAL), $("#consoleInfos").css("background-color", ConsolePanel.COLOR_BUTTON_NORMAL), $("#consoleLogs").css("background-color", ConsolePanel.COLOR_BUTTON_NORMAL), $("#consoleWarns").css("background-color", ConsolePanel.COLOR_BUTTON_NORMAL), $("#consoleErrors").css("background-color", ConsolePanel.COLOR_BUTTON_NORMAL)
    }
    switch (a.id) {
        case "consoleToogle":
            this.show ?
                (this.content.css("width", "101px"), this.content.css("height", "32px"), this.content.css("overflow-y", "hidden"), $(".console.toogle").html("SHOW"), $("#consoleText").css("display", "none")) : (this.content.css("width", Application.APP_WIDTH + "px"), this.content.css("height", Application.APP_HEIGHT + "px"), this.content.css("overflow-y", "scroll"), $(".console.toogle").html("HIDE"), $("#consoleText").css("display", ""));
            this.show = !this.show;
            break;
        case "consoleAll":
            this.type = ConsolePanel.TYPE_ALL;
            $("#consoleAll").css("background-color",
                ConsolePanel.COLOR_BUTTON_SELECT);
            this.filter();
            break;
        case "consoleInfos":
            this.type = ConsolePanel.TYPE_INFO;
            $("#consoleInfos").css("background-color", ConsolePanel.COLOR_BUTTON_SELECT);
            this.filter();
            break;
        case "consoleLogs":
            this.type = ConsolePanel.TYPE_LOG;
            $("#consoleLogs").css("background-color", ConsolePanel.COLOR_BUTTON_SELECT);
            this.filter();
            break;
        case "consoleWarns":
            this.type = ConsolePanel.TYPE_WARN;
            $("#consoleWarns").css("background-color", ConsolePanel.COLOR_BUTTON_SELECT);
            this.filter();
            break;
        case "consoleErrors":
            this.type =
                ConsolePanel.TYPE_ERROR;
            $("#consoleErrors").css("background-color", ConsolePanel.COLOR_BUTTON_SELECT);
            this.filter();
            break;
        case "consolePlay":
            this.stop ? $("#consolePlay").html("STOP") : $("#consolePlay").html("PLAY");
            this.stop = !this.stop;
            break;
        case "consoleClear":
            this.lines = [], this.lastMsn = {}, this.lastMsnCounter = 1, this.counter = 0, $("#consoleText").html(""), this.filter()
    }
};
ConsolePanel.prototype.toogle = function() {
    this.show ? (this.content.css("width", "101px"), this.content.css("height", "32px"), this.content.css("overflow", "hidden")) : (this.content.css("width", Application.APP_WIDTH + "px"), this.content.css("height", Application.APP_HEIGHT + "px"), this.content.css("overflow", "auto"));
    this.show = !this.show
};
ConsolePanel.prototype.onResize = function() {
    Layout.css("#consolePanel", "transform-origin", "0px 0px");
    Layout.css("#consolePanel", "transform", "matrix3d(" + Layout.scale + ",0,0,0, 0," + Layout.scale + ",0,0, 0,0," + Layout.scale + ",0, " + Layout.left + "," + Layout.top + ",0,1)")
};
ConsolePanel.prototype.clearPersistent = function() {
    this.textInfo = ""
};
ConsolePanel.prototype.persistent = function(a) {
    this.textInfo += " " + a;
    this.show && $("#consoleTextInfo").html(this.textInfo)
};
ConsolePanel.prototype.log = function(a) {
    this.mode === ConsolePanel.MODE_SIMPLE || this.stop || (a = this.checkMessage(a, ConsolePanel.TYPE_LOG), this.addMessage("<font color='#3ADF00'>" + this.counter + ". " + a + "<font><br>", ConsolePanel.TYPE_LOG))
};
ConsolePanel.prototype.info = function(a) {
    this.mode === ConsolePanel.MODE_SIMPLE || this.stop || (a = this.checkMessage(a, ConsolePanel.TYPE_INFO), this.addMessage("<font color='white'>" + this.counter + ". " + a + "<font><br>", ConsolePanel.TYPE_INFO))
};
ConsolePanel.prototype.warn = function(a) {
    this.mode === ConsolePanel.MODE_SIMPLE || this.stop || (a = this.checkMessage(a, ConsolePanel.TYPE_WARN), this.addMessage("<font color='yellow'>" + this.counter + ". " + a + "<font><br>", ConsolePanel.TYPE_WARN))
};
ConsolePanel.prototype.error = function(a) {
    this.mode === ConsolePanel.MODE_SIMPLE || this.stop || (a = this.checkMessage(a, ConsolePanel.TYPE_ERROR), this.addMessage("<font color='#FF8000'>" + this.counter + ". " + a + "<font><br>", ConsolePanel.TYPE_ERROR))
};
ConsolePanel.prototype.fps = function(a) {
    $("#consoleFPS").html("FPS " + a)
};
ConsolePanel.prototype.checkMessage = function(a, b) {
    this.lastMsn.msn === a && this.lastMsn.type === b ? (this.lastMsnCounter++, this.counter--, this.lines.splice(this.lines.length - 1, 1), a = "[" + this.lastMsnCounter + "] " + a) : (this.lastMsnCounter = 1, this.lastMsn = {
        msn: a,
        type: b
    });
    return a
};
ConsolePanel.prototype.addMessage = function(a, b) {
    this.lines.push({
        msn: a,
        type: b
    });
    this.counter++;
    for (var c = this.lines.length, d = c - 1; d > c - this.showMaxLines - 1 && 0 < d; d--);
    this.filter()
};
ConsolePanel.prototype.filter = function(a) {
    a = "";
    for (var b = 0, c = this.lines.length - 1; 0 < c; c--)
        if (b < this.showMaxLines) this.type === ConsolePanel.TYPE_ALL ? (a += this.lines[c].msn, b++) : this.type === this.lines[c].type && (a += this.lines[c].msn, b++);
        else break;
    $("#consoleText").html(a)
};
ConsolePanel.prototype.addPressListener = function(a) {
    a = $("#" + a);
    var b = this;
    0 < a.length && a.bind("touchstart mousedown", function(a) {
        a.stopPropagation();
        a.preventDefault();
        b.onPress(this)
    })
};
ConsolePanel.TYPE_ALL = 0;
ConsolePanel.TYPE_LOG = 1;
ConsolePanel.TYPE_INFO = 2;
ConsolePanel.TYPE_WARN = 3;
ConsolePanel.TYPE_ERROR = 4;
ConsolePanel.MODE_SIMPLE = 1;
ConsolePanel.MODE_COMPLETE = 2;

function CollisionPoint(a, b, c, d) {
    this.position = new Vector2D(a, b);
    this.normal = new Vector2D(c, d)
}
CollisionPoint.prototype.toString = function() {
    return "\n[COLL] " + this.position + " " + this.normal
};

function SGraphics() {}
SGraphics.drawLine = function(a, b, c, d, e, f, g) {
    a.beginPath();
    a.strokeStyle = "undefined" === typeof f ? Common.COLOR_BLACK : f;
    a.lineWidth = "undefined" === typeof g ? 1 : g;
    a.moveTo(b, c);
    a.lineTo(d, e);
    a.stroke();
    a.closePath()
};
SGraphics.drawRectangle = function(a, b, c, d, e, f, g, h) {
    a.strokeStyle = "undefined" === typeof g ? Common.COLOR_BLUE : g;
    a.lineWidth = "undefined" === typeof f ? 1 : f;
    a.fillStyle = "undefined" === typeof h ? "rgba(0, 0, 0, 0)" : h;
    a.fillRect(b, c, d, e);
    a.strokeRect(b, c, d, e)
};
SGraphics.drawRect = function(a, b, c, d) {
    a.strokeStyle = "undefined" === typeof c ? Common.COLOR_BLUE : c;
    a.fillStyle = "undefined" === typeof d ? "rgba(0, 0, 0, 0)" : d;
    a.lineWidth = 1;
    a.fillRect(b.x, b.y, b.w, b.h);
    a.strokeRect(b.x, b.y, b.w, b.h)
};
SGraphics.drawCircle = function(a, b, c, d, e, f) {
    a.beginPath();
    a.lineWidth = 1;
    a.strokeStyle = "undefined" === typeof e ? Common.COLOR_BLUE : e;
    a.arc(b, c, d, 0, 2 * Math.PI, !0);
    a.stroke();
    a.fillStyle = "undefined" === typeof f ? "rgba(0, 0, 0, 0)" : f;
    a.fill();
    a.closePath()
};
SGraphics.drawArc = function(a, b, c, d, e, f, g, h) {
    a.beginPath();
    a.strokeStyle = "undefined" === typeof g ? Common.COLOR_BLUE : g;
    a.fillStyle = "undefined" === typeof h ? "rgba(0, 0, 0, 0)" : h;
    a.lineWidth = 1;
    a.arc(b, c, d, e, f, !0);
    a.closePath();
    a.stroke();
    a.fill()
};
SGraphics.drawCross = function(a, b, c, d, e, f) {
    a.beginPath();
    a.strokeStyle = "undefined" === typeof e ? Common.COLOR_GREEN : e;
    a.lineWidth = "undefined" === typeof f ? 1 : f;
    a.moveTo(b - d, c - d);
    a.lineTo(b + d, c + d);
    a.moveTo(b - d, c + d);
    a.lineTo(b + d, c - d);
    a.stroke();
    a.closePath()
};
SGraphics.drawArrow = function(a, b, c, d, e, f, g, h) {
    a.beginPath();
    a.strokeStyle = "undefined" === typeof f ? Common.COLOR_YELLOW : f;
    a.lineWidth = "undefined" === typeof h ? 1 : h;
    "undefined" === typeof g && (g = 5);
    a.moveTo(b, c);
    a.lineTo(d, e);
    b = new SVector3(d - b, e - c);
    b.normalize();
    a.lineTo(d - g * (b.x + b.y), e - g * (b.y - b.x));
    a.moveTo(d, e);
    a.lineTo(d - g * (b.x - b.y), e - g * (b.y + b.x));
    a.stroke();
    a.closePath()
};
SGraphics.drawPath = function(a, b, c, d) {
    var e = b.length;
    if (!(3 > e)) {
        a.beginPath();
        a.moveTo(b[0][0], b[0][1]);
        for (var f = 1; f < e - 2; ++f) a.quadraticCurveTo(b[f][0], b[f][1], (b[f][0] + b[f + 1][0]) / 2, (b[f][1] + b[f + 1][1]) / 2);
        a.quadraticCurveTo(b[f][0], b[f][1], b[f + 1][0], b[f + 1][1]);
        a.strokeStyle = "undefined" === typeof c ? Common.COLOR_RED : c;
        a.lineWidth = "undefined" === typeof d ? 1 : d;
        a.stroke();
        a.closePath()
    }
};
SGraphics.drawQuad = function(a, b, c, d, e, f, g) {
    a.strokeStyle = "undefined" === typeof f ? Common.COLOR_BLUE : f;
    a.lineWidth = "undefined" === typeof g ? 1 : g;
    a.strokeRect(b, c, d, e)
};

function TouchControl() {
    this.onActiveAction = null;
    this.m_currentTime = 0;
    this.m_lock = !1;
    this.m_lastId = this.m_counterTouch = 0;
    this.m_maxTouch = 2;
    this.m_timeReset = 400;
    this.playerTarget = null
}
TouchControl.prototype.update = function(a) {
    this.m_currentTime += a;
    this.m_currentTime > this.m_timeReset && (this.m_counterTouch = this.m_currentTime = 0)
};
TouchControl.prototype.sense = function(a) {
    if (!this.m_lock) {
        this.m_counterTouch++;
        this.m_lock = !0;
        this.m_currentTime = 0;
        if (this.m_counterTouch >= this.m_maxTouch)
            if (this.m_lastId == a) {
                if (this.onActiveAction && this.playerTarget) this.playerTarget[this.onActiveAction]();
                this.m_counterTouch = 0
            } else this.m_counterTouch = 1;
        this.m_lastId = a
    }
};
TouchControl.prototype.unlock = function() {
    this.m_lock = !1
};
TouchControl.prototype.reset = function() {
    this.m_counterTouch = this.m_currentTime = 0
};

function SInterval(a, b, c, d, e, f, g) {
    "undefined" === typeof d && (d = 1);
    "undefined" === typeof f && (f = !1);
    this.m_timeElapsed = 0;
    this.m_timeToTrigger = c;
    this.m_initLoops = this.m_loop = d;
    this.m_stopped = f;
    this.m_isOver = !1;
    this.m_caller = a;
    this.m_params = e;
    this.m_onEndCallback = b;
    this.m_onLoopCallback = g
}
SInterval.prototype.reset = function(a) {
    a = "undefined" === typeof a ? -1 : a;
    0 < a && (this.m_timeToTrigger = a);
    this.m_timeElapsed = 0;
    this.m_loop = this.m_initLoops;
    this.m_stopped = this.m_isOver = !1
};
SInterval.prototype.stop = function() {
    this.stopped = !0
};
SInterval.prototype.resume = function() {
    this.stopped = !1
};
SInterval.prototype.update = function(a) {
    if (!this.m_stopped && !this.m_isOver && (this.m_timeElapsed += a, this.m_timeElapsed >= this.m_timeToTrigger))
        if (this.m_timeElapsed = 0, this.m_loop -= 1, 0 >= this.m_loop) {
            if (this.m_isOver = !0, this.m_onEndCallback)
                if (this.m_params) this.m_caller[this.m_onEndCallback](this.m_params);
                else this.m_caller[this.m_onEndCallback]()
        } else if (this.m_onLoopCallback)
        if (this.m_params) this.m_caller[this.m_onLoopCallback](this.m_params);
        else this.m_caller[this.m_onLoopCallback]()
};
SInterval.prototype.free = function() {
    this.m_caller = null
};

function SPoint(a, b) {
    this.x = "undefined" === typeof a ? 0 : a;
    this.y = "undefined" === typeof b ? 0 : b
}
SPoint.prototype.distanceTo = function(a, b) {
    return Math.sqrt((a - this.x) * (a - this.x) + (b - this.y) * (b - this.y))
};

function SVector3(a, b, c) {
    this.x = "undefined" === typeof a ? 0 : a;
    this.y = "undefined" === typeof b ? 0 : b;
    this.z = "undefined" === typeof c ? 0 : c
}
SVector3.prototype.length = function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
};
SVector3.prototype.normalize = function() {
    var a = this.x * this.x + this.y * this.y + this.z * this.z;
    0 < a && (a = Math.sqrt(a), this.x /= a, this.y /= a, this.z /= a);
    return this
};
SVector3.prototype.product = function(a) {
    return new SVector3(this.y * a.z - this.z * a.y, -(this.x * a.z - this.z * a.x), this.y * a.x - this.x * a.y)
};

function Movement(a, b, c, d, e) {
    this.m_targetY = this.m_targetX = this.m_oldState = 0;
    this.m_isReversible = this.m_isLoop = !0;
    this.m_typeMovement = 0;
    this.m_isAwaitingDelete = !1;
    this.m_cycleCallback = this.m_endCallback = null;
    this.m_x = a;
    this.m_y = b;
    this.m_state = Movement.ST_INIT;
    this.m_typeMovement = Movement.TYPE_DEFAULT;
    this.m_isLoop = "undefined" === typeof d ? !1 : d;
    this.m_isReversible = "undefined" === typeof e ? !1 : e;
    this.m_speed = 0;
    this.setSpeed(c);
    this.targetActor = null
}
Movement.prototype.x = function() {
    return this.m_x
};
Movement.prototype.y = function() {
    return this.m_y
};
Movement.prototype.speed = function() {
    return this.m_speed
};
Movement.prototype.type = function() {
    return this.m_typeMovement
};
Movement.prototype.targetX = function() {
    return this.m_targetX
};
Movement.prototype.targetY = function() {
    return this.m_targetY
};
Movement.prototype.isAwaitingDelete = function() {
    return this.m_isAwaitingDelete
};
Movement.prototype.isPaused = function() {
    return this.m_state == Movement.ST_PAUSED
};
Movement.prototype.set_endCallback = function(a) {
    return this.m_endCallback = a
};
Movement.prototype.set_cycleCallback = function(a) {
    return this.m_cycleCallback = a
};
Movement.prototype.setSpeed = function(a) {
    a > Movement.MIN_SPEED ? this.m_speed = a : (Application.error("setSpeed: " + a), this.m_speed = Movement.DEFAULT_SPEED)
};
Movement.prototype.resetPosition = function(a, b) {
    return this.m_state != Movement.ST_MOVEMENT && this.m_state != Movement.ST_PAUSED ? (this.m_x = a, this.m_y = b, !0) : !1
};
Movement.prototype.setPause = function(a) {
    a ? this.m_state == Movement.ST_MOVEMENT && (this.m_oldState = this.m_state, this.m_state = Movement.ST_PAUSED) : this.m_state = this.m_oldState
};
Movement.prototype.cancelMotion = function() {
    this.m_state = Movement.ST_END
};
Movement.prototype.setAwaitingToDelete = function(a) {
    if (this.m_isAwaitingDelete = a) this.m_state = Movement.ST_INDEF
};
Movement.prototype.onEndMovement = function() {
    this.m_state = Movement.ST_END;
    if (this.targetActor && this.m_endCallback) this.targetActor[this.m_endCallback](this)
};
Movement.prototype.onCycleEnd = function() {
    if (this.targetActor && this.m_cycleCallback) this.targetActor[this.m_cycleCallback](this)
};
Movement.prototype.update = function(a) {};
Movement.prototype.free = function() {
    this.targetActor = this.m_cycleCallback = this.m_endCallback = null
};
Movement.TYPE_DEFAULT = 0;
Movement.TYPE_CIRCLE = 1;
Movement.TYPE_LINEAR = 2;
Movement.MIN_SPEED = 1E-5;
Movement.DEFAULT_SPEED = 1;
Movement.ST_INDEF = -1;
Movement.ST_INIT = 0;
Movement.ST_MOVEMENT = 1;
Movement.ST_PAUSED = 2;
Movement.ST_END = 3;

function LinearMovement(a, b, c, d, e) {
    this.m_endPointY = this.m_endPointX = this.m_initY = this.m_initX = this.m_vy = this.m_vx = this.m_angle = 0;
    this.m_toFront = !0;
    this.m_motionLimit = null;
    Movement.call(this, a, b, c, "undefined" === typeof d ? !1 : d, "undefined" === typeof e ? !1 : e);
    this.m_motionLimit = new Rectangle;
    this.m_typeMovement = Movement.TYPE_LINEAR;
    this.m_initX = this.m_x;
    this.m_initY = this.m_y
}
goog.inherits(LinearMovement, Movement);
LinearMovement.prototype.angle = function() {
    return this.m_angle
};
LinearMovement.prototype.getLinearVelocityX = function() {
    return this.m_vx
};
LinearMovement.prototype.getLinearVelocityY = function() {
    return this.m_vy
};
LinearMovement.prototype.resetPosition = function(a, b) {
    return LinearMovement.superClass_.resetPosition.call(this, a, b) ? (this.m_initX = a, this.m_initY = b, !0) : !1
};
LinearMovement.prototype.settingMotionLimit = function(a, b, c, d) {
    this.m_motionLimit.x = 0 <= c ? a : a + c;
    this.m_motionLimit.y = 0 <= d ? b : b + d;
    this.m_motionLimit.w = 0 <= c ? c : -c;
    this.m_motionLimit.h = 0 <= d ? d : -d
};
LinearMovement.prototype.gotoPosition = function(a, b, c) {
    c = "undefined" !== typeof c ? c : 0;
    this.m_endPointX = this.m_targetX = a;
    this.m_endPointY = this.m_targetY = b;
    a -= this.m_x;
    b -= this.m_y;
    if (0 == a && 0 == b) this.onEndMovement();
    else this.settingMotionLimit(this.m_x, this.m_y, a, b), 0 < c && (this.m_speed = c), c = Math.sqrt(a * a + b * b), this.m_vx = a / c * this.m_speed, this.m_vy = b / c * this.m_speed, this.m_angle = Math.atan2(b, a), this.m_state = Movement.ST_MOVEMENT
};
LinearMovement.prototype.gotoRadialPoint = function(a, b, c) {
    c = "undefined" !== typeof c ? c : 0;
    0 > a && (Application.error("gotoPosition2: dist " + a), a *= -1);
    if (0 == a) this.onEndMovement();
    else {
        this.m_angle = b;
        b = a * Math.cos(this.m_angle);
        var d = a * Math.sin(this.m_angle);
        this.settingMotionLimit(this.m_x, this.m_y, b, d);
        0 < c && (this.m_speed = c);
        this.m_vx = b / a * this.m_speed;
        this.m_vy = d / a * this.m_speed;
        this.m_endPointX = this.m_targetX = this.m_x + b;
        this.m_endPointY = this.m_targetY = this.m_y + d;
        this.m_state = Movement.ST_MOVEMENT
    }
};
LinearMovement.prototype.simulateUpdate = function(a) {
    var b = null;
    this.m_state == Movement.ST_MOVEMENT && (b = new Vector2D(this.m_vx * a, this.m_vy * a));
    return b
};
LinearMovement.prototype.update = function(a) {
    if (this.m_state == Movement.ST_MOVEMENT && (this.m_x += this.m_vx * a, this.m_y += this.m_vy * a, this.m_x < this.m_motionLimit.left() || this.m_x > this.m_motionLimit.right() || this.m_y < this.m_motionLimit.top() || this.m_y > this.m_motionLimit.bottom()))
        if (this.m_x = this.m_endPointX, this.m_y = this.m_endPointY, this.m_isLoop) this.m_isReversible ? (this.m_toFront ? (this.m_endPointX = this.m_initX, this.m_endPointY = this.m_initY) : (this.m_endPointX = this.m_targetX, this.m_endPointY = this.m_targetY),
            this.m_toFront = !this.m_toFront, this.m_vx *= -1, this.m_vy *= -1) : (this.m_x = this.m_initX, this.m_y = this.m_initY), this.onCycleEnd();
        else this.onEndMovement()
};
LinearMovement.prototype.free = function() {
    LinearMovement.superClass_.free.call(this);
    this.m_motionLimit = null
};

function CircularMovement(a, b, c, d, e) {
    Movement.call(this, a, b, c, "undefined" === typeof d ? !1 : d, "undefined" === typeof e ? !1 : e);
    this.m_currentRadiansDisplaced = this.m_radiansToDisplace = this.m_initRandians = 0;
    this.m_factorDirection = 1;
    this.m_angularSpeed = this.m_radio = this.m_centroidY = this.m_centroidX = this.m_oldY = this.m_oldX = 0;
    this.m_typeMovement = Movement.TYPE_CIRCLE;
    this.m_oldX = this.m_x;
    this.m_oldY = this.m_y
}
goog.inherits(CircularMovement, Movement);
CircularMovement.prototype.startMovement = function(a, b, c) {
    this.m_centroidX = a;
    this.m_centroidY = b;
    a = this.m_x - this.m_centroidX;
    b = -this.m_y + this.m_centroidY;
    this.m_radio = Math.sqrt(a * a + b * b);
    if (1 >= this.m_radio) Application.error("CircularMovement::startMovement() - Radio very small: " + this.m_radio), this.onEndMovement();
    else if (this.m_factorDirection = 0 > c ? -1 : 1, 0 == c) this.onEndMovement();
    else 0 > c && (c *= -1), this.m_initRandians = Math.atan2(b, a), this.m_radiansToDisplace = c / 180 * Math.PI, this.m_currentRadiansDisplaced =
        0, this.m_angularSpeed = this.m_radiansToDisplace / (c / 360 * Math.PI * this.m_radio * 2 / this.m_speed), c = this.m_initRandians + this.m_radiansToDisplace * this.m_factorDirection, this.m_targetX = this.m_centroidX + this.m_radio * Math.cos(c), this.m_targetY = this.m_centroidY - this.m_radio * Math.sin(c), this.m_state = Movement.ST_MOVEMENT
};
CircularMovement.prototype.startMovement2 = function(a, b, c) {
    this.m_radio = a;
    if (1 >= this.m_radio) Application.error("CircularMovement::startMovement2() - Radio very small: " + this.m_radio), this.onEndMovement();
    else if (this.m_factorDirection = 0 > c ? -1 : 1, 0 == c) this.onEndMovement();
    else 0 > c && (c *= -1), this.m_radiansToDisplace = c / 180 * Math.PI, this.m_angularSpeed = this.m_radiansToDisplace / (c / 360 * Math.PI * this.m_radio * 2 / this.m_speed), this.m_initRandians = b / 180 * Math.PI, this.m_currentRadiansDisplaced = 0, this.m_centroidX = this.m_x -
        this.m_radio * Math.cos(this.m_initRandians), this.m_centroidY = this.m_y + this.m_radio * Math.sin(this.m_initRandians), a = this.m_initRandians + this.m_radiansToDisplace * this.m_factorDirection, this.m_targetX = this.m_centroidX + this.m_radio * Math.cos(a), this.m_targetY = this.m_centroidY - this.m_radio * Math.sin(a), this.m_state = Movement.ST_MOVEMENT
};
CircularMovement.prototype.update = function(a) {
    if (this.m_state == Movement.ST_MOVEMENT && (this.m_currentRadiansDisplaced += this.m_angularSpeed * a, this.m_currentRadiansDisplaced > this.m_radiansToDisplace && (this.m_currentRadiansDisplaced = this.m_radiansToDisplace), a = this.m_initRandians + this.m_currentRadiansDisplaced * this.m_factorDirection, this.m_x = this.m_centroidX + this.m_radio * Math.cos(a), this.m_y = this.m_centroidY - this.m_radio * Math.sin(a), this.m_currentRadiansDisplaced == this.m_radiansToDisplace))
        if (this.m_isLoop) this.m_currentRadiansDisplaced =
            0, this.m_isReversible && (this.m_factorDirection *= -1, this.m_initRandians = a), this.onCycleEnd();
        else this.onEndMovement()
};

function MotionController(a, b, c) {
    this.m_currentMovement = this.m_movements = null;
    this.m_currentIndexMovement = 0;
    this.m_isReversible = this.m_isLoop = !1;
    this.m_advanceFactor = 1;
    this.m_motionData = null;
    this.m_speed = this.m_y = this.m_x = 0;
    this.m_endCallback = this.m_cycleCallback = null;
    this.m_x = a;
    this.m_y = b;
    this.m_speed = c.speed;
    this.m_motionData = c;
    this.m_isLoop = this.m_motionData.isLoop;
    this.m_isReversible = this.m_motionData.isReverse;
    this.m_movements = []
}
MotionController.prototype.startMotion = function(a, b) {
    this.m_cycleCallback = a;
    this.m_endCallback = b;
    this.createMovements();
    this.m_currentIndexMovement = -1;
    this.gotoNextMovement()
};
MotionController.CIRCLE_POLAR = "cp";
MotionController.CIRCLE_CARTESIAN = "cc";
MotionController.LINEAR_POLAR = "lp";
MotionController.LINEAR_CARTESIAN = "lc";
MotionController.RELATIVE_LINEAR_CARTESIAN = "rlc";
MotionController.prototype.x = function() {
    return this.m_x
};
MotionController.prototype.y = function() {
    return this.m_y
};
MotionController.prototype.createMovements = function() {
    for (var a = null, a = a = null, b = this.m_x, c = this.m_y, d = null, e = 0; e < this.m_motionData.motionParams.length;) d = this.m_motionData.motionParams[e], d[0] == MotionController.CIRCLE_POLAR ? (a = new CircularMovement(b, c, this.m_speed, this.m_isLoop, this.m_isReversible), a.startMovement2(parseFloat(d[1]), parseFloat(d[2]), parseFloat(d[3]))) : d[0] == MotionController.CIRCLE_CARTESIAN ? (a = new CircularMovement(b, c, this.m_speed, this.m_isLoop, this.m_isReversible), a.startMovement(parseFloat(d[1]),
        parseFloat(d[2]), parseFloat(d[3]))) : d[0] == MotionController.LINEAR_POLAR ? (a = new LinearMovement(b, c, this.m_speed, this.m_isLoop, this.m_isReversible), a.gotoRadialPoint(parseFloat(d[1]), parseFloat(d[2]))) : d[0] == MotionController.LINEAR_CARTESIAN ? (a = new LinearMovement(b, c, this.m_speed, this.m_isLoop, this.m_isReversible), a.gotoPosition(parseFloat(d[1]), parseFloat(d[2]))) : d[0] == MotionController.RELATIVE_LINEAR_CARTESIAN && (a = new LinearMovement(b, c, this.m_speed, this.m_isLoop, this.m_isReversible), a.gotoPosition(parseFloat(d[1]) +
        b, parseFloat(d[2]) + c)), a && (this.m_movements.push(a), a.setPause(!0), a.set_endCallback("onEndMovement"), a.set_cycleCallback("onCycleMovement"), a.targetActor = this, b = a.targetX(), c = a.targetY()), ++e
};
MotionController.prototype.gotoNextMovement = function() {
    this.m_currentIndexMovement += this.m_advanceFactor;
    0 <= this.m_currentIndexMovement && this.m_currentIndexMovement < this.m_movements.length ? (this.m_currentMovement = this.m_movements[this.m_currentIndexMovement], this.m_currentMovement.setPause(!1)) : this.m_isLoop && (this.m_isReversible ? this.m_advanceFactor *= -1 : this.m_currentIndexMovement = -1, this.gotoNextMovement())
};
MotionController.prototype.update = function(a) {
    this.m_currentMovement && (this.m_currentMovement.update(a), this.m_x = this.m_currentMovement.x(), this.m_y = this.m_currentMovement.y())
};
MotionController.prototype.onEndMovement = function() {
    if (!(this.m_currentIndexMovement < this.m_movements.length - 1) && this.m_endCallback) this[this.m_endCallback]()
};
MotionController.prototype.onCycleMovement = function(a) {
    if (this.m_currentMovement != a) Application.error("MotionController::onCycleMovement()");
    else if (a.setPause(!0), this.gotoNextMovement(), this.m_cycleCallback) this[this.m_cycleCallback]()
};
MotionController.prototype.free = function() {
    this.m_motionData.free();
    this.m_endCallback = this.m_cycleCallback = this.m_currentMovement = this.m_motionData = null;
    for (var a = this.m_movements.length - 1; 0 <= a;) this.m_movements[a].free(), this.m_movements[a] = null, --a;
    this.m_movements.splice(0, this.m_movements.length);
    this.m_movements = null
};

function PendularMovement(a, b, c, d, e, f, g) {
    this.m_alpha = this.m_angle = 0;
    this.m_x = c;
    this.m_y = d;
    this.m_dy = this.m_dx = this.m_len = 0;
    this.m_gravity = f;
    this.m_time = this.m_w = 0;
    this.m_pivotX = a;
    this.m_pivotY = b;
    this.m_longitudeMax = g;
    this.m_beta = e;
    this.m_velocity = 0;
    this.init()
}
PendularMovement.prototype.getX = function() {
    return this.m_x
};
PendularMovement.prototype.getY = function() {
    return this.m_y
};
PendularMovement.prototype.getAngle = function() {
    return this.m_angle
};
PendularMovement.prototype.getVelocity = function() {
    return this.m_velocity
};
PendularMovement.prototype.getMaxLongitude = function() {
    return this.m_longitudeMax
};
PendularMovement.prototype.init = function() {
    this.m_dx = this.m_x - this.m_pivotX;
    this.m_dy = this.m_y - this.m_pivotY;
    this.m_len = Math.sqrt(this.m_dx * this.m_dx + this.m_dy * this.m_dy);
    this.m_len < PendularMovement.LONGITUDE_MIN && (this.m_len = PendularMovement.LONGITUDE_MIN);
    this.m_angle = Math.atan2(this.m_dx, this.m_dy);
    this.m_alpha = this.m_beta;
    this.m_w = 2 * Math.PI / this.period();
    this.m_time = Math.acos(this.m_angle / this.m_alpha) / this.m_w * 180 / Math.PI
};
PendularMovement.prototype.update = function(a) {
    this.m_len += PendularMovement.INCREMENT_LONGITUDE;
    this.m_len > this.m_longitudeMax && (this.m_len = this.m_longitudeMax);
    this.m_w = 2 * Math.PI / this.period();
    this.m_angle = this.m_alpha * Math.cos(this.m_w * this.m_time * Math.PI / 180);
    this.m_velocity = -this.m_w * this.m_alpha * Math.sin(this.m_w * this.m_time * Math.PI / 180);
    this.m_x = this.m_len * Math.sin(this.m_angle) + this.m_pivotX;
    this.m_y = this.m_len * Math.cos(this.m_angle) + this.m_pivotY;
    this.m_time += PendularMovement.DT
};
PendularMovement.prototype.fastPow = function(a, b) {
    if (0 == b) return 1;
    if (0 == b % 2) {
        var c = this.fastPow(a, 0.5 * b);
        return c * c
    }
    return a * this.fastPow(a, b - 1)
};
PendularMovement.prototype.factorial = function(a) {
    for (var b = 1, c = 1; c <= a;) b *= c, c++;
    return b
};
PendularMovement.prototype.period = function() {
    for (var a = 0, b = 0; b <= PendularMovement.N;) a += this.fastPow(this.factorial(2 * b) / this.fastPow(this.fastPow(2, b) * this.factorial(b), 2), 2) * this.fastPow(Math.sin(this.m_alpha / 2), 2 * b), b++;
    return 2 * Math.PI * Math.sqrt(this.m_len / this.m_gravity) * a
};
PendularMovement.DT = 4;
PendularMovement.N = 30;
PendularMovement.LONGITUDE_MIN = 50;
PendularMovement.INCREMENT_LONGITUDE = 0.9;

function ParabolicMovement(a, b, c, d, e, f) {
    e = "undefined" === typeof e ? ParabolicMovement.STD_GRAVITY : e;
    f = "undefined" === typeof f ? ParabolicMovement.STD_SPEED : f;
    this.m_ry = this.m_rx = this.m_speed = this.m_vy = this.m_dy = this.m_vx = this.m_dx = this.m_finalTime = this.m_currentTime = this.m_gravity = this.m_finalY = this.m_finalX = this.m_initY = this.m_initX = 0;
    this.m_finish = !1;
    this.m_endCallback = null;
    this.m_currentTime = 0;
    this.m_finish = !1;
    this.m_speed = f;
    this.m_gravity = e;
    this.m_initX = a;
    this.m_initY = b;
    this.m_finalX = c;
    this.m_finalY =
        d;
    this.m_dx = this.m_finalX - this.m_initX;
    this.m_dy = this.m_finalY - this.m_initY;
    this.m_finalTime = ParabolicMovement.STD_FINAL_TIME;
    this.m_vx = this.m_dx / this.m_finalTime;
    this.m_vy = (this.m_dy - this.m_gravity * this.m_finalTime * this.m_finalTime / 2) / this.m_finalTime;
    this.m_rx = this.m_initX;
    this.m_ry = this.m_initY;
    this.target = null
}
ParabolicMovement.STD_GRAVITY = 0.05;
ParabolicMovement.STD_SPEED = 0.3;
ParabolicMovement.STD_FINAL_TIME = 100;
ParabolicMovement.prototype.free = function() {
    this.target = this.m_endCallback = null
};
ParabolicMovement.prototype.x = function() {
    return this.m_rx
};
ParabolicMovement.prototype.y = function() {
    return this.m_ry
};
ParabolicMovement.prototype.setEndCallback = function(a) {
    this.m_endCallback = a
};
ParabolicMovement.prototype.getEndCallback = function() {
    return this.m_endCallback
};
ParabolicMovement.prototype.update = function(a) {
    this.m_finish || (this.m_rx = Math.floor(this.m_initX + this.m_currentTime * this.m_vx), this.m_ry = Math.floor(this.m_initY + this.m_currentTime * this.m_vy + this.m_gravity * this.m_currentTime * this.m_currentTime / 2));
    if (this.m_currentTime >= this.m_finalTime) {
        if (this.m_currentTime = this.m_finalTime, this.m_finish = !0, this.m_rx = this.m_finalX, this.m_ry = this.m_finalY, this.m_endCallback) this.target[this.m_endCallback](this)
    } else this.m_currentTime += this.m_speed * a * 2
};

function GeometricUtils() {}
GeometricUtils.intersectLines = function(a, b, c, d) {
    var e = b.minus(a),
        f = b.minus(c),
        g = b.minus(d),
        f = e.product(f),
        e = e.product(g);
    if (0 == f || 0 == e || 0 < f * e) return null;
    g = Math.abs(GeometricUtils.triarea(a, b, c));
    f = Math.abs(GeometricUtils.triarea(a, b, d));
    e = (c.x * f + d.x * g) / (g + f);
    c = (c.y * f + d.y * g) / (g + f);
    return 0 > (a.x - e) * (e - b.x) || 0 > (a.y - c) * (c - b.y) ? null : new Vector2D(e, c)
};
GeometricUtils.intersectLinePolygon = function(a, b, c) {
    for (var d = [], e = 0; e < c.length; e++) {
        var f = GeometricUtils.intersectLines(a, b, c[e], c[(e + 1) % c.length]);
        f && d.push(f)
    }
    return d
};
GeometricUtils.intersectLinePolygon2 = function(a, b, c) {
    for (var d = [], e = [], f = 0; f < c.length; f++) {
        var g = GeometricUtils.intersectLines(a, b, c[f], c[(f + 1) % c.length]);
        g && (d.push(g), e.push(f))
    }
    return {
        points: d,
        index: e
    }
};
GeometricUtils.trap = function(a, b) {
    return 0.5 * (b.x - a.x) * (b.y + a.y)
};
GeometricUtils.triarea = function(a, b, c) {
    return GeometricUtils.trap(a, b) + GeometricUtils.trap(b, c) + GeometricUtils.trap(c, a)
};

function PathFinding(a) {
    this.m_listOpen = [];
    this.m_listClose = [];
    this.m_mapOpen = [];
    this.m_pathMap = a
}
PathFinding.ALLOW_DIAGONAL = !0;
PathFinding.ALLOW_DIAGONAL_CORNERING = !1;
PathFinding.prototype.getPath = function(a, b, c, d, e) {
    this.m_listOpen = [];
    this.m_listClose = [];
    this.m_mapOpen = [];
    return this.getPathPrivate(this.m_pathMap, a, b, c, d, e)
};
PathFinding.prototype.getPathPrivate = function(a, b, c, d, e, f) {
    var g = this.getSelectOpen(b, c);
    this.addOpenList(g);
    for (var h = a[0].length, k = a.length, l, m, n, p, v, w, x, r; 0 < this.m_listOpen.length && !this.isInCloseListById(d, e);) {
        n = g.i - 1;
        v = g.i + 2;
        w = g.j - 1;
        for (x = g.j + 2; n < v; n++)
            for (p = w; p < x; p++) n < k && -1 < n && p < h && -1 < p && !this.isInCloseListById(n, p) && (PathFinding.ALLOW_DIAGONAL || n === g.i || p === g.j) && (PathFinding.ALLOW_DIAGONAL_CORNERING || n === g.i || p === g.j || a[n][g.j] == f && a[g.i][p] === f) && a[n][p] === f && (m = this.isInOpenList(n, p),
                l = n == g.i || p == g.j ? 10 : 14, l = g.g + l, null === m ? (r = new clsNode(g, n, p), m = 10 * (Math.abs(n - d) + Math.abs(p - e)), r.g = l, r.h = m, r.f = l + m, this.addOpenList(r)) : l < m.g && (m.g = l, m.f = m.h + m.g, m.parent = g));
        this.removeOpenList(g);
        this.addCloseList(g);
        g = this.getSelectOpen(b, c)
    }
    a = null;
    if (this.isInCloseListById(d, e)) {
        a = [];
        d = null;
        for (d = this.m_listClose[this.m_listClose.length - 1]; null !== d;) a.push(d), d = d.parent;
        a = a.reverse()
    }
    return a
};
PathFinding.prototype.getSelectOpen = function(a, b) {
    var c = null,
        d = this.m_listOpen.length;
    if (0 < d)
        for (var c = this.m_listOpen[d - 1], e, f = 0; f < d; f++) e = this.m_listOpen[f], e.f < c.f && (c = e);
    else c = new clsNode(null, a, b);
    return c
};
PathFinding.prototype.isInCloseListById = function(a, b) {
    return "undefined" !== typeof this.m_mapOpen[a] && null !== this.m_mapOpen[a] && "undefined" !== typeof this.m_mapOpen[a][b] && null !== this.m_mapOpen[a][b] ? this.m_mapOpen[a][b].isClose : !1
};
PathFinding.prototype.isInCloseList = function(a) {
    return a.isClose
};
PathFinding.prototype.addCloseList = function(a) {
    a.isClose = !0;
    this.m_listClose.push(a)
};
PathFinding.prototype.isInOpenList = function(a, b) {
    return "undefined" !== typeof this.m_mapOpen[a] && null !== this.m_mapOpen[a] && "undefined" !== typeof this.m_mapOpen[a][b] && null !== this.m_mapOpen[a][b] ? this.m_mapOpen[a][b] : null
};
PathFinding.prototype.removeOpenList = function(a) {
    var b = this.m_listOpen.indexOf(a); - 1 < b && this.m_listOpen.splice(b, 1);
    a.isOpen = !1
};
PathFinding.prototype.addOpenList = function(a) {
    a.isOpen = !0;
    this.m_listOpen.push(a);
    this.m_mapOpen[a.i] || (this.m_mapOpen[a.i] = []);
    this.m_mapOpen[a.i][a.j] = a
};

function clsNode(a, b, c) {
    this.f = this.h = this.g = 0;
    this.i = b;
    this.j = c;
    this.isClose = this.isOpen = !1;
    this.parent = a
}

function BaseControl(a, b, c, d, e) {
    this.m_canvas = a;
    this.x = b;
    this.y = c;
    this.m_clip = Application.instance.getClip(d);
    this.m_clip.setX(b);
    this.m_clip.setY(c);
    this.parent = a;
    this.parent.addChild(this.m_clip.sprite);
    this.m_clip.parent = this.parent;
    this.name = e;
    this.id = -1;
    this.target = null;
    this.m_eventsEnabled = !0;
    this.m_isSelected = !1;
    this.m_isVisible = !0;
    this.m_state = -1
}
BaseControl.prototype.setSelected = function(a) {
    this.m_isSelected = a
};
BaseControl.prototype.isSelected = function() {
    return this.m_isSelected
};
BaseControl.prototype.setEventsEnabled = function(a) {
    this.m_eventsEnabled = a
};
BaseControl.prototype.isEventsEnabled = function() {
    return this.m_eventsEnabled
};
BaseControl.prototype.setVisible = function(a) {
    this.m_isVisible !== a && (this.m_isVisible = a, this.m_clip.setVisible(this.m_isVisible))
};
BaseControl.prototype.isVisible = function() {
    return this.m_isVisible
};
BaseControl.prototype.update = function(a) {};
BaseControl.STATE_NORMAL = 1;
BaseControl.STATE_OVER = 2;
BaseControl.STATE_DOWN = 3;
BaseControl.STATE_DISABLED = 4;
BaseControl.STATE_SELECTED = 5;

function Button(a, b, c, d, e) {
    BaseControl.call(this, a, b, c, d, e);
    this.moveCallback = this.downCallback = this.upCallback = null;
    ControlTouch.instance.buttons.push(this)
}
goog.inherits(Button, BaseControl);
Button.prototype.free = function() {
    this.parent.removeChild(this.m_clip.sprite);
    this.m_clip.free();
    this.parent = this.m_clip = null;
    ControlTouch.instance.buttons.splice(ControlTouch.instance.buttons.indexOf(this), 1)
};
Button.prototype.setDownCallback = function(a, b) {
    this.target = a;
    this.downCallback = b
};
Button.prototype.setUpCallback = function(a, b) {
    this.target = a;
    this.upCallback = b
};
Button.prototype.onTouchStart = function(a) {
    if (-1 == this.id) {
        for (var b = 0; b < ControlTouch.instance.touches.length; b++)
            if (ControlTouch.instance.touches[b].identifier == a.identifier) return !1;
        if (this.m_clip.getBounds().intersectPoint(a.x - this.m_clip.x, a.y - this.m_clip.y)) return this.id = a.identifier, this.target[this.downCallback](this.name), ControlTouch.instance.touches.push(a), !0
    }
    return !1
};
Button.prototype.onTouchMove = function(a) {
    return !1
};
Button.prototype.onTouchEnd = function(a) {
    return this.id == a.identifier ? (this.id = -1, this.target[this.upCallback](this.name), ControlTouch.instance.touches.splice(ControlTouch.instance.touches.indexOf(a), 1), !0) : !1
};
Button.prototype.onMouseDown = function(a) {
    return this.m_clip.getBounds().intersectPoint(a.offsetX - this.m_clip.x, a.offsetY - this.m_clip.y) ? (this.id = -1, this.target[this.downCallback](this.name), !0) : !1
};
Button.prototype.onMouseMove = function(a) {
    return this.m_clip.getBounds().intersectPoint(a.offsetX - this.m_clip.x, a.offsetY - this.m_clip.y) ? (this.id = -1, !0) : !1
};
Button.prototype.onMouseUp = function(a) {
    return this.m_clip.getBounds().intersectPoint(a.offsetX - this.m_clip.x, a.offsetY - this.m_clip.y) ? (this.id = -1, !0) : !1
};

function DraggableControl(a, b, c, d, e) {
    BaseControl.call(this, a, b, c, d, e);
    this.offsetY = this.offsetX = 0;
    ControlTouch.instance.draggableObjects.push(this)
}
goog.inherits(DraggableControl, BaseControl);
DraggableControl.prototype.free = function() {
    this.parent.removeChild(this.m_clip.sprite);
    this.m_clip.free();
    this.parent = this.m_clip = null;
    ControlTouch.instance.draggableObjects.splice(ControlTouch.instance.draggableObjects.indexOf(this), 1)
};
DraggableControl.prototype.onTouchStart = function(a) {
    if (-1 == this.id) {
        for (var b = 0; b < ControlTouch.instance.touches.length; b++)
            if (ControlTouch.instance.touches[b].identifier == a.identifier) return !1;
        if (this.m_clip.getBounds().intersectPoint(a.x - this.m_clip.x, a.y - this.m_clip.y)) return this.id = a.identifier, ControlTouch.instance.touches.push(a), this.offsetX = this.m_clip.x - a.x, this.offsetY = this.m_clip.y - a.y, !0
    }
    return !1
};
DraggableControl.prototype.onTouchMove = function(a) {
    this.id == a.identifier && (this.m_clip.setX(this.offsetX + a.x), this.m_clip.setY(this.offsetY + a.y))
};
DraggableControl.prototype.onTouchEnd = function(a) {
    return this.id == a.identifier && this.m_clip.getBounds().intersectPoint(a.x - this.m_clip.x, a.y - this.m_clip.y) ? (this.id = -1, ControlTouch.instance.touches.splice(ControlTouch.instance.touches.indexOf(a), 1), !0) : !1
};
DraggableControl.prototype.onMouseMove = function(a) {
    this.m_isSelected && (this.m_clip.setX(this.offsetX + a.offsetX), this.m_clip.setY(this.offsetY + a.offsetY))
};
DraggableControl.prototype.onMouseUp = function(a) {
    return this.m_clip.getBounds().intersectPoint(a.offsetX - this.m_clip.x, a.offsetY - this.m_clip.y) ? (this.setSelected(!1), !0) : !1
};
DraggableControl.prototype.onMouseDown = function(a) {
    return this.m_clip.getBounds().intersectPoint(a.offsetX - this.m_clip.x, a.offsetY - this.m_clip.y) ? (this.offsetX = this.m_clip.x - a.offsetX, this.offsetY = this.m_clip.y - a.offsetY, this.setSelected(!0), !0) : !1
};
DraggableControl.prototype.update = function(a) {};

function SwipeControl(a, b, c) {
    this.id = -1;
    this.m_actionZone = null;
    this.target = a;
    this.callback = b;
    this.m_actionZone = "undefined" !== typeof c && c ? new Rectangle(0, 0, 750, 500) : this.target.clip().getBounds();
    ControlTouch.instance.swipeObjects.push(this)
}
SwipeControl.prototype.onTouchStart = function(a) {
    if (-1 == this.id) {
        for (var b = 0; b < ControlTouch.instance.touches.length; b++)
            if (ControlTouch.instance.touches[b].identifier == a.identifier) return !1;
        if (this.m_actionZone.intersectPoint(a.x - this.m_actionZone.x, a.y - this.m_actionZone.y)) return this.id = a.identifier, this.delta = Date.now(), this.m_initX = a.x, this.m_initY = a.y, ControlTouch.instance.touches.push(a), !0
    }
    return !1
};
SwipeControl.prototype.onTouchEnd = function(a) {
    if (this.id == a.identifier) {
        this.id = -1;
        this.delta = Date.now() - this.delta;
        if (200 > this.delta) {
            var b = a.x - this.m_initX,
                c = a.y - this.m_initY,
                d = Math.atan2(c, b),
                d = 180 * d / Math.PI;
            10 < b * b + c * c && (0 < d && 22.5 >= d ? this.swipe(SwipeControl.RIGHT) : 22.5 < d && 67.5 >= d ? this.swipe(SwipeControl.RIGHT | SwipeControl.DOWN) : 67.5 < d && 112.5 >= d ? this.swipe(SwipeControl.DOWN) : 112.5 < d && 157.5 >= d ? this.swipe(SwipeControl.LEFT | SwipeControl.DOWN) : 157.5 < d && 180 >= d ? this.swipe(SwipeControl.LEFT) : -180 < d && -157.5 >=
                d ? this.swipe(SwipeControl.LEFT) : -157.5 < d && -112.5 >= d ? this.swipe(SwipeControl.LEFT | SwipeControl.UP) : -112.5 < d && -67.5 >= d ? this.swipe(SwipeControl.UP) : -67.5 < d && -22.5 >= d ? this.swipe(SwipeControl.RIGHT | SwipeControl.UP) : -22.5 < d && 0 >= d && this.swipe(SwipeControl.RIGHT))
        }
        ControlTouch.instance.touches.splice(ControlTouch.instance.touches.indexOf(a), 1);
        this.delta = this.m_initY = this.m_initX = 0
    }
};
SwipeControl.prototype.onMouseUp = function(a) {
    this.delta = Date.now() - this.delta;
    if (200 > this.delta) {
        var b = a.offsetX - this.m_initX;
        a = a.offsetY - this.m_initY;
        var c = Math.atan2(a, b),
            c = 180 * c / Math.PI;
        10 < b * b + a * a && (0 < c && 22.5 >= c ? this.swipe(SwipeControl.RIGHT) : 22.5 < c && 67.5 >= c ? this.swipe(SwipeControl.RIGHT | SwipeControl.DOWN) : 67.5 < c && 112.5 >= c ? this.swipe(SwipeControl.DOWN) : 112.5 < c && 157.5 >= c ? this.swipe(SwipeControl.LEFT | SwipeControl.DOWN) : 157.5 < c && 180 >= c ? this.swipe(SwipeControl.LEFT) : -180 < c && -157.5 >= c ? this.swipe(SwipeControl.LEFT) : -157.5 < c && -112.5 >= c ? this.swipe(SwipeControl.LEFT | SwipeControl.UP) : -112.5 < c && -67.5 >= c ? this.swipe(SwipeControl.UP) : -67.5 < c && -22.5 >= c ? this.swipe(SwipeControl.RIGHT | SwipeControl.UP) : -22.5 < c && 0 >= c && this.swipe(SwipeControl.RIGHT))
    }
    this.delta = this.m_initY = this.m_initX = 0
};
SwipeControl.LEFT = 1;
SwipeControl.RIGHT = 16;
SwipeControl.UP = 256;
SwipeControl.DOWN = 4096;
SwipeControl.prototype.swipe = function(a) {
    Application.log(a);
    this.target[this.callback](a)
};
SwipeControl.prototype.update = function(a) {
    this.target.update(a)
};
SwipeControl.prototype.onMouseDown = function(a) {
    return this.m_actionZone.intersectPoint(a.offsetX - this.m_actionZone.x, a.offsetY - this.m_actionZone.y) ? (this.delta = Date.now(), this.m_initX = a.offsetX, this.m_initY = a.offsetY, !0) : !1
};
SwipeControl.prototype.free = function() {
    this.m_actionZone = null;
    ControlTouch.instance.swipeObjects.splice(ControlTouch.instance.swipeObjects.indexOf(this), 1)
};

function SDeferred() {
    this._succ = this._fail = this._next = this._id = null;
    this._tail = this
}
SDeferred.prototype.next = function(a) {
    var b = new SDeferred;
    b._succ = a;
    return this._add(b)
};
SDeferred.prototype.error = function(a) {
    var b = new SDeferred;
    b._fail = a;
    return this._add(b)
};
SDeferred.prototype._add = function(a) {
    this._tail = this._tail._next = a;
    return this
};
SDeferred.prototype.call = function(a) {
    for (var b, c = this; c && !c._succ;) c = c._next;
    if (c instanceof SDeferred) {
        try {
            b = c._succ(a)
        } catch (d) {
            return c.fail(d)
        }
        b instanceof SDeferred ? SDeferred._insert(c, b) : c._next instanceof SDeferred && c._next.call(b)
    }
};
SDeferred.prototype.fail = function(a) {
    for (var b, c, d = this; d && !d._fail;) d = d._next;
    try {
        if (d instanceof SDeferred) b = d._fail(a), d.call(b);
        else {
            if (a instanceof Error) throw a;
            c = Error("failed in Deferred:" + a);
            c.arg = a;
            throw c;
        }
    } catch (e) {
        Application.error("SDeferred.load: " + e)
    }
};
SDeferred._insert = function(a, b) {
    a._next instanceof SDeferred && (b._next = a._next);
    a._next = b
};
SDeferred.next = function(a) {
    var b = (new SDeferred).next(a);
    b._id = setTimeout(function() {
        b.call(null)
    }, 0);
    return b
};
SDeferred.parallel = function(a) {
    var b = new SDeferred;
    b._id = setTimeout(function() {
        b.call(null)
    }, 0);
    var c = 0,
        d = a instanceof Array ? [] : {}, e = new SDeferred,
        f;
    for (f in a) a.hasOwnProperty(f) && (c++, function(a, b) {
        a.next(function(a) {
            c--;
            d[b] = a;
            0 >= c && e.call(d)
        }).error(function(a) {
            e.fail(a)
        });
        "number" === typeof a._id && clearTimeout(a._id);
        a._id = setTimeout(function() {
            a.call()
        }, 0)
    }(a[f], f));
    c || (e._id = setTimeout(function() {
        e.call(d)
    }, 0));
    return b.next(function() {
        return e
    })
};

function SEvent(a) {
    this.type = a;
    this.target = null;
    this.localY = this.localX = this.y = this.x = 0
}
SEvent.prototype._initPosition = function(a, b) {
    this.x = this.localX = a;
    this.y = this.localY = b
};
SEvent.LOAD = "load";
SEvent.ERROR = "error";
SEvent.CORE_RESIZE = "coreresize";
SEvent.ENTER_FRAME = "enterframe";
SEvent.EXIT_FRAME = "exitframe";
SEvent.ENTER = "enter";
SEvent.EXIT = "exit";
SEvent.CHILD_ADDED = "childadded";
SEvent.ADDED = "added";
SEvent.ADDED_TO_SCENE = "addedtoscene";
SEvent.CHILD_REMOVED = "childremoved";
SEvent.REMOVED = "removed";
SEvent.REMOVED_FROM_SCENE = "removedfromscene";
SEvent.TOUCH_START = "touchstart";
SEvent.TOUCH_MOVE = "touchmove";
SEvent.TOUCH_END = "touchend";
SEvent.RENDER = "render";

function SMatrix() {
    this.stack = [];
    this.reset()
}
SMatrix.prototype.reset = function() {
    this.stack = [];
    this.stack.push([1, 0, 0, 1, 0, 0])
};
SMatrix.prototype.makeTransformMatrix = function(a, b) {
    var c = a._x,
        d = a._y,
        e = a._width || 0,
        f = a._height || 0,
        g = "number" === typeof a._scaleX ? a._scaleX : 1,
        h = "number" === typeof a._scaleY ? a._scaleY : 1,
        k = (a._rotation || 0) * Math.PI / 180,
        l = Math.cos(k),
        k = Math.sin(k),
        e = "number" === typeof a.originX ? a.originX : 0.5 * e,
        f = "number" === typeof a.originY ? a.originY : 0.5 * f,
        m = g * l,
        g = g * k,
        k = h * k,
        h = h * l;
    b[0] = m;
    b[1] = g;
    b[2] = -k;
    b[3] = h;
    b[4] = -m * e + k * f + c + e;
    b[5] = -g * e - h * f + d + f
};
SMatrix.prototype.multiply = function(a, b, c) {
    var d = a[0],
        e = a[2],
        f = a[4],
        g = a[1],
        h = a[3];
    a = a[5];
    var k = b[0],
        l = b[2],
        m = b[4],
        n = b[1],
        p = b[3];
    b = b[5];
    c[0] = d * k + e * n;
    c[1] = g * k + h * n;
    c[2] = d * l + e * p;
    c[3] = g * l + h * p;
    c[4] = d * m + e * b + f;
    c[5] = g * m + h * b + a
};
SMatrix.prototype.multiplyVec = function(a, b, c) {
    var d = b[0];
    b = b[1];
    var e = a[1],
        f = a[3],
        g = a[5];
    c[0] = a[0] * d + a[2] * b + a[4];
    c[1] = e * d + f * b + g
};

function SCanvasRenderer(a) {
    this.platform = a
}
SCanvasRenderer.prototype.render = function(a, b, c) {
    var d, e;
    a.save();
    b.dispatchEvent(c);
    this.transform(a, b);
    if ("undefined" === typeof b.visible || b.visible) {
        d = b._width;
        e = b._height;
        b.compositeOperation && (a.globalCompositeOperation = b.compositeOperation);
        a.globalAlpha = "number" === typeof b.opacity ? b.opacity : 1;
        b._backgroundColor && (a.fillStyle = b._backgroundColor, a.fillRect(0, 0, d, e));
        b.cvsRender && (b.cvsRender(a), b.onDraw(a));
        SCore.instance._debug && b.debugColor && (a.strokeStyle = b.debugColor, a.strokeRect(0, 0, d, e));
        b._clipping && (a.beginPath(), a.rect(0, 0, d, e), a.clip());
        if (!0 == b._sorted && b.childNodes)
            for (d = 0; d < b.childNodes.length - 1; d++)
                if ("undefined" !== typeof b.childNodes[d]._depth) {
                    do
                        for (e = !1, d = 0; d < b.childNodes.length - 1; d++) b.childNodes[d]._depth > b.childNodes[d + 1]._depth && (e = b.childNodes[d], b.childNodes[d] = b.childNodes[d + 1], b.childNodes[d + 1] = e, e = !0); while (e)
                }
        if (b.childNodes) {
            d = 0;
            for (var f = b.childNodes.length; d < f; d++) e = b.childNodes[d], this.render(a, e, c)
        }
    }
    a.restore();
    this.platform.matrix.stack.pop()
};
SCanvasRenderer.prototype.detectRender = function(a, b) {
    var c, d;
    if ("undefined" === typeof b.visible || b.visible) {
        c = b._width;
        d = b._height;
        a.save();
        this.transform(a, b);
        a.fillStyle = b._cvsCache.detectColor;
        b._touchEnabled && (b.detectRender ? b.detectRender(a) : a.fillRect(0, 0, c, d));
        b._clipping && (a.beginPath(), a.rect(0, 0, c, d), a.clip());
        if (b.childNodes) {
            d = 0;
            for (var e = b.childNodes.length; d < e; d++) c = b.childNodes[d], this.detectRender(a, c)
        }
        a.restore();
        this.platform.matrix.stack.pop()
    }
};
SCanvasRenderer.prototype.transform = function(a, b) {
    var c = this.platform.matrix,
        d = c.stack,
        e, f, g, h;
    b.getDirty() ? (c.makeTransformMatrix(b, b._cvsCache.matrix), e = [], c.multiply(d[d.length - 1], b._cvsCache.matrix, e), b._matrix = e, f = "number" === typeof b.originX ? b.originX : 0.5 * b._width || 0, g = "number" === typeof b.originY ? b.originY : 0.5 * b._height || 0, h = [f, g], c.multiplyVec(e, h, h), b._offsetX = h[0] - f, b._offsetY = h[1] - g, b.setDirty(!1)) : e = b._matrix;
    d.push(e);
    a.setTransform.apply(a, e)
};

function SEventTarget() {
    this._listeners = {}
}
SEventTarget.prototype.addEventListener = function(a, b) {
    var c = this._listeners[a];
    null == c ? this._listeners[a] = [b] : -1 === c.indexOf(b) && c.unshift(b)
};
SEventTarget.prototype.on = function() {
    this.addEventListener.apply(this, arguments)
};
SEventTarget.prototype.removeEventListener = function(a, b) {
    var c = this._listeners[a];
    if (null != c) {
        var d = c.indexOf(b); - 1 !== d && c.splice(d, 1)
    }
};
SEventTarget.prototype.clearEventListener = function(a) {
    null != a ? delete this._listeners[a] : this._listeners = {}
};
SEventTarget.prototype.dispatchEvent = function(a) {
    a.target = this;
    a.localX = a.x - this._offsetX;
    a.localY = a.y - this._offsetY;
    if (null != this["on" + a.type]) this["on" + a.type](a);
    var b = this._listeners[a.type];
    if (null != b)
        for (var b = b.slice(), c = 0, d = b.length; c < d; c++) b[c].call(this, a)
};

function SSurface(a, b, c) {
    SEventTarget.call(this);
    var d = SCore.instance;
    this.width = a;
    this.height = b;
    this._element = this._css = this.context = null;
    c && (c = "platform-surface" + d._surfaceID++, document.getCSSCanvasContext ? (this.context = document.getCSSCanvasContext("2d", c, this.width, this.height), this._element = this.context.canvas, this._css = "-webkit-canvas(" + c + ")") : document.mozSetImageElement ? (this._element = document.createElement("canvas"), this._element.width = a, this._element.height = b, this._css = "-moz-element(#" + c +
        ")", this.context = this._element.getContext("2d"), document.mozSetImageElement(c, this._element)) : (this._element = document.createElement("canvas"), this._element.width = a, this._element.height = b, this._element.style.position = "absolute", this.context = this._element.getContext("2d"), SEngine.ENV.CANVAS_DRAWING_METHODS.forEach(function(a) {
        var b = this.context[a];
        this.context[a] = function() {
            b.apply(this, arguments);
            this.setDirty(!0)
        }
    }, this)))
}
goog.inherits(SSurface, SEventTarget);
SSurface.prototype.getPixel = function(a, b) {
    return this.context.getImageData(a, b, 1, 1).data
};
SSurface.prototype.setPixel = function(a, b, c, d, e, f) {
    var g = this.context.createImageData(1, 1);
    g.data[0] = c;
    g.data[1] = d;
    g.data[2] = e;
    g.data[3] = f;
    this.context.putImageData(g, a, b)
};
SSurface.prototype.clear = function() {
    this.context.clearRect(0, 0, this.width, this.height)
};
SSurface.prototype.draw = function(a) {
    a = a._element;
    if (1 === arguments.length) this.context.drawImage(a, 0, 0);
    else {
        var b = arguments;
        b[0] = a;
        this.context.drawImage.apply(this.context, b)
    }
};
SSurface.prototype.clone = function() {
    var a = new SSurface(this.width, this.height, !0);
    a.draw(this);
    return a
};
SSurface.prototype.toDataURL = function() {
    var a = this._element.src;
    return a ? "data:" === a.slice(0, 5) ? a : this.clone().toDataURL() : this._element.toDataURL()
};
SSurface.load = function(a, b, c) {
    var d = new Image,
        e = new SSurface(0, 0, !1);
    e._css = "url(" + a + ")";
    e._element = d;
    c = c || function() {};
    e.addEventListener("load", b);
    e.addEventListener("error", c);
    d.onerror = function() {
        var a = new SEvent(SEvent.ERROR);
        a.message = "Cannot load an asset: " + d.src;
        SCore.instance.dispatchEvent(a);
        e.dispatchEvent(a)
    };
    d.onload = function() {
        e.width = d.width;
        e.height = d.height;
        e.dispatchEvent(new SEvent(SEvent.LOAD))
    };
    d.src = a;
    return e
};
SSurface._staticCanvas2DContext = document.createElement("canvas").getContext("2d");
SSurface._getPattern = function(a, b) {
    if (!a._pattern || b) a._pattern = SSurface._staticCanvas2DContext.createPattern(a._element, "repeat");
    return a._pattern
};

function SCore(a, b) {
    if (null === window.document.body) throw Error("document.body is null. Please excute 'new Core()' in window.onload.");
    SEventTarget.call(this);
    SCore.instance = this;
    this.width = a;
    this.height = b;
    this.scale = 1;
    this._surfaceID = this._mousedownID = this._pageY = this._pageX = 0;
    this._scenes = [];
    this._element = document.createElement("div");
    this._element.id = "platform-stage";
    this._element.style.position = "absolute";
    document.body.firstChild ? document.body.insertBefore(this._element, $("#MainInterface")[0]) :
        document.body.appendChild(this._element);
    this._element.style.fontSize = "12px";
    this._element.style.webkitTextSizeAdjust = "none";
    this.addEventListener("coreresize", this._oncoreresize);
    this._dispatchCoreResizeEvent();
    this.fps = 30;
    this.frame = 0;
    this.running = this.ready = !1;
    this.assets = {};
    this.currentScene = null;
    this.rootScene = new SScene;
    this.pushScene(this.rootScene);
    this._offsetY = this._offsetX = 0;
    this.input = {};
    this._keybind = {};
    this.pressedKeysNum = 0;
    this._internalButtondownListeners = {};
    this._internalButtonupListeners = {};
    this._touchEventTarget = {};
    var c;
    document.addEventListener("keydown", function(a) {
        var b = SCore.instance;
        b.dispatchEvent(new SEvent("keydown")); - 1 !== SEngine.ENV.PREVENT_DEFAULT_KEY_CODES.indexOf(a.keyCode) && (a.preventDefault(), a.stopPropagation());
        b.running && (a = b._keybind[a.keyCode]) && (c = new SEvent(a + "buttondown"), b.dispatchEvent(c))
    }, !0);
    document.addEventListener("keyup", function(a) {
        var b = SCore.instance;
        b.running && (a = b._keybind[a.keyCode]) && (c = new SEvent(a + "buttonup"), b.dispatchEvent(c))
    }, !0)
}
goog.inherits(SCore, SEventTarget);
SCore.prototype._dispatchCoreResizeEvent = function() {
    var a = new SEvent("coreresize");
    a.width = this.width;
    a.height = this.height;
    a.scale = this.scale;
    this.dispatchEvent(a)
};
SCore.prototype._oncoreresize = function(a) {
    this._element.style.width = Math.floor(this.width * this.scale) + "px";
    this._element.style.height = Math.floor(this.height * this.scale) + "px";
    for (var b, c = 0, d = this._scenes.length; c < d; c++) b = this._scenes[c], b.dispatchEvent(a)
};
SCore.prototype.load = function(a, b, c, d) {
    var e, f;
    "string" === typeof arguments[1] ? (e = c, f = 1) : (e = a, f = 0);
    b = arguments[1 + f] || function() {};
    d = arguments[2 + f] || function() {};
    var g = SCore.findExt(a);
    return SDeferred.next(function() {
        var c = SCore.instance,
            f = new SDeferred,
            l = function(a) {
                f.call(a);
                b.call(this, a)
            }, m = function(a) {
                f.fail(a);
                d.call(this, a)
            };
        if (SCore._loadFuncs[g]) c.assets[e] = SCore._loadFuncs[g](a, g, l, m);
        else {
            var n = new XMLHttpRequest;
            n.open("GET", a, !0);
            n.onreadystatechange = function() {
                if (4 === n.readyState) {
                    if (200 !==
                        n.status && 0 !== n.status) {
                        var b = new SEvent("error");
                        b.message = n.status + ": Cannot load an asset: " + a;
                        m.call(c, b)
                    }(n.getResponseHeader("Content-Type") || "").match(/^image/) ? c.assets[e] = SSurface.load(a, l, m) : (c.assets[e] = n.responseText, l.call(c, new SEvent("load")))
                }
            };
            n.send(null)
        }
        return f
    })
};
SCore.prototype.start = function() {
    this.frame = 0;
    this.ready = this.running = !0;
    this.dispatchEvent(new SEvent(SEvent.LOAD))
};
SCore.prototype.debug = function() {
    this._debug = !0;
    return this.start()
};
SCore.prototype._tick = function() {
    this.dispatchEvent(new SEvent(SEvent.EXIT_FRAME));
    this.frame++
};
SCore.prototype.stop = function() {
    this.running = this.ready = !1
};
SCore.prototype.pause = function() {
    this.ready = !1
};
SCore.prototype.resume = function() {
    this.ready || (this.running = this.ready = !0)
};
SCore.prototype.pushScene = function(a) {
    this._element.appendChild(a._element);
    this.currentScene && this.currentScene.dispatchEvent(new SEvent(SEvent.EXIT));
    this.currentScene = a;
    this.currentScene.dispatchEvent(new SEvent(SEvent.ENTER));
    return this._scenes.push(a)
};
SCore.prototype.popScene = function() {
    if (this.currentScene === this.rootScene) return this.currentScene;
    this._element.removeChild(this.currentScene._element);
    this.currentScene.dispatchEvent(new SEvent(SEvent.EXIT));
    this.currentScene = this._scenes[this._scenes.length - 2];
    this.currentScene.dispatchEvent(new SEvent(SEvent.ENTER));
    return this._scenes.pop()
};
SCore.prototype.replaceScene = function(a) {
    this.popScene();
    return this.pushScene(a)
};
SCore.prototype.removeScene = function(a) {
    if (this.currentScene === a) return this.popScene();
    var b = this._scenes.indexOf(a);
    return -1 !== b ? (this._scenes.splice(b, 1), this._element.removeChild(a._element), a) : null
};
SCore.prototype.keybind = function(a, b) {
    this._keybind[a] = b;
    var c = function(a) {
        var c;
        this.input[b] || (this.input[b] = !0, c = new SEvent(this.pressedKeysNum++ ? "inputchange" : "inputstart"), this.dispatchEvent(c), this.currentScene.dispatchEvent(c));
        this.currentScene.dispatchEvent(a)
    }, d = function(a) {
            var c;
            this.input[b] && (this.input[b] = !1, c = new SEvent(--this.pressedKeysNum ? "inputchange" : "inputend"), this.dispatchEvent(c), this.currentScene.dispatchEvent(c));
            this.currentScene.dispatchEvent(a)
        };
    this.addEventListener(b +
        "buttondown", c);
    this.addEventListener(b + "buttonup", d);
    this._internalButtondownListeners[a] = c;
    this._internalButtonupListeners[a] = d;
    return this
};
SCore.prototype.keyunbind = function(a) {
    if (!this._keybind[a]) return this;
    var b = this._internalButtondownListeners,
        c = this._internalButtonupListeners;
    this.removeEventListener(a + "buttondown", b);
    this.removeEventListener(a + "buttonup", c);
    delete b[a];
    delete c[a];
    delete this._keybind[a];
    return this
};
SCore._loadFuncs = {};
SCore._loadFuncs.jpg = SCore._loadFuncs.jpeg = SCore._loadFuncs.gif = SCore._loadFuncs.png = SCore._loadFuncs.bmp = function(a, b, c, d) {
    return SSurface.load(a, c, d)
};
SCore.findExt = function(a) {
    var b = a.match(/\.\w+$/);
    return b && 0 < b.length ? b[0].slice(1).toLowerCase() : 0 === a.indexOf("data:") ? a.split(/[\/;]/)[1].toLowerCase() : null
};

function SNode() {
    SEventTarget.call(this);
    this._dirty = !1;
    this._matrix = [1, 0, 0, 1, 0, 0];
    this._rotation = this._height = this._width = this._offsetY = this._offsetX = this._y = this._x = 0;
    this._scaleY = this._scaleX = 1;
    this._drawMethod = this._drawCaller = null;
    this._depth = this._sorted = !1;
    this.visible = !0;
    this.opacity = 1;
    this.scene = this.parentNode = this.originY = this.originX = null;
    this.addEventListener("touchstart", function(a) {
        this.parentNode && this.parentNode.dispatchEvent(a)
    });
    this.addEventListener("touchmove", function(a) {
        this.parentNode &&
            this.parentNode.dispatchEvent(a)
    });
    this.addEventListener("touchend", function(a) {
        this.parentNode && this.parentNode.dispatchEvent(a)
    })
}
goog.inherits(SNode, SEventTarget);
SNode.prototype.onDraw = function(a) {
    if (this._drawCaller && this._drawCaller[this._drawMethod]) this._drawCaller[this._drawMethod](a)
};
SNode.prototype.addDrawListener = function(a, b) {
    this._drawCaller = a;
    this._drawMethod = b
};
SNode.prototype.cvsRender = function(a) {};
SNode.prototype.getX = function() {
    return this._x
};
SNode.prototype.setX = function(a) {
    this._x = a;
    this.setDirty(!0)
};
SNode.prototype.getY = function() {
    return this._y
};
SNode.prototype.setY = function(a) {
    this._y = a;
    this.setDirty(!0)
};
SNode.prototype.setPosition = function(a, b) {
    this._x = a;
    this._y = b;
    this.setDirty(!0)
};
SNode.prototype.getWidth = function() {
    return this._width
};
SNode.prototype.setWidth = function(a) {
    this._width = a;
    this.setDirty(!0)
};
SNode.prototype.getHeight = function() {
    return this._height
};
SNode.prototype.setHeight = function(a) {
    this._height = a;
    this.setDirty(!0)
};
SNode.prototype.getRotation = function() {
    return this._rotation
};
SNode.prototype.setRotation = function(a) {
    this._rotation = a;
    this.setDirty(!0)
};
SNode.prototype.getScaleX = function() {
    return this._scaleX
};
SNode.prototype.setScaleX = function(a) {
    this._scaleX = a;
    this.setDirty(!0)
};
SNode.prototype.getScaleY = function() {
    return this._scaleY
};
SNode.prototype.setScaleY = function(a) {
    this._scaleY = a;
    this.setDirty(!0)
};
SNode.prototype.setScale = function(a, b) {
    this._scaleX = a;
    this._scaleY = null != b ? b : a;
    this.setDirty(!0)
};
SNode.prototype.getDirty = function() {
    return this._dirty
};
SNode.prototype.setDirty = function(a) {
    this._dirty = a
};
SNode.prototype.remove = function() {
    this._listener && this.clearEventListener();
    this.parentNode && this.parentNode.removeChild(this)
};

function SDisplayObject(a, b) {
    SNode.call(this);
    this._width = a;
    this._height = b;
    this._image = null
}
goog.inherits(SDisplayObject, SNode);
SDisplayObject.prototype.getImage = function() {
    return this._image
};
SDisplayObject.prototype.setImage = function(a) {
    if ("undefined" === typeof a) throw Error("Assigned value on SDisplayObject.setImage is undefined. Please double-check image path, and check if the image you want to use is preload before use.");
    a !== this._image && (this._image = a)
};
SDisplayObject.prototype.cvsRender = function(a) {
    this._image && 0 !== this._width && 0 !== this._height && a.drawImage(this._image._element, 0, 0)
};

function SEntity() {
    SNode.call(this);
    this._touchEnabled = !0;
    this._clipping = !1;
    this._buttonMode = this._backgroundColor = null;
    this._style = {};
    this.__styleStatus = {};
    var a = SCore.instance;
    this.debugColor = "#0000ff";
    this.compositeOperation = null;
    this.buttonPressed = this.buttonMode = !1;
    this.addEventListener("touchstart", function() {
        if (this.buttonMode) {
            this.buttonPressed = !0;
            var b = new SEvent(this.buttonMode + "buttondown");
            this.dispatchEvent(b);
            a.dispatchEvent(b)
        }
    });
    this.addEventListener("touchend", function() {
        if (this.buttonMode) {
            this.buttonPressed = !1;
            var b = new SEvent(this.buttonMode + "buttonup");
            this.dispatchEvent(b);
            a.dispatchEvent(b)
        }
    });
    this.enableCollection()
}
goog.inherits(SEntity, SNode);
SEntity.prototype.setBackgroundColor = function(a) {
    this._backgroundColor = a
};
SEntity.prototype.intersect = function(a) {
    return a instanceof SEntity ? this._intersectOne(a) : !1
};
SEntity.prototype._intersectOne = function(a) {
    return this._offsetX < a._offsetX + a.width && a._offsetX < this._offsetX + this._width && this._offsetY < a._offsetY + a._height && a._offsetY < this._offsetY + this._height
};
SEntity.prototype.intersectStrict = function(a) {
    return a instanceof SEntity ? this._intersectStrictOne(a) : !1
};
SEntity.prototype._intersectStrictOne = function(a) {
    var b = this.getOrientedBoundingRect();
    a = a.getOrientedBoundingRect();
    var c = b.leftTop,
        d = b.rightTop,
        e = b.leftBottom,
        f = b.rightBottom,
        g = a.leftTop,
        h = a.rightTop,
        k = a.leftBottom,
        l = a.rightBottom,
        m = c[0],
        n = c[1],
        p = d[0],
        v = d[1],
        w = e[0],
        x = e[1],
        r = f[0],
        A = f[1],
        B = g[0],
        C = g[1],
        D = h[0],
        E = h[1],
        F = k[0],
        G = k[1],
        H = l[0],
        I = l[1],
        q = [p - m, v - n],
        s = [r - p, A - v],
        y = [w - r, x - A],
        t = [m - w, n - x];
    a = [D - B, E - C];
    var b = [H - D, I - E],
        z = [F - H, G - I],
        u = [B - F, C - G],
        J = m + p + w + r >> 2,
        K = n + v + x + A >> 2,
        L = B + D + F + H >> 2,
        M = C + E + G + I >> 2;
    if (0 <
        q[0] * (M - n) - q[1] * (L - m) && 0 < s[0] * (M - v) - s[1] * (L - p) && 0 < y[0] * (M - A) - y[1] * (L - r) && 0 < t[0] * (M - x) - t[1] * (L - w) || 0 < a[0] * (K - C) - a[1] * (J - B) && 0 < b[0] * (K - E) - b[1] * (J - D) && 0 < z[0] * (K - I) - z[1] * (J - H) && 0 < u[0] * (K - G) - u[1] * (J - F)) return !0;
    c = [c, d, f, e];
    d = [g, h, l, k];
    e = [q, s, y, t];
    b = [a, b, z, u];
    for (a = 0; 4 > a; a++)
        for (u = c[a], z = u[0], u = u[1], h = e[a], g = h[0], k = h[1], h = 0; 4 > h; h++)
            if (q = d[h], t = q[0], f = q[1], s = b[h], q = s[0], s = s[1], y = g * s - k * q, 0 !== y && (t -= z, l = f - u, f = (t * k - l * g) / y, q = (t * s - l * q) / y, 0 < f && 1 > f && 0 < q && 1 > q)) return !0;
    return !1
};
SEntity.prototype.within = function(a, b) {
    null == b && (b = (this._width + this._height + a._width + a._height) / 4);
    var c;
    return (c = this._offsetX - a._offsetX + (this._width - a._width) / 2) * c + (c = this._offsetY - a._offsetY + (this._height - a._height) / 2) * c < b * b
};
SEntity.prototype.enableCollection = function() {
    this.addEventListener("addedtoscene", this._addSelfToCollection);
    this.addEventListener("removedfromscene", this._removeSelfFromCollection);
    this.scene && this._addSelfToCollection()
};
SEntity.prototype.disableCollection = function() {
    this.removeEventListener("addedtoscene", this._addSelfToCollection);
    this.removeEventListener("removedfromscene", this._removeSelfFromCollection);
    this.scene && this._removeSelfFromCollection()
};
SEntity.prototype._addSelfToCollection = function() {};
SEntity.prototype._removeSelfFromCollection = function() {};
SEntity.prototype.getBoundingRect = function() {
    var a = this._width || 0,
        b = this._height || 0,
        c = this._matrix,
        d = c[0] * a,
        a = c[1] * a,
        e = c[2] * b,
        b = c[3] * b,
        f = c[4],
        c = c[5],
        d = [f, d + f, e + f, d + e + f].sort(function(a, b) {
            return a - b
        }),
        a = [c, a + c, b + c, a + b + c].sort(function(a, b) {
            return a - b
        });
    return {
        left: d[0],
        top: a[0],
        width: d[3] - d[0],
        height: a[3] - a[0]
    }
};
SEntity.prototype.getOrientedBoundingRect = function() {
    var a = this._width || 0,
        b = this._height || 0,
        c = this._matrix,
        d = c[0] * a,
        a = c[1] * a,
        e = c[2] * b,
        b = c[3] * b,
        f = c[4],
        c = c[5];
    return {
        leftTop: [f, c],
        rightTop: [d + f, a + c],
        leftBottom: [e + f, b + c],
        rightBottom: [d + e + f, a + b + c]
    }
};
SEntity.prototype.getConstructor = function() {
    return Object.getPrototypeOf(this).constructor
};

function SSprite(a, b) {
    SEntity.call(this);
    this._width = a;
    this._height = b;
    this._image = null;
    this.debugColor = "#ffaa00";
    this._frame = this._frameTop = this._frameLeft = 0;
    this._frameSequence = [];
    this._icol = this._irow = this._sh = this._sw = this._sy = this._sx = 0
}
goog.inherits(SSprite, SEntity);
SSprite.prototype.getImage = function() {
    return this._image
};
SSprite.prototype.setImage = function(a) {
    if ("undefined" === typeof a) throw Error("Assigned value on SSprite.setImage is undefined. Please double-check image path, and check if the image you want to use is preload before use.");
    a !== this._image && (this._image = a, this._setFrame(this._frame))
};
SSprite.prototype.getFrame = function() {
    return this._frame
};
SSprite.prototype.setFrame = function(a) {
    if (this._frame !== a)
        if (a instanceof Array) {
            var b = a.shift();
            this._setFrame(b);
            a.push(b);
            this._frameSequence = a
        } else this._setFrame(a), this._frameSequence = [], this._frame = a
};
SSprite.prototype._setFrame = function(a) {
    this._frame = a;
    null != this._image && (this._frame = a, this._irow = this._image.width / this._width | 0, this._frameLeft = (a % this._irow | 0) * this._width, this._frameTop = (a / this._irow | 0) * this._height % this._image.height)
};
SSprite.prototype.setWidth = function(a) {
    this._width = a;
    this._setFrame(this._frame);
    this.setDirty(!0)
};
SSprite.prototype.setHeight = function(a) {
    this._height = a;
    this._setFrame(this._frame);
    this.setDirty(!0)
};
SSprite.prototype.cvsRender = function(a) {
    this._image && 0 !== this._width && 0 !== this._height && (this._image.width < this._width || this._image.height < this._height ? (a.fillStyle = SSurface._getPattern(this._image, null), a.fillRect(0, 0, this._width, this._height)) : (this._sx = this._frameLeft, this._sy = this._image.height - this._height, this._sy > this._frameTop && (this._sy = this._frameTop), this._sw = this._image.width - this._sx, this._sw > this._width && (this._sw = this._width), this._sh = this._image.height - this._sy, this._sh > this._height &&
        (this._sh = this._height), a.drawImage(this._image._element, this._sx, this._sy, this._sw, this._sh, 0, 0, this._width, this._height)))
};

function SGroup() {
    SNode.call(this);
    this.childNodes = [];
    this.__dirty = !1;
    this._scene = null;
    [SEvent.ADDED_TO_SCENE, SEvent.REMOVED_FROM_SCENE].forEach(function(a) {
        this.addEventListener(a, function(a) {
            this.childNodes.forEach(function(c) {
                c.scene = this.scene;
                c.dispatchEvent(a)
            }, this)
        })
    }, this)
}
goog.inherits(SGroup, SNode);
SGroup.prototype.addChild = function(a) {
    a.parentNode && a.parentNode.removeChild(a);
    this.childNodes.push(a);
    a.parentNode = this;
    var b = new SEvent(SEvent.CHILD_ADDED);
    b.node = a;
    b.next = null;
    this.dispatchEvent(b);
    a.dispatchEvent(new SEvent(SEvent.ADDED));
    this.scene && (a.scene = this.scene, b = new SEvent(SEvent.ADDED_TO_SCENE), a.dispatchEvent(b))
};
SGroup.prototype.insertBefore = function(a, b) {
    a.parentNode && a.parentNode.removeChild(a);
    var c = this.childNodes.indexOf(b); - 1 !== c ? (this.childNodes.splice(c, 0, a), a.parentNode = this, c = new SEvent(SEvent.CHILD_ADDED), c.node = a, c.next = b, this.dispatchEvent(c), a.dispatchEvent(new SEvent(SEvent.ADDED)), this.scene && (a.scene = this.scene, c = new SEvent(SEvent.ADDED_TO_SCENE), a.dispatchEvent(c))) : this.addChild(a)
};
SGroup.prototype.removeChild = function(a) {
    var b; - 1 !== (b = this.childNodes.indexOf(a)) && (this.childNodes.splice(b, 1), a.parentNode = null, b = new SEvent(SEvent.CHILD_REMOVED), b.node = a, this.dispatchEvent(b), a.dispatchEvent(new SEvent(SEvent.REMOVED)), this.scene && (a.scene = null, b = new SEvent(SEvent.REMOVED_FROM_SCENE), a.dispatchEvent(b)))
};
SGroup.prototype.getFirstChild = function() {
    return this.childNodes[0]
};
SGroup.prototype.getLastChild = function() {
    return this.childNodes[this.childNodes.length - 1]
};
SGroup.prototype.getDirty = function() {
    return this.__dirty
};
SGroup.prototype.setDirty = function(a) {
    if (this.__dirty = a = !! a) {
        a = 0;
        for (var b = this.childNodes.length; a < b; a++) this.childNodes[a].setDirty(!0)
    }
};

function SCanvasLayer() {
    SGroup.call(this);
    var a = SCore.instance;
    this._cvsCache = {
        matrix: [1, 0, 0, 1, 0, 0],
        detectColor: "#000000"
    };
    this._cvsCache.layer = this;
    this._element = document.createElement("canvas");
    this._element.style.position = "absolute";
    this._element.style.left = this._element.style.top = "0px";
    this._detect = document.createElement("canvas");
    this._detect.style.position = "absolute";
    this._lastDetected = 0;
    this._scene = null;
    this.context = this._element.getContext("2d");
    this._dctx = this._detect.getContext("2d");
    this._colorManager =
        new SDetectColorManager(16, 256);
    this.setWidth(a.width);
    this.setHeight(a.height);
    [SEvent.TOUCH_START, SEvent.TOUCH_MOVE, SEvent.TOUCH_END].forEach(function(a) {
        this.addEventListener(a, function(a) {
            this._scene && this._scene.dispatchEvent(a)
        })
    }, this);
    var b = function(a) {
        var e = a.node;
        a = a.target;
        var f;
        f = a instanceof SCanvasLayer ? a._scene._layers.Canvas : a.scene._layers.Canvas;
        SCanvasLayer._attachCache(e, f, b, c);
        var g = new SEvent(SEvent.RENDER);
        e.setDirty(!0);
        SEngine.instance.matrix.stack.push(a._matrix);
        SEngine.instance.canvasRenderer.render(f.context,
            e, g);
        SEngine.instance.matrix.stack.pop(a._matrix)
    }, c = function(a) {
            var e = a.target;
            SCanvasLayer._detachCache(a.node, e instanceof SCanvasLayer ? e._scene._layers.Canvas : e.scene._layers.Canvas, b, c)
        };
    this.addEventListener("childremoved", c);
    this.addEventListener("childadded", b)
}
goog.inherits(SCanvasLayer, SGroup);
SCanvasLayer.prototype.setWidth = function(a) {
    this._width = a;
    this._element.width = this._detect.width = a
};
SCanvasLayer.prototype.setHeight = function(a) {
    this._height = a;
    this._element.height = this._detect.height = a
};
SCanvasLayer.prototype.addChild = function(a) {
    this.childNodes.push(a);
    a.parentNode = this;
    var b = new SEvent(SEvent.CHILD_ADDED);
    b.node = a;
    b.next = null;
    this.dispatchEvent(b);
    a.dispatchEvent(new SEvent(SEvent.ADDED));
    this.scene && (a.scene = this.scene, b = new SEvent(SEvent.ADDED_TO_SCENE), a.dispatchEvent(b))
};
SCanvasLayer.prototype.insertBefore = function(a, b) {
    var c = this.childNodes.indexOf(b); - 1 !== c ? (this.childNodes.splice(c, 0, a), a.parentNode = this, c = new SEvent(SEvent.CHILD_ADDED), c.node = a, c.next = b, this.dispatchEvent(c), a.dispatchEvent(new SEvent(SEvent.ADDED)), this.scene && (a.scene = this.scene, c = new SEvent(SEvent.ADDED_TO_SCENE), a.dispatchEvent(c))) : this.addChild(a)
};
SCanvasLayer.prototype._startRendering = function() {
    this.addEventListener("exitframe", this._onexitframe);
    this._onexitframe()
};
SCanvasLayer.prototype._stopRendering = function() {
    this.removeEventListener("render", this._onexitframe);
    this._onexitframe()
};
SCanvasLayer.prototype._onexitframe = function() {
    var a = SCore.instance,
        b = this.context;
    b.clearRect(0, 0, a.width, a.height);
    a = new SEvent(SEvent.RENDER);
    SEngine.instance.canvasRenderer.render(b, this, a)
};
SCanvasLayer.prototype._determineEventTarget = function(a) {
    return this._getEntityByPosition(a.x, a.y)
};
SCanvasLayer.prototype._getEntityByPosition = function(a, b) {
    var c = SCore.instance,
        d = this._dctx;
    this._lastDetected < c.frame && (d.clearRect(0, 0, this._width, this._height), SEngine.instance.canvasRenderer.detectRender(d, this), this._lastDetected = c.frame);
    c = d.getImageData(a, b, 1, 1).data;
    return this._colorManager.getSpriteByColor(c)
};
SCanvasLayer._attachCache = function(a, b, c, d) {
    var e;
    a._cvsCache || (a._cvsCache = {}, a._cvsCache.matrix = [1, 0, 0, 1, 0, 0], a._cvsCache.detectColor = "rgba(" + b._colorManager.attachDetectColor(a) + ")", a.addEventListener("childadded", c), a.addEventListener("childremoved", d));
    if (a.childNodes)
        for (var f = 0, g = a.childNodes.length; f < g; f++) e = a.childNodes[f], SCanvasLayer._attachCache(e, b, c, d)
};
SCanvasLayer._detachCache = function(a, b, c, d) {
    var e;
    a._cvsCache && (b._colorManager.detachDetectColor(a), a.removeEventListener("childadded", c), a.removeEventListener("childremoved", d), delete a._cvsCache);
    if (a.childNodes)
        for (var f = 0, g = a.childNodes.length; f < g; f++) e = a.childNodes[f], SCanvasLayer._detachCache(e, b, c, d)
};

function SDetectColorManager(a, b) {
    this.reference = [];
    this.colorResolution = a || 16;
    this.max = b || 1;
    this.capacity = Math.pow(this.colorResolution, 3);
    for (var c = 1, d = this.capacity; c < d; c++) this.reference[c] = null
}
SDetectColorManager.prototype.attachDetectColor = function(a) {
    var b = this.reference.indexOf(null); - 1 === b && (b = 1);
    this.reference[b] = a;
    return this._getColor(b)
};
SDetectColorManager.prototype.detachDetectColor = function(a) {
    a = this.reference.indexOf(a); - 1 !== a && (this.reference[a] = null)
};
SDetectColorManager.prototype._getColor = function(a) {
    var b = this.colorResolution,
        c = b / this.max;
    return [parseInt(a / b / b % b, 10) / c, parseInt(a / b % b, 10) / c, parseInt(a % b, 10) / c, 1]
};
SDetectColorManager.prototype._decodeDetectColor = function(a) {
    var b = this.colorResolution;
    return~~ (a[0] * b * b * b / 256) + ~~(a[1] * b * b / 256) + ~~(a[2] * b / 256)
};
SDetectColorManager.prototype.getSpriteByColor = function(a) {
    return this.reference[this._decodeDetectColor(a)]
};

function SScene() {
    SGroup.call(this);
    var a = SCore.instance;
    this.scene = this;
    this._backgroundColor = null;
    this._element = document.createElement("div");
    this._element.style.position = "absolute";
    this._element.style.overflow = "hidden";
    this._element.style[SEngine.ENV.VENDOR_PREFIX + "TransformOrigin"] = "0 0";
    this._layers = {};
    this._layerPriority = [];
    this.addEventListener(SEvent.CHILD_ADDED, this._onchildadded);
    this.addEventListener(SEvent.CHILD_REMOVED, this._onchildremoved);
    this.addEventListener(SEvent.ENTER, this._onenter);
    var b = this;
    this._dispatchExitframe = function() {
        var a, d;
        for (d in b._layers) a = b._layers[d], a.dispatchEvent(new SEvent(SEvent.EXIT_FRAME))
    };
    this.addEventListener(SEvent.CORE_RESIZE, this._oncoreresize);
    this._oncoreresize(a)
}
goog.inherits(SScene, SGroup);
SScene.prototype.setX = function(a) {
    this._x = a;
    for (var b in this._layers) this._layers[b].setX(a)
};
SScene.prototype.setY = function(a) {
    this._y = a;
    for (var b in this._layers) this._layers[b].setY(a)
};
SScene.prototype.setWidth = function(a) {
    this._width = a;
    for (var b in this._layers) this._layers[b].setWidth(a)
};
SScene.prototype.setHeight = function(a) {
    this._height = a;
    for (var b in this._layers) this._layers[b].setHeight(a)
};
SScene.prototype.setRotation = function(a) {
    this._rotation = a;
    for (var b in this._layers) this._layers[b].setRotation(a)
};
SScene.prototype.setScaleX = function(a) {
    this._scaleX = a;
    for (var b in this._layers) this._layers[b].setScaleX(a)
};
SScene.prototype.setScaleY = function(a) {
    this._scaleY = a;
    for (var b in this._layers) this._layers[b].setScaleY(a)
};
SScene.prototype.setBackgroundColor = function(a) {
    this._backgroundColor = this._element.style.backgroundColor = a
};
SScene.prototype._oncoreresize = function(a) {
    this._element.style.width = a.width + "px";
    this.setWidth(a.width);
    this._element.style.height = a.height + "px";
    this.setHeight(a.height);
    this._element.style[SEngine.ENV.VENDOR_PREFIX + "Transform"] = "scale(" + a.scale + ")";
    for (var b in this._layers) this._layers[b].dispatchEvent(a)
};
SScene.prototype.addLayer = function(a, b) {
    var c = SCore.instance;
    if (!this._layers[a]) {
        var d = new SCanvasLayer;
        c.currentScene === this && d._startRendering();
        this._layers[a] = d;
        c = d._element;
        if ("number" === typeof b) {
            var e = this._element.childNodes[b];
            e ? this._element.insertBefore(c, e) : this._element.appendChild(c);
            this._layerPriority.splice(b, 0, a)
        } else this._element.appendChild(c), this._layerPriority.push(a);
        d._scene = this
    }
};
SScene.prototype._determineEventTarget = function(a) {
    for (var b, c = this._layerPriority.length - 1; 0 <= c && !(b = this._layers[this._layerPriority[c]], b = b._determineEventTarget(a)); c--);
    b || (b = this);
    return b
};
SScene.prototype._onchildadded = function(a) {
    var b = a.node;
    a = a.next;
    var c, d;
    b._element ? (c = "Dom", d = 1) : (c = "Canvas", d = 0);
    this._layers[c] || this.addLayer(c, d);
    b._layer = this._layers[c];
    this._layers[c].insertBefore(b, a);
    b.parentNode = this
};
SScene.prototype._onchildremoved = function(a) {
    a = a.node;
    a._layer.removeChild(a);
    a._layer = null
};
SScene.prototype._onenter = function() {
    for (var a in this._layers) this._layers[a]._startRendering();
    SCore.instance.addEventListener("exitframe", this._dispatchExitframe)
};
SScene.prototype._onexit = function() {
    for (var a in this._layers) this._layers[a]._stopRendering();
    SCore.instance.removeEventListener("exitframe", this._dispatchExitframe)
};
SScene.prototype.addDrawListener = function(a, b) {
    this._layers.Canvas && this._layers.Canvas.addDrawListener(a, b)
};

function SCanvasScene() {
    SScene.call(this);
    this.addLayer("Canvas", null)
}
goog.inherits(SCanvasScene, SScene);
SCanvasScene.prototype._determineEventTarget = function(a) {
    (a = this._layers.Canvas._determineEventTarget(a)) || (a = this);
    return a
};
SCanvasScene.prototype._onchildadded = function(a) {
    var b = a.node;
    a = a.next;
    b._layer = this._layers.Canvas;
    this._layers.Canvas.insertBefore(b, a)
};
SCanvasScene.prototype._onenter = function() {
    this._layers.Canvas._startRendering();
    SCore.instance.addEventListener("exitframe", this._dispatchExitframe)
};
SCanvasScene.prototype._onexit = function() {
    this._layers.Canvas._stopRendering();
    SCore.instance.removeEventListener("exitframe", this._dispatchExitframe)
};

function SEngine() {
    this.matrix = new SMatrix;
    this.canvasRenderer = new SCanvasRenderer(this)
}
SEngine.initialize = function() {
    SEngine.instance = new SEngine
};
SEngine.ENV = {
    VENDOR_PREFIX: function() {
        var a = navigator.userAgent;
        return -1 !== a.indexOf("Opera") ? "O" : -1 !== a.indexOf("MSIE") ? "ms" : -1 !== a.indexOf("WebKit") ? "webkit" : "Gecko" === navigator.product ? "Moz" : ""
    }(),
    TOUCH_ENABLED: function() {
        var a = document.createElement("div");
        a.setAttribute("ontouchstart", "return");
        return "function" === typeof a.ontouchstart
    }(),
    USE_DEFAULT_EVENT_TAGS: ["input", "textarea", "select", "area"],
    CANVAS_DRAWING_METHODS: "putImageData drawImage drawFocusRing fill stroke clearRect fillRect strokeRect fillText strokeText".split(" "),
    PREVENT_DEFAULT_KEY_CODES: [37, 38, 39, 40, 32]
};

function SndManager(a, b) {}
SndManager.instance = null;
SndManager.prototype.play = function(a) {};
SndManager.prototype.stop = function(a) {};
SndManager.prototype.pauseAll = function() {};
SndManager.prototype.resumeAll = function() {};
SndManager.prototype.stopAllSounds = function() {};
SndManager.prototype.toogleMute = function() {};

function SndManagerIE(a, b) {
    SndManager.instance = this;
    window.SwitEntryPoint.infoBrowser.isIE || Application.error("Using SndManagerIE for no IE browsers");
    this.sounds = {};
    this.soundList = a;
    this.mute = !1;
    this.callback = b;
    this.callbackBug = !1;
    this.soundsLoaded = 0;
    this.soundsTotal = a.length;
    GuiLoader.instance && (GuiLoader.instance.totalFiles = this.soundsTotal);
    window.soundManager.setup({
        url: "media/swf/",
        flashVersion: 9,
        useHTML5Audio: !0,
        preferFlash: !0,
        useHighPerformance: !0,
        flashLoadTimeout: 2E3,
        noSWFCache: !1,
        consoleOnly: !0,
        wmode: null,
        debugMode: !1,
        onready: this.onReady,
        ontimeout: function() {
            Application.instance.onErrorSndManagerIE()
        }
    })
}
SndManagerIE.prototype.onReady = function() {
    for (var a = SndManager.instance.soundList, b = window.soundManager, c = 0; c < a.length; c++) b.createSound({
        id: a[c].id,
        url: "media/sounds/" + a[c].file + ".mp3",
        autoLoad: !0,
        onload: function() {
            SndManager.instance.onLoad()
        }
    }), SndManager.instance.sounds[a[c].id] = a[c]
};
SndManagerIE.prototype.onLoad = function() {
    this.soundsLoaded++;
    Application.log("SndManagerIE.onLoad: " + this.soundsLoaded + "/" + this.soundsTotal);
    GuiLoader.instance && GuiLoader.instance.load();
    this.soundsLoaded === this.soundsTotal && this.callback()
};
SndManagerIE.prototype.play = function(a) {
    if (!this.mute && "undefined" !== typeof this.sounds[a]) {
        var b = window.soundManager,
            c = this.sounds[a].loops;
        1 !== c ? (0 === c && (c = 999999), 0 === b.sounds[a].instanceCount && b.play(a, {
            volume: 100 * this.sounds[a].vol,
            loops: c
        })) : b.play(a, {
            volume: 100 * this.sounds[a].vol
        })
    }
};
SndManagerIE.prototype.stop = function(a) {
    window.soundManager.stop(a)
};
SndManagerIE.prototype.pauseAll = function() {
    window.soundManager.pauseAll()
};
SndManagerIE.prototype.resumeAll = function() {
    this.mute || window.soundManager.resumeAll()
};
SndManagerIE.prototype.stopAllSounds = function() {
    window.soundManager.stopAll()
};
SndManagerIE.prototype.toogleMute = function() {
    (this.mute = !this.mute) ? window.soundManager.pauseAll() : window.soundManager.resumeAll()
};
SndManagerIE.prototype.tooglePause = function(a) {
    this.mute || window.soundManager.togglePause(a)
};

function SndManagerWeb(a, b) {
    SndManager.instance = this;
    this.soundjs = window.createjs;
    this.soundList = {};
    this.mute = !1;
    this.callback = b;
    this.callbackBug = !1;
    window.SwitEntryPoint.infoBrowser.isIE && (Application.warn("Using SndManagerWeb for IE"), this.callbackBug = !0);
    window.SwitEntryPoint.infoBrowser.iDevice && 6 > window.SwitEntryPoint.infoBrowser.platformVersion && (Application.warn("IOS < 6"), this.callbackBug = this.soundjs.HTMLAudioPlugin.enableIOS = !0);
    this.soundsLoaded = 0;
    this.soundsTotal = a.length;
    var c = [];
    GuiLoader.instance &&
        (GuiLoader.instance.totalFiles = this.soundsTotal);
    for (var d = 0; d < a.length; d++) this.soundList[a[d].id] = a[d], c.push({
        src: a[d].file + ".mp3|" + a[d].file + ".ogg",
        id: a[d].id,
        data: a[d].instances
    });
    this.soundjs.Sound.addEventListener("fileload", this.soundjs.proxy(this.onFileload, this));
    this.soundjs.Sound.registerManifest(c, "media/sounds/");
    this.callbackBug && this.callback()
}
SndManagerWeb.prototype.onFileload = function(a) {
    this.soundsLoaded++;
    Application.info("preloading sound: " + a.id + " " + this.soundsLoaded + "/" + this.soundsTotal);
    this.callbackBug || (GuiLoader.instance && GuiLoader.instance.load(), this.soundsLoaded === this.soundsTotal && this.callback())
};
SndManagerWeb.prototype.onPlayComplete = function(a) {
    this.play(a.target.switId)
};
SndManagerWeb.prototype.play = function(a) {
    if ("undefined" === typeof this.soundList[a]) Application.warn("SndManagerWeb: sound with id [" + a + "] not found");
    else if (!this.soundjs.HTMLAudioPlugin.enableIOS || 0 != this.soundList[a].ios) {
        var b = null;
        this.soundjs.HTMLAudioPlugin.enableIOS ? (b = this.soundjs.Sound.play(a), b.addEventListener("complete", this.soundjs.proxy(this.onPlayComplete, this))) : b = this.soundjs.Sound.play(a, null, 0, 0, 0 === this.soundList[a].loops ? 999999 : this.soundList[a].loops - 1, this.soundList[a].vol);
        b.switId = a;
        return b
    }
};
SndManagerWeb.prototype.stop = function(a) {
    for (var b = this.soundjs.Sound._instances, c = 0; c < b.length; ++c) b[c].switId === a && b[c].stop()
};
SndManagerWeb.prototype.pauseSound = function(a) {
    for (var b = this.soundjs.Sound._instances, c = 0; c < b.length; ++c) b[c].switId === a && b[c].pause()
};
SndManagerWeb.prototype.resumeSound = function(a) {
    for (var b = this.soundjs.Sound._instances, c = 0; c < b.length; ++c) b[c].switId === a && b[c].resume()
};
SndManagerWeb.prototype.setMasterVolume = function(a) {
    try {
        this.soundjs.Sound.setVolume(a)
    } catch (b) {
        Application.error("SndManagerWeb: " + b)
    }
};
SndManagerWeb.prototype.pauseAll = function() {
    for (var a = this.soundjs.Sound._instances, b = 0; b < a.length; ++b) a[b].pause()
};
SndManagerWeb.prototype.resumeAll = function() {
    for (var a = this.soundjs.Sound._instances, b = 0; b < a.length; ++b) a[b].resume()
};
SndManagerWeb.prototype.stopAllSounds = function() {
    this.soundjs.Sound.stop()
};
SndManagerWeb.prototype.removeAllSounds = function() {
    this.soundjs.Sound.removeAllSounds();
    this.soundjs.Sound = null
};
SndManagerWeb.prototype.toogleMute = function() {
    (this.mute = !this.mute) ? this.soundjs.Sound.setMute(!0) : this.soundjs.Sound.setMute(!1)
};

function Actor(a, b, c, d) {
    b = "undefined" !== typeof b ? b : 0;
    c = "undefined" !== typeof c ? c : 0;
    this.m_y = this.m_x = 0;
    this.m_app = this.m_clip = null;
    this.m_totalDeltaTime = this.m_frameTime = this.m_currentFrame = this.m_totalFrames = 0;
    this.m_app = "undefined" === typeof d ? Application.instance : d;
    this.m_clip = "undefined" === typeof a ? new Clip : this.m_app.getClip(a);
    this.setX(b);
    this.setY(c);
    this.m_currentFrame = 0;
    this.m_totalFrames = this.m_clip.totalFrames;
    this.m_frameTime = -1;
    this.m_totalDeltaTime = 0;
    this.loop = !0
}
Actor.prototype.setX = function(a) {
    this.m_clip.setX(a);
    this.m_x = a
};
Actor.prototype.setY = function(a) {
    this.m_clip.setY(a);
    this.m_y = a
};
Actor.prototype.free = function() {
    this.m_app = null;
    this.m_clip.parent.removeChild(this.m_clip.sprite);
    this.m_clip.free();
    this.m_clip = null
};
Actor.prototype.x = function() {
    return this.m_x
};
Actor.prototype.y = function() {
    return this.m_y
};
Actor.prototype.clip = function() {
    return this.m_clip
};
Actor.prototype.setClip = function(a) {
    this.m_clip = a;
    this.m_currentFrame = 0;
    this.m_totalFrames = this.m_clip.totalFrames;
    this.m_clip.setX(this.m_x);
    this.m_clip.setY(this.m_y)
};
Actor.prototype.setClipByName = function(a) {
    this.m_clip && this.m_clip.parent && this.m_clip.parent.removeChild(this.m_clip.sprite);
    this.setClip(this.m_app.getClip(a))
};
Actor.prototype.setFrameTime = function(a) {
    this.m_frameTime = a
};
Actor.prototype.currentFrame = function() {
    return this.m_currentFrame
};
Actor.prototype.setFrame = function(a) {
    this.m_currentFrame = a;
    this.m_currentFrame > this.m_totalFrames && (this.m_currentFrame = this.m_totalFrames)
};
Actor.prototype.update = function(a) {
    this.m_clip && (this.m_clip.setX(this.m_x), this.m_clip.setY(this.m_y), this.m_clip.update(a))
};

function ControlTouch() {
    ControlTouch.instance = this;
    this.isTouchable = Application.isMobileDevice;
    this.gameIsMultiTouch = !0;
    this.currentId = -1;
    this.canvas = document.getElementById("platform-stage").firstChild.firstChild;
    this.buttons = [];
    this.draggableObjects = [];
    this.swipeObjects = [];
    this.setCanvas()
}
ControlTouch.prototype.setMultitouchGame = function(a) {
    this.gameIsMultiTouch != a && (this.gameIsMultiTouch = a)
};
ControlTouch.prototype.setCanvas = function() {
    this.isTouchable ? (this.canvas.addEventListener("touchstart", this.onTouchStart, !1), this.canvas.addEventListener("touchmove", this.onTouchMove, !1), this.canvas.addEventListener("touchend", this.onTouchEnd, !1), this.canvas.addEventListener("touchcancel", this.onTouchLeave, !1), this.touches = []) : (this.canvas.addEventListener("mousemove", this.onMouseMove, !1), this.canvas.addEventListener("mousedown", this.onMouseDown, !1), this.canvas.addEventListener("mouseup", this.onMouseUp, !1), this.canvas.addEventListener("mouseout", this.onMouseOutWindow, !1), this.mouseY = this.mouseX = 0)
};
ControlTouch.instance = null;
ControlTouch.prototype.update = function(a) {
    for (var b = 0; b < ControlTouch.instance.swipeObjects.length; b++) ControlTouch.instance.swipeObjects[b].update(a)
};
ControlTouch.prototype.onTouchStart = function(a) {
    var b = !1;
    a = a.changedTouches;
    for (var c = 0, d = 0, c = 0; c < a.length; c++) {
        var b = !1,
            e = a[c];
        Layout.fixTouchEvent(e);
        for (d = 0; d < ControlTouch.instance.draggableObjects.length && !ControlTouch.instance.draggableObjects[d].onTouchStart(e); d++);
        for (d = 0; d < ControlTouch.instance.buttons.length; d++)
            if (ControlTouch.instance.buttons[d].onTouchStart(e)) {
                b = !0;
                break
            }
        for (d = 0; d < ControlTouch.instance.swipeObjects.length && !ControlTouch.instance.swipeObjects[d].onTouchStart(e); d++);
        if (Global.game && !b)
            if (ControlTouch.instance.gameIsMultiTouch) Global.game.onTouchStart(e.x, e.y, e.identifier);
            else -1 == ControlTouch.instance.currentId && (b = [], b.offsetX = e.x, b.offsetY = e.y, Global.game.onMouseDown(b), ControlTouch.instance.currentId = e.identifier)
    }
};
ControlTouch.prototype.onTouchMove = function(a) {
    a = a.changedTouches;
    for (var b = 0, c = 0, b = 0; b < a.length; b++) {
        var d = a[b];
        Layout.fixTouchEvent(d);
        for (c = 0; c < ControlTouch.instance.draggableObjects.length; c++) ControlTouch.instance.draggableObjects[c].onTouchMove(d);
        if (Global.game)
            if (ControlTouch.instance.gameIsMultiTouch) Global.game.onTouchMove(d.x, d.y, d.identifier);
            else ControlTouch.instance.currentId == d.identifier && (c = [], c.offsetX = d.x, c.offsetY = d.y, Global.game.onMouseMove(c))
    }
};
ControlTouch.prototype.onTouchEnd = function(a) {
    var b = !1;
    a = a.changedTouches;
    for (var c = 0, d = 0, d = 0; d < a.length; d++) {
        var e = a[d];
        Layout.fixTouchEvent(e);
        for (c = 0; c < ControlTouch.instance.draggableObjects.length; c++) ControlTouch.instance.draggableObjects[c].onTouchEnd(e);
        for (c = 0; c < ControlTouch.instance.buttons.length; c++) ControlTouch.instance.buttons[c].onTouchEnd(e) && (b = !0);
        for (c = 0; c < ControlTouch.instance.swipeObjects.length; c++) ControlTouch.instance.swipeObjects[c].onTouchEnd(e);
        if (Global.game && !b)
            if (ControlTouch.instance.gameIsMultiTouch) Global.game.onTouchEnd(e.x,
                e.y, e.identifier);
            else ControlTouch.instance.currentId == e.identifier && (c = [], c.offsetX = e.x, c.offsetY = e.y, Global.game.onMouseUp(c), ControlTouch.instance.currentId = -1)
    }
};
ControlTouch.prototype.onTouchLeave = function(a) {
    ControlTouch.instance.currentId = -1
};
ControlTouch.prototype.onMouseMove = function(a) {
    Layout.correctPosition(a);
    ControlTouch.instance.mouseX = a.offsetX;
    ControlTouch.instance.mouseY = a.offsetY;
    for (var b = 0, b = 0; b < ControlTouch.instance.draggableObjects.length; b++) ControlTouch.instance.draggableObjects[b].onMouseMove(a);
    for (b = 0; b < ControlTouch.instance.buttons.length && !ControlTouch.instance.buttons[b].onMouseMove(a); b++);
    if (Global.game) Global.game.onMouseMove(a)
};
ControlTouch.prototype.onMouseDown = function(a) {
    Layout.correctPosition(a);
    for (var b = !1, c = 0, c = 0; c < ControlTouch.instance.draggableObjects.length; c++)
        if (ControlTouch.instance.draggableObjects[c].onMouseDown(a)) {
            b = !0;
            break
        }
    for (c = 0; c < ControlTouch.instance.buttons.length; c++)
        if (ControlTouch.instance.buttons[c].onMouseDown(a)) {
            b = !0;
            break
        }
    for (c = 0; c < ControlTouch.instance.swipeObjects.length; c++)
        if (ControlTouch.instance.swipeObjects[c].onMouseDown(a)) {
            b = !0;
            break
        }
    if (Global.game && !b) Global.game.onMouseDown(a)
};
ControlTouch.prototype.onMouseUp = function(a) {
    var b;
    Layout.correctPosition(a);
    var c = !1;
    for (b = 0; b < ControlTouch.instance.draggableObjects.length; b++) ControlTouch.instance.draggableObjects[b].onMouseUp(a);
    for (b = 0; b < ControlTouch.instance.swipeObjects.length; b++) ControlTouch.instance.swipeObjects[b].onMouseUp(a);
    for (b = 0; b < ControlTouch.instance.buttons.length; b++)
        if (ControlTouch.instance.buttons[b].onMouseUp(a)) {
            c = !0;
            break
        }
    if (Global.game && !c) Global.game.onMouseUp(a)
};
ControlTouch.prototype.onMouseOutWindow = function(a) {
    Layout.correctPosition(a);
    if (!(0 <= a.offsetY && a.offsetY <= Application.APP_HEIGHT && 0 <= a.offsetX && a.offsetX <= Application.APP_WIDTH) && Global.game) Global.game.onMouseOutWindow(a)
};
ControlTouch.prototype.free = function() {
    this.canvas = null
};
ControlTouch.prototype.resetTouchControl = function() {
    this.currentId = -1
};
window.onload = function() {
    new Application;
    var a = document.getElementById("ios7");
    a.style.display = "none";
    var b = window.navigator.userAgent,
        b = -1 < b.indexOf("OS 7") && (-1 < b.indexOf("iPhone") || -1 < b.indexOf("iPod")),
        c = (20 >= window.outerHeight - window.innerHeight || window.innerHeight == window.outerHeight) && (90 == window.orientation || -90 == window.orientation) || (0 == window.orientation || 180 == window.orientation) && 480 <= window.outerHeight;
    b && !c && Application.config.settings.ios7Display && (a.style.display = "block", a.ontouchstart =
        function(b) {
            a.style.display = "none"
        })
};
window.onpagehide = function() {
    if (Application.instance) Application.instance.onLostFocus()
};
window.onpageshow = function() {
    if (Application.instance) Application.instance.onGotFocus()
};
window.onblur = function() {
    if (Application.instance) Application.instance.onLostFocus()
};
window.onfocus = function() {
    if (Application.instance) Application.instance.onGotFocus()
};
window.onresize = function(a) {
    Application.instance && (Application.instance.onResize(a.target.innerWidth, a.target.innerHeight), Application.instance.hideAddressBar())
};
window.onorientationchange = function(a) {
    if (Application.instance) Application.instance.onOrientationchange(a)
};

function Application() {
    Application.instance = this;
    this.soundManager = null;
    Application.MAX_DELTA_TIME = 50;
    Application.SAFE_AREA_WIDTH = 200;
    Application.APP_WIDTH = 750;
    Application.APP_HEIGHT = 500;
    Application.APP_FPS = 40;
    Application.APP_SCALE = 1;
    Application.updateable = !0;
    Application.strings = window.strings.strings;
    Application.config = window.config;
    Application.tweenManager = new TweenManager;
    Application.isMobileDevice = null !== navigator.userAgent.match(/iPad|iPhone|iPod|Android|BlackBerry|webOS/i) ? !0 : !1;
    var a = navigator.userAgent;
    Application.iOS7 = -1 < a.indexOf("OS 7") && (-1 < a.indexOf("iPhone") || -1 < a.indexOf("iPod"));
    Application.isIOS = window.SwitEntryPoint.infoBrowser.iDevice;
    Application.lastWidth = 0;
    Application.lastHeight = 0;
    Application.fps = 0;
    Application._fpsFrameCounter = 0;
    Application._fpsNewTime = 0;
    Application._fpsOldTime = 0;
    $("#RotateScreen").css("display", "none");
    $("#RotateScreen").css("opacity", "1");
    this.onOrientationchange(null);
    SEngine.initialize();
    Global.app = this;
    Layout.scale = 1;
    Layout.align = Layout.ALIGN_CENTER;
    Layout.resizeEnable = !0;
    Layout.offsetX = 0;
    Layout.offsetY = 0;
    Application.debug = !0;
    this.guiManager = null;
    this.core = new SCore(Application.APP_WIDTH, Application.APP_HEIGHT);
    this.core.scale = Application.APP_SCALE;
    this.core.fps = Application.APP_FPS;
    this.core.app = this;
    this.input = [];
    this.keysArray = [];
    this.keysArray[Application.KEYS[0]] = 37;
    this.keysArray[Application.KEYS[1]] = 38;
    this.keysArray[Application.KEYS[2]] = 39;
    this.keysArray[Application.KEYS[3]] = 40;
    this.keysArray[Application.KEYS[4]] = 32;
    this.keysArray[Application.KEYS[5]] = 27;
    this.keysArray[Application.KEYS[6]] = 48;
    this.keysArray[Application.KEYS[7]] = 49;
    this.keysArray[Application.KEYS[8]] = 50;
    this.keysArray[Application.KEYS[9]] = 51;
    this.keysArray[Application.KEYS[10]] = 52;
    this.keysArray[Application.KEYS[11]] = 53;
    this.keysArray[Application.KEYS[12]] = 54;
    this.keysArray[Application.KEYS[13]] = 55;
    this.keysArray[Application.KEYS[14]] = 56;
    this.keysArray[Application.KEYS[15]] = 57;
    this.keysArray[Application.KEYS[16]] = 65;
    this.keysArray[Application.KEYS[17]] = 66;
    this.keysArray[Application.KEYS[18]] =
        67;
    this.keysArray[Application.KEYS[19]] = 68;
    this.keysArray[Application.KEYS[20]] = 69;
    this.keysArray[Application.KEYS[21]] = 70;
    this.keysArray[Application.KEYS[22]] = 71;
    this.keysArray[Application.KEYS[23]] = 72;
    this.keysArray[Application.KEYS[24]] = 73;
    this.keysArray[Application.KEYS[25]] = 74;
    this.keysArray[Application.KEYS[26]] = 75;
    this.keysArray[Application.KEYS[27]] = 76;
    this.keysArray[Application.KEYS[28]] = 77;
    this.keysArray[Application.KEYS[29]] = 78;
    this.keysArray[Application.KEYS[30]] = 79;
    this.keysArray[Application.KEYS[31]] =
        80;
    this.keysArray[Application.KEYS[32]] = 81;
    this.keysArray[Application.KEYS[33]] = 82;
    this.keysArray[Application.KEYS[34]] = 83;
    this.keysArray[Application.KEYS[35]] = 84;
    this.keysArray[Application.KEYS[36]] = 85;
    this.keysArray[Application.KEYS[37]] = 86;
    this.keysArray[Application.KEYS[38]] = 87;
    this.keysArray[Application.KEYS[39]] = 88;
    this.keysArray[Application.KEYS[40]] = 89;
    this.keysArray[Application.KEYS[41]] = 90;
    this.keysArrayPressed = [];
    for (a = a = 0; a < Application.KEYS.length; a++) this.keysArrayPressed[Application.KEYS[a]] = !1, this.core.keybind(this.keysArray[Application.KEYS[a]], Application.KEYS[a]);
    this.core.addEventListener("load", this.onCoreLoaded);
    this.core.addEventListener("inputstart", this.onkeyDown);
    this.core.addEventListener("inputchange", this.onkeyChange);
    this.core.addEventListener("inputend", this.onKeyUp);
    this.htmlContainer = $("#MainInterfaceAuxiliar");
    Application.instance.core.start()
}
Application.instance = null;
Application.isMobileDevice = !1;
Application.KEYS = "left up right down space scape num_0 num_1 num_2 num_3 num_4 num_5 num_6 num_7 num_8 num_9 key_a key_b key_c key_d key_e key_f key_g key_h key_i key_j key_k key_l key_m key_n key_o key_p key_q key_r key_s key_t key_u key_v key_w key_x key_y key_z".split(" ");
Application.prototype.hideAddressBar = function() {
    Application.isMobileDevice && (setTimeout(function() {
        window.scrollTo(0, 1)
    }, 20), setTimeout(function() {
        window.scrollTo(0, 0)
    }, 50))
};
Application.prototype.onLoadingError = function(a) {
    Application.error("onLoadingError: " + a)
};
Application.prototype.onSoundsLoaded = function() {
    Application.info("onSoundsLoaded");
    SndManager.instance.callbackBug && Application.instance.guiManager.gotoScreen(GuiManager.SC_MAIN_MENU)
};
Application.prototype.onErrorSndManagerIE = function() {
    Application.info("onErrorSndManagerIE");
    Application.instance.soundManager = new SndManagerWeb(Application.config.sounds, Application.instance.onSoundsLoaded)
};
Application.prototype.onCoreLoaded = function() {
    Application.info("onCoreLoaded");
    Application.instance.core.load(UIAssets.loaderBack, Application.instance.onLoaderReady, "", Application.instance.onLoadingError)
};
Application.prototype.onLoaderReady = function() {
    Application.info("onLoaderReady");
    Application.instance.guiManager = new GuiManager;
    Application.instance.guiManager.gotoScreen(GuiManager.SC_SOUND_LOADER);
    Application.instance.onResize(window.innerWidth, window.innerHeight);
    Application.instance.controlTouch = new ControlTouch;
    Application._newTime = 0;
    Application._deltaTime = 0;
    Application._oldTime = 0;
    Application._timeElapse = 0;
    Application._intervalId = setInterval(Application.instance.update, 0);
    Application.instance.soundManager =
        window.SwitEntryPoint.infoBrowser.isIE ? new SndManagerIE(Application.config.sounds, Application.instance.onSoundsLoaded) : new SndManagerWeb(Application.config.sounds, Application.instance.onSoundsLoaded)
};
Application.prototype.onResize = function(a, b) {
    Layout.onResize(a, b)
};
Application.prototype.onOrientationchange = function(a) {
    Application.isMobileDevice && (a = 0 == window.orientation || 180 == window.orientation, Application.isMobileDevice && (a ? ($("#RotateScreen").css("display", ""), this.onLostFocus()) : ($("#RotateScreen").css("display", "none"), this.onGotFocus())))
};
Application.prototype.onLostFocus = function() {
    Application.updateable = !1;
    try {
        Application.info("-- ON LOST FOCUS --"), this.soundManager && this.soundManager.pauseAll()
    } catch (a) {
        Application.error("onLostFocus: " + a)
    }
};
Application.prototype.onGotFocus = function() {
    Application.updateable = !0;
    try {
        Application.info("-- ON GOT FOCUS --"), this.soundManager && this.soundManager.resumeAll()
    } catch (a) {
        Application.error("onGotFocus: " + a)
    }
};
Application.prototype.getCanvas = function() {
    return document.getElementById("platform-stage").firstChild.firstChild
};
Application.prototype.captureScreen = function() {
    var a = Application.instance.getCanvas();
    Application.log("canvas " + a);
    a = a.toDataURL();
    window.open(a, "Screenshoot", "width=750, height=500")
};
Application.prototype.update = function(a) {
    Application._newTime = Date.now();
    Application._timeElapse += Application._newTime - Application._oldTime;
    Application._oldTime = Application._newTime;
    Application._timeElapse >= 1E3 / Application.APP_FPS && (Application.updateable && (Application.instance.guiManager.update(Application._timeElapse), Application.instance.controlTouch.update(Application._timeElapse), Application.instance.core._tick(), Application.tweenManager.update()), Application._timeElapse = 0, Application._fpsFrameCounter++,
        Application._fpsNewTime = Application._newTime, 1E3 <= Application._fpsNewTime - Application._fpsOldTime && (Application.fps = (Application._fpsFrameCounter / (Application._fpsNewTime - Application._fpsOldTime) * 1E3).toFixed(0), Application._fpsOldTime = Application._fpsNewTime, Application._fpsFrameCounter = 0), ConsolePanel.instance && (ConsolePanel.instance.clearPersistent(), ConsolePanel.instance.fps(Application.fps)));
    if (window.innerWidth !== Application.lastWidth || window.innerHeight !== Application.lastHeight) Application.lastWidth =
        window.innerWidth, Application.lastHeight = window.innerHeight, Application.instance.onResize(window.innerWidth, window.innerHeight), Application.iOS7 && Application.instance.hideAddressBar()
};
Application.gameData = null;
Application.strings = null;
Application.infoBrowser = [];
Application.prototype.addDisplayContainer = function() {
    return new SGroup
};
Application.prototype.getClip = function(a) {
    var b = window.Assets.assetsParams[a];
    if ("undefined" !== typeof b && null !== b) return new Clip(0, 0, b.u, b.w, b.h, b.f, b.fps, b.cx, b.cy, b.collision, b.bounds, b.boundsAttack);
    Application.error("getClip: params not found: " + a)
};
Application.prototype.getDisplayObject = function(a) {
    a = window.Assets.assetsParams[a];
    var b = new SDisplayObject(a.w, a.h);
    b.setImage(Application.instance.core.assets[Global.URL_ASSETS + a.u]);
    return b
};
Application.prototype.onMouseDown = function(a) {
    Layout.fixPosition(a);
    if (Application.instance.guiManager) Application.instance.guiManager.onMouseDown(a)
};
Application.prototype.onMouseMove = function(a) {
    Layout.fixPosition(a);
    if (Application.instance.guiManager) Application.instance.guiManager.onMouseMove(a)
};
Application.prototype.onMouseUp = function(a) {
    Layout.fixPosition(a);
    if (Application.instance.guiManager) Application.instance.guiManager.onMouseUp(a)
};
Application.prototype.onkeyDown = function(a) {
    for (a = 0; a < Application.KEYS.length; a++)
        if (this.input[Application.KEYS[a]]) {
            Application.instance.keysArrayPressed[Application.KEYS[a]] = !0;
            if (Application.instance.guiManager) Application.instance.guiManager.onKeyDown(Application.instance.keysArray[Application.KEYS[a]]);
            break
        }
};
Application.prototype.onkeyChange = function(a) {
    for (a = 0; a < Application.KEYS.length; a++)
        if (!0 == this.input[Application.KEYS[a]] && !Application.instance.keysArrayPressed[Application.KEYS[a]]) {
            Application.instance.keysArrayPressed[Application.KEYS[a]] = !0;
            if (Application.instance.guiManager) Application.instance.guiManager.onKeyDown(Application.instance.keysArray[Application.KEYS[a]]);
            break
        } else if (!1 == this.input[Application.KEYS[a]] && Application.instance.keysArrayPressed[Application.KEYS[a]]) {
        Application.instance.keysArrayPressed[Application.KEYS[a]] = !1;
        if (Application.instance.guiManager) Application.instance.guiManager.onKeyUp(Application.instance.keysArray[Application.KEYS[a]]);
        break
    }
};
Application.prototype.onKeyUp = function(a) {
    for (a = 0; a < Application.KEYS.length; a++)
        if (!1 == this.input[Application.KEYS[a]] && Application.instance.keysArrayPressed[Application.KEYS[a]]) {
            Application.instance.keysArrayPressed[Application.KEYS[a]] = !1;
            if (Application.instance.guiManager) Application.instance.guiManager.onKeyUp(Application.instance.keysArray[Application.KEYS[a]]);
            break
        }
};
Application.prototype.playSound = function(a) {
    this.soundManager.play(a)
};
Application.prototype.stopSound = function(a) {
    this.soundManager.stop(a)
};
Application.prototype.stopAllSounds = function() {
    this.soundManager.stopAllSounds()
};
Application.prototype.toogleMute = function() {
    this.soundManager.toogleMute()
};
Application.prototype.isSoundOn = function() {
    return !this.soundManager.mute
};
Application.prototype.pauseAllSounds = function() {
    this.soundManager.pauseAll()
};
Application.prototype.resumeAllSounds = function() {
    this.soundManager.resumeAll()
};
Application.persistent = function(a) {
    ConsolePanel.instance && ConsolePanel.instance.persistent(a)
};
Application.trace = function(a) {
    Application.logsEnabled && (window.console && window.console.log && window.console.log(a), window.Debug && window.Debug.writeln(a), ConsolePanel.instance && ConsolePanel.instance.log(a))
};
Application.log = function(a) {
    Application.logsEnabled && (window.console && window.console.log && window.console.log("[LOG] " + a), window.Debug && window.Debug.writeln("[LOG] " + a), ConsolePanel.instance && ConsolePanel.instance.log(a))
};
Application.info = function(a) {
    window.console && window.console.info && window.console.info("[INFO] " + a);
    window.Debug && window.Debug.writeln("[INFO] " + a);
    ConsolePanel.instance && ConsolePanel.instance.info(a)
};
Application.warn = function(a) {
    window.console && window.console.warn && window.console.warn("[WARN] " + a);
    window.Debug && window.Debug.writeln("[WARN] " + a);
    ConsolePanel.instance && ConsolePanel.instance.warn(a)
};
Application.error = function(a) {
    window.console && window.console.error && window.console.error("[ERROR] " + a);
    window.Debug && window.Debug.writeln("[ERROR] " + a);
    ConsolePanel.instance && ConsolePanel.instance.error(a)
};
Application.errorIf = function(a, b) {
    a || Application.error(b)
};
Application.fatal = function(a) {
    Application.error("[FATAL] " + a);
    throw Error(a);
};
Application.assert = function(a, b) {
    a || Application.fatal(b)
};
Application.logsEnabled = !0;

function Character(a, b, c) {
    this.onEndAnimation = null;
    this.m_states = [];
    this.m_currentState = 0;
    this.m_currentActor = null;
    this.m_x = a;
    this.m_y = b;
    this.m_functions = [];
    this.m_canvas = c;
    this.m_lastFrame = 0;
    this.worldActor = null;
    this.depth = 0
}
Character.prototype.setDepth = function(a) {
    this.m_currentActor && this.m_currentActor.clip() && (this.m_currentActor.clip().sprite._depth = a);
    this.depth = a
};
Character.prototype.getState = function() {
    return this.m_currentState
};
Character.prototype.actor = function() {
    return this.m_currentActor
};
Character.prototype.getActor = function() {
    return this.m_currentActor
};
Character.prototype.getX = function() {
    return this.m_x
};
Character.prototype.getY = function() {
    return this.m_y
};
Character.prototype.setX = function(a) {
    this.m_x = a;
    this.m_currentActor && this.m_currentActor.setX(this.m_x)
};
Character.prototype.setY = function(a) {
    this.m_y = a;
    this.m_currentActor && this.m_currentActor.setY(this.m_y)
};
Character.prototype.addState = function(a, b, c) {
    this.m_states[a] = b;
    c = "undefined" !== typeof c ? c : [];
    0 < c.length ? this.m_functions[a] = c : delete this.m_functions[a]
};
Character.prototype.gotoState = function(a, b) {
    this.m_states[a] || "undefined" === typeof this.m_states[a] ? (this.m_currentState = a, null !== this.m_currentActor && (this.m_currentActor.clip().setAlpha(0), this.m_currentActor.free(), this.m_currentActor = null), this.m_currentActor = new Actor(this.m_states[a], this.m_x, this.m_y), this.m_currentActor.clip().setAlpha(0), this.m_currentActor.clip().sprite._depth = this.depth, this.m_canvas.addChild(this.m_currentActor.clip().sprite), this.m_currentActor.clip().parent = this.m_canvas,
        this.m_currentActor.clip().setAlpha(1), this.m_lastFrame = this.m_currentActor.clip().totalFrames) : Application.error("Character::gotoState() - State: [" + a + "] is not registered")
};
Character.prototype.update = function(a) {
    if (this.m_functions && this.worldActor && this.m_functions[this.m_currentState])
        for (var b = 0; b < this.m_functions[this.m_currentState].length; b++)
            if (null !== this.m_functions[this.m_currentState][b][0] && this.m_functions[this.m_currentState][b][1] === this.m_currentActor.clip().currentFrame) {
                this.worldActor[this.m_functions[this.m_currentState][b][0]]();
                break
            }
    if (null !== this.m_currentActor && (this.m_currentActor.setX(this.m_x), this.m_currentActor.setY(this.m_y), this.m_currentActor.update(a),
        this.m_lastFrame - 1 === this.m_currentActor.clip().currentFrame && this.onEndAnimation && this.worldActor)) this.worldActor[this.onEndAnimation](this.m_currentState)
};
Character.prototype.free = function() {
    null !== this.m_currentActor && (this.m_currentActor.free(), this.m_currentActor = null);
    this.worldActor = this.m_states = this.m_functions = this.m_canvas = null
};

function Layout() {}
Layout.ALIGN_TOP_LEFT = 0;
Layout.ALIGN_TOP_CENTER = 1;
Layout.ALIGN_CENTER = 2;
Layout.scale = 1;
Layout.align = 0;
Layout.resizeEnable = !1;
Layout.offsetX = 0;
Layout.offsetY = 0;
Layout.top = 0;
Layout.left = 0;
Layout.width = 0;
Layout.height = 0;
Layout.supports3dTransform = window.WebKitCSSMatrix || window.MSCSSMatrix;
Layout.onResize = function(a, b) {
    Layout.width = Math.floor(a);
    Layout.height = Math.floor(b);
    Layout.resizeEnable && (Layout.scale = Math.min(1 - (1 - a / Application.APP_WIDTH), 1 - (1 - b / Application.APP_HEIGHT)));
    Layout.top = 0;
    Layout.left = 0;
    switch (Layout.align) {
        case Layout.ALIGN_TOP_LEFT:
            Layout.top = 0;
            Layout.left = 0;
            break;
        case Layout.ALIGN_TOP_CENTER:
            Layout.top = 0;
            Layout.left = 0.5 * a - 0.5 * Application.APP_WIDTH * Layout.scale;
            break;
        case Layout.ALIGN_CENTER:
            Layout.top = 0.5 * b - 0.5 * Application.APP_HEIGHT * Layout.scale, Layout.left = 0.5 *
                a - 0.5 * Application.APP_WIDTH * Layout.scale
    }
    Layout.top += Layout.offsetY;
    Layout.left += Layout.offsetX;
    Layout.top = Math.floor(Layout.top);
    Layout.left = Math.floor(Layout.left);
    Layout.scale = Layout.scale.toFixed(2);
    Layout.css("#MainInterfaceAuxiliar", "transform-origin", "0px 0px");
    Layout.css("#MainInterface", "transform-origin", "0px 0px");
    Layout.css("#MainInterfacePopup", "transform-origin", "0px 0px");
    Layout.css("#platform-stage", "transform-origin", "0px 0px");
    Layout.css("#RotateScreen", "transform-origin", "0px 0px");
    Layout.supports3dTransform ? (Layout.css("#platform-stage", "transform", "matrix3d(" + Layout.scale + ",0,0,0, 0," + Layout.scale + ",0,0, 0,0," + Layout.scale + ",0, " + Layout.left + "," + Layout.top + ",0,1)"), Layout.css("#MainInterface", "transform", "matrix3d(" + Layout.scale + ",0,0,0, 0," + Layout.scale + ",0,0, 0,0," + Layout.scale + ",0, " + Layout.left + "," + Layout.top + ",0,1)"), Layout.css("#MainInterfacePopup", "transform", "matrix3d(" + Layout.scale + ",0,0,0, 0," + Layout.scale + ",0,0, 0,0," + Layout.scale + ",0, " + Layout.left + "," + Layout.top +
        ",0,1)"), Layout.css("#MainInterfaceAuxiliar", "transform", "matrix3d(" + Layout.scale + ",0,0,0, 0," + Layout.scale + ",0,0, 0,0," + Layout.scale + ",0, " + Layout.left + "," + Layout.top + ",0,1)"), Layout.css("#RotateScreen", "transform", "matrix3d(" + Layout.scale + ",0,0,0, 0," + Layout.scale + ",0,0, 0,0," + Layout.scale + ",0, " + Layout.left + "," + Layout.top + ",0,1)")) : (Layout.css("#MainInterfaceAuxiliar", "transform", "scale(" + Layout.scale + ", " + Layout.scale + ")"), Layout.css("#MainInterface", "transform", "scale(" + Layout.scale + ", " + Layout.scale +
        ")"), Layout.css("#MainInterfacePopup", "transform", "scale(" + Layout.scale + ", " + Layout.scale + ")"), Layout.css("#platform-stage", "transform", "scale(" + Layout.scale + " , " + Layout.scale + ")"), Layout.css("#RotateScreen", "transform", "scale(" + Layout.scale + " , " + Layout.scale + ")"), Layout.positionCss("#platform-stage", Layout.top, Layout.left), Layout.positionCss("#MainInterface", Layout.top, Layout.left), Layout.positionCss("#MainInterfacePopup", Layout.top, Layout.left), Layout.positionCss("#MainInterfaceAuxiliar", Layout.top,
        Layout.left));
    if (ConsolePanel.instance) ConsolePanel.instance.onResize()
};
Layout.fixPosition = function(a) {
    a.x = Math.floor((a.x - Layout.left) / Layout.scale);
    a.y = Math.floor((a.y - Layout.top) / Layout.scale)
};
Layout.correctPosition = function(a) {
    a.offsetX || (a.offsetX = (a.clientX - Layout.left) / Layout.scale, a.offsetY = (a.clientY - Layout.top) / Layout.scale)
};
Layout.fixTouchEvent = function(a) {
    a.offsetX = a.x = Math.floor((a.clientX - Layout.left) / Layout.scale);
    a.offsetY = a.y = Math.floor((a.clientY - Layout.top) / Layout.scale)
};
Layout.positionCss = function(a, b, c) {
    $(a).css("top", b + "px");
    $(a).css("left", c + "px")
};
Layout.css = function(a, b, c) {
    $(a).css("-ms-" + b, c);
    $(a).css("-webkit-" + b, c);
    $(a).css("-moz-" + b, c);
    $(a).css("-o-" + b, c);
    $(a).css(b, c)
};

function Point(a, b) {
    this.x = "undefined" === typeof a ? 0 : a;
    this.y = "undefined" === typeof b ? 0 : b
}
Point.prototype.distanceTo = function(a, b) {
    return Math.sqrt((a - this.x) * (a - this.x) + (b - this.y) * (b - this.y))
};

function Rectangle(a, b, c, d) {
    this.x = "undefined" !== typeof a ? a : 0;
    this.y = "undefined" !== typeof b ? b : 0;
    this.w = "undefined" !== typeof c ? c : 0;
    this.h = "undefined" !== typeof d ? d : 0
}
Rectangle.prototype.left = function() {
    return this.x
};
Rectangle.prototype.right = function() {
    return this.x + this.w
};
Rectangle.prototype.top = function() {
    return this.y
};
Rectangle.prototype.bottom = function() {
    return this.y + this.h
};
Rectangle.prototype.intersectPoint = function(a, b) {
    return a >= this.x && a <= this.x + this.w && b >= this.y && b <= this.y + this.h
};
Rectangle.prototype.intersectRect = function(a) {
    return this.right() >= a.x && this.x <= a.right() && this.bottom() >= a.y && this.y <= a.bottom()
};
Rectangle.prototype.containsRect = function(a) {
    return a.x >= this.x && a.y >= this.y && a.right() <= this.right() && a.bottom() <= this.bottom()
};
Rectangle.prototype.clone = function() {
    return new Rectangle(this.x, this.y, this.w, this.h)
};
Rectangle.prototype.toString = function() {
    return "x:" + this.x + " y:" + this.y + " w:" + this.w + " h:" + this.h
};

function SScreen(a, b, c) {
    this.screenParent = "undefined" === typeof c ? null : c;
    this.id = GuiManager.instance.m_currentScreenName.concat();
    this.scene = Application.instance.addDisplayContainer();
    Application.instance.core.rootScene.addChild(this.scene);
    this.cssContainer = this.htmlContainer = this.html = this.css = null;
    this.skipCode = 32;
    this.m_x = "undefined" === typeof a ? 0 : a;
    this.m_y = "undefined" === typeof b ? 0 : b;
    this.m_popup = null;
    this.m_spaceBarEnabled = !1;
    this.m_toolTips = null;
    this.setGuiHTML();
    this.init();
    this.scene.addDrawListener(this,
        "onDraw")
}
SScreen.prototype.init = function() {
    $("*").attr("unselectable", "on")
};
SScreen.prototype.onDraw = function(a) {};
SScreen.prototype.setGuiHTML = function() {
    null !== this.html && (this.htmlContainer = null === this.screenParent ? $("#MainInterface") : $("#MainInterfacePopup"), this.htmlContainer.append(this.html));
    if (null !== this.css) {
        this.cssContainer = null === this.screenParent ? $("#MainInterfaceDynamicCss") : $("#MainInterfacePopupDynamicCss");
        var a = document.createElement("style");
        a.type = "text/css";
        a.innerHTML = this.css;
        a = $(a);
        this.cssContainer.append(a)
    }
};
SScreen.prototype.addClickListener = function(a) {
    if (null !== this.htmlContainer) {
        var b = $("#" + a),
            c = this;
        0 < b.length ? b.bind("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            c.onClick(this)
        }) : Application.error("Error[" + this.id + "] object [" + a + "] no found")
    }
};
SScreen.prototype.addMouseDownListener = function(a) {
    if (null !== this.htmlContainer) {
        var b = $("#" + a),
            c = this;
        0 < b.length ? b.mousedown(function() {
            c.onMouseDown(this)
        }) : Application.error("Error[" + this.id + "] object [" + a + "] no found")
    }
};
SScreen.prototype.addMouseUpListener = function(a) {
    if (null !== this.htmlContainer) {
        var b = $("#" + a),
            c = this;
        0 < b.length ? b.mouseup(function() {
            c.onMouseUp(this)
        }) : Application.error("Error[" + this.id + "] object [" + a + "] no found")
    }
};
SScreen.prototype.onClick = function(a) {};
SScreen.prototype.onMouseDown = function(a) {};
SScreen.prototype.onMouseUp = function(a) {};
SScreen.prototype.getPopup = function() {
    return this.m_popup
};
SScreen.prototype.setX = function(a) {};
SScreen.prototype.setY = function(a) {};
SScreen.prototype.activePressBar = function() {
    this.m_spaceBarEnabled = !0
};
SScreen.prototype.onPressSpaceBar = function() {
    this.m_spaceBarEnabled = !1
};
SScreen.prototype.update = function(a) {
    this.m_popup && this.m_popup.update(a)
};
SScreen.prototype.onResize = function(a) {
    if (this.m_popup) this.m_popup.onResize(a)
};
SScreen.prototype.onMouseOver = function(a) {
    if (this.m_popup) this.m_popup.onMouseOver(a)
};
SScreen.prototype.onMouseMove = function(a) {
    if (this.m_popup) this.m_popup.onMouseMove(a)
};
SScreen.prototype.onMouseDown = function(a) {
    if (this.m_popup) this.m_popup.onMouseDown(a)
};
SScreen.prototype.onMouseUp = function(a) {
    if (this.m_popup) this.m_popup.onMouseUp(a)
};
SScreen.prototype.onKeyDown = function(a) {
    if (this.m_popup) this.m_popup.onKeyDown(a);
    if (this.m_spaceBarEnabled && a === this.skipCode) this.onPressSpaceBar()
};
SScreen.prototype.onKeyUp = function(a) {
    if (this.m_popup) this.m_popup.onKeyUp(a)
};
SScreen.prototype.onActivate = function(a) {
    if (this.m_popup) this.m_popup.onActivate(a)
};
SScreen.prototype.addPopup = function(a, b, c) {
    this.dropPopup();
    return this.m_popup = new a(b, c, this)
};
SScreen.prototype.dropPopup = function() {
    this.m_popup && (this.m_popup.free(), this.m_popup = null)
};
SScreen.prototype.destroyToolTips = function() {};
SScreen.prototype.createTooltips = function(a, b, c, d, e) {};
SScreen.prototype.free = function() {
    this.dropPopup();
    this.destroyToolTips();
    this.screenParent = null;
    null !== this.htmlContainer && (this.htmlContainer.empty(), this.htmlContainer = null);
    null !== this.cssContainer && (this.cssContainer.empty(), this.cssContainer = null);
    this.css = this.html = null;
    this.scene && (Application.instance.core.rootScene.removeChild(this.scene), this.scene = null)
};

function ScreenGame(a, b) {
    SScreen.call(this, a, b);
    this.m_game = null;
    this.m_deleteGame = !1
}
goog.inherits(ScreenGame, SScreen);
ScreenGame.prototype.createGame = function() {};
ScreenGame.prototype.free = function() {
    this.m_game && (this.m_game.free(), this.m_game = null);
    ScreenGame.superClass_.free.call(this)
};
ScreenGame.prototype.init = function() {
    ScreenGame.superClass_.init.call(this)
};
ScreenGame.prototype.update = function(a) {
    this.m_game && null === this.m_popup && this.m_game.update(a);
    this.m_popup && this.m_popup.update(a);
    this.m_transition && (this.m_transition.isAwaitingDelete ? (this.m_transition.free(), this.m_transition = null) : this.m_transition.update(a))
};
ScreenGame.prototype.onKeyDown = function(a) {
    ScreenGame.superClass_.onKeyDown.call(this, a);
    if (this.m_game && null == this.m_popup) this.m_game.onKeyDown(a)
};
ScreenGame.prototype.onKeyUp = function(a) {
    ScreenGame.superClass_.onKeyUp.call(this, a);
    if (this.m_game && null == this.m_popup) this.m_game.onKeyUp(a)
};
ScreenGame.prototype.onMouseUp = function(a) {
    ScreenGame.superClass_.onMouseUp.call(this, a);
    if (this.m_game && null == this.m_popup) this.m_game.onMouseUp(a)
};
ScreenGame.prototype.onMouseDown = function(a) {
    ScreenGame.superClass_.onMouseDown.call(this, a);
    if (this.m_game && null == this.m_popup) this.m_game.onMouseDown(a)
};
ScreenGame.prototype.onMouseMove = function(a) {
    ScreenGame.superClass_.onMouseMove.call(this, a);
    if (this.m_game && null == this.m_popup) this.m_game.onMouseMove(a)
};
ScreenGame.prototype.onActivate = function(a) {
    if (this.m_game) this.m_game.onActivate(a)
};

function ScreenManager() {
    this.m_currentScreenName = this.m_currentScreen = this.currentScene = null
}
ScreenManager.prototype.getCurrentScreen = function() {
    return this.m_currentScreen
};
ScreenManager.prototype.getCurrentScreenName = function() {
    return this.m_currentScreenName
};
ScreenManager.prototype.gotoScreen = function(a) {
    this.m_currentScreen && this.m_currentScreen.free();
    this.m_currentScreen = null;
    this.m_currentScreenName = a;
    Application.log("GO TO SCREEN :: " + a)
};
ScreenManager.prototype.update = function(a) {
    a > Application.MAX_DELTA_TIME && (a = Application.MAX_DELTA_TIME);
    this.m_currentScreen && this.m_currentScreen.update(a)
};
ScreenManager.prototype.onResize = function(a) {
    if (this.m_currentScreen) this.m_currentScreen.onResize(a)
};
ScreenManager.prototype.onMouseOver = function(a) {
    if (this.m_currentScreen) this.m_currentScreen.onMouseOver(a)
};
ScreenManager.prototype.onMouseMove = function(a) {
    if (this.m_currentScreen) this.m_currentScreen.onMouseMove(a)
};
ScreenManager.prototype.onMouseDown = function(a) {
    if (this.m_currentScreen) this.m_currentScreen.onMouseDown(a)
};
ScreenManager.prototype.onMouseUp = function(a) {
    if (this.m_currentScreen) this.m_currentScreen.onMouseUp(a)
};
ScreenManager.prototype.onKeyDown = function(a) {
    if (this.m_currentScreen) this.m_currentScreen.onKeyDown(a)
};
ScreenManager.prototype.onKeyUp = function(a) {
    if (this.m_currentScreen) this.m_currentScreen.onKeyUp(a)
};
ScreenManager.prototype.onActivate = function(a) {
    if (this.m_currentScreen) this.m_currentScreen.onActivate(a)
};
ScreenManager.prototype.free = function() {
    this.m_currentScreen && this.m_currentScreen.free();
    this.m_currentScreenName = this.m_currentScreen = null
};

function Vector2D(a, b) {
    this.x = "undefined" === typeof a ? 0 : a;
    this.y = "undefined" === typeof b ? 0 : b
}
Vector2D.prototype.setVector = function(a, b) {
    this.x = a * Math.cos(b);
    this.y = a * Math.sin(b)
};
Vector2D.prototype.distanceTo = function(a, b) {
    return Math.sqrt((a - this.x) * (a - this.x) + (b - this.y) * (b - this.y))
};
Vector2D.prototype.clone = function() {
    return new Vector2D(this.x, this.y)
};
Vector2D.prototype.plus = function(a) {
    return new Vector2D(this.x + a.x, this.y + a.y)
};
Vector2D.prototype.minus = function(a) {
    return new Vector2D(this.x - a.x, this.y - a.y)
};
Vector2D.prototype.orthogonal = function() {
    return new Vector2D(-this.y, this.x)
};
Vector2D.prototype.udir = function() {
    var a = this.clone();
    a.normalize();
    return a
};
Vector2D.prototype.projectionOn = function(a) {
    var b = a.dot(a);
    if (0 == b) return Application.warn("[WARN] Vector2D.projectionOn: zero-length projection vector."), this.clone();
    var c = a.clone();
    c.scale(this.dot(a) / b);
    return c
};
Vector2D.prototype.dot = function(a) {
    return this.x * a.x + this.y * a.y
};
Vector2D.prototype.length = function() {
    return Math.sqrt(this.x * this.x + this.y * this.y)
};
Vector2D.prototype.squaredLength = function() {
    return this.x * this.x + this.y * this.y
};
Vector2D.prototype.copy = function(a) {
    this.x = a.x;
    this.y = a.y
};
Vector2D.prototype.scale = function(a) {
    this.x *= a;
    this.y *= a
};
Vector2D.prototype.normalize = function() {
    var a = this.length();
    0 < a ? (this.x /= a, this.y /= a) : Application.warn("[WARN]: Vector2D.normalize: called on a zero-length vector.")
};
Vector2D.prototype.stretch = function(a) {
    var b = this.length();
    0 < b ? (this.x *= a / b, this.y *= a / b) : Application.warn("[WARN]: Vector2D.stretch: called on a zero-length vector.")
};
Vector2D.prototype.silentNormalize = function() {
    var a = this.length();
    0 < a && (this.x /= a, this.y /= a)
};
Vector2D.prototype.add = function(a) {
    this.x += a.x;
    this.y += a.y
};
Vector2D.prototype.subtract = function(a) {
    this.x -= a.x;
    this.y -= a.y
};
Vector2D.prototype.product = function(a) {
    return this.y * a.x - this.x * a.y
};
Vector2D.prototype.angle = function() {
    return Math.atan2(this.y, this.x)
};
Vector2D.prototype.toString = function() {
    return "V2D x:" + this.x + " y:" + this.y
};

function SGame(a) {
    SGame.instance = this;
    this.m_canvas = a;
    this.m_hud = null;
    this.m_score = this.m_lives = 0;
    this.m_isAwaitingDelete = this.m_isAwaitReset = !1;
    this.init()
}
SGame.instance = null;
SGame.prototype.init = function() {};
SGame.prototype.update = function(a) {
    this.m_hud && this.m_hud.update(a)
};
SGame.prototype.onKeyDown = function(a) {};
SGame.prototype.onKeyUp = function(a) {};
SGame.prototype.onActivate = function(a) {};
SGame.prototype.onMouseOver = function(a) {};
SGame.prototype.onMouseDown = function(a) {};
SGame.prototype.onMouseMove = function(a) {};
SGame.prototype.onMouseUp = function(a) {};
SGame.prototype.onMouseOutWindow = function(a) {};
SGame.prototype.onTouchStart = function(a, b, c) {};
SGame.prototype.onTouchMove = function(a, b, c) {};
SGame.prototype.onTouchEnd = function(a, b, c) {};
SGame.prototype.free = function() {
    this.m_hud && this.m_hud.free();
    this.m_hud = null
};

function DataMovement(a, b) {
    this.isReverse = this.isLoop = !1;
    this.speed = 0;
    this.motionParams = null;
    var c = Common.getParams(a);
    this.isLoop = 1 == parseInt(c.loop, 10);
    this.isReverse = 1 == parseInt(c.reverse, 10);
    this.speed = parseFloat(c.speed);
    this.setMotionParams(b)
}
DataMovement.prototype.setMotionParams = function(a) {
    this.motionParams = [];
    a = a.split(";");
    for (var b = 0; b < a.length;) {
        var c = [],
            d = a[b].split(":");
        if (2 > d.length) Application.error("DataMovement::setMotionParams(): " + a[b]);
        else {
            c.push(d[0]);
            for (var d = d[1].split(","), e = 0; e < d.length;) c.push(d[e]), ++e;
            this.motionParams.push(c)
        }++b
    }
};
DataMovement.prototype.free = function() {
    this.motionParams = null
};

function Clip(a, b, c, d, e, f, g, h, k, l, m, n) {
    this.parent = null;
    this.isAwaitingDeletion = !1;
    this.x = "undefined" !== typeof a ? a : 0;
    this.y = "undefined" !== typeof b ? b : 0;
    this.width = "undefined" !== typeof d ? d : 0;
    this.height = "undefined" !== typeof e ? e : 0;
    f = "undefined" !== typeof f ? f : [];
    g = "undefined" !== typeof g ? g : 0;
    this.cx = "undefined" !== typeof h ? h : 0;
    this.cy = "undefined" !== typeof k ? k : 0;
    this.centerX = h;
    this.centerY = k;
    this.ratio = Math.sqrt(this.cx * this.cx + this.cy * this.cy);
    this.offsetRotationY = this.offsetRotationX = 0;
    l = "undefined" !==
        typeof l ? l : "";
    m = "undefined" !== typeof m ? m : "";
    n = "undefined" !== typeof n ? n : "";
    this.rotation = 0;
    this.sprite = new SSprite(this.width, this.height);
    this.scaleY = this.scaleX = 1;
    this.m_name = c;
    this.m_bounds = null;
    this.m_stopped = !1;
    this.m_loop = !0;
    this.m_layers = [];
    "undefined" !== typeof c && (this.sprite.setImage(Application.instance.core.assets[Global.URL_ASSETS + c]), "" != m && (a = Common.getParams(m), this.bounds = this.m_bounds = new Rectangle(parseInt(a.x, 10), parseInt(a.y, 10), parseInt(a.w, 10), parseInt(a.h, 10))), "" != l && (a = Common.getParams(l),
        this.collision = new Rectangle(parseInt(a.x, 10), parseInt(a.y, 10), parseInt(a.w, 10), parseInt(a.h, 10))), "" != n && (a = Common.getParams(n), this.boundsAttack = new Rectangle(parseInt(a.x, 10), parseInt(a.y, 10), parseInt(a.w, 10), parseInt(a.h, 10))));
    this.frames = f;
    this.sprite.setPosition(this.x - this.centerX, this.y - this.centerY);
    this.sprite.setFrame(this.frames[0]);
    this.m_changeTimeCounter = 0;
    this.m_changeTime = 1 / g;
    this.m_changeTime *= 1E3;
    this.currentFrame = 0;
    this.totalFrames = f.length
}
Clip.prototype.free = function() {
    null !== this.sprite && this.sprite.remove();
    this.sprite = null;
    for (var a in this) this[a] = null
};
Clip.prototype.layers = function() {
    return this.m_layers
};
Clip.prototype.stop = function() {
    this.m_stopped = !0
};
Clip.prototype.gotoFrame = function(a) {
    this.currentFrame != a && (this.currentFrame = a, this.sprite.setFrame(this.frames[this.currentFrame]))
};
Clip.prototype.gotoAndStop = function(a) {
    this.gotoFrame(a - 1);
    this.stop()
};
Clip.prototype.gotoAndPlay = function(a, b) {
    this.gotoFrame(a - 1);
    this.m_loop = b;
    this.play()
};
Clip.prototype.play = function() {
    this.m_stopped = !1
};
Clip.prototype.update = function(a) {
    this.m_stopped || (this.m_changeTimeCounter += a, this.m_changeTimeCounter >= this.m_changeTime && (this.m_changeTimeCounter -= this.m_changeTime, this.currentFrame >= this.totalFrames - 1 ? this.m_loop ? this.currentFrame = 0 : (this.m_loop = !1, this.stop()) : this.currentFrame++, this.sprite._setFrame(this.frames[this.currentFrame])))
};
Clip.prototype.setOnAnimationEnd = function(a) {
    this.m_onAnimationEnd = a
};
Clip.prototype.setLoop = function(a) {
    this.m_loop = a
};
Clip.prototype.hitTest = function(a) {
    return this.sprite.intersect(a.sprite)
};
Clip.prototype.getPosition = function(a, b) {
    return new Vector2D(this.x, this.y)
};
Clip.prototype.getBounds = function() {
    return this.m_bounds
};
Clip.prototype.getGlobalBounds = function() {
    return this.m_bounds ? new Rectangle(this.x + this.m_bounds.x, this.y + this.m_bounds.y, this.m_bounds.w, this.m_bounds.h) : null
};
Clip.prototype.setPosition = function(a, b) {
    this.setX(a);
    this.setY(b)
};
Clip.prototype.setX = function(a) {
    this.x = a;
    this.sprite.setX(this.x - this.centerX)
};
Clip.prototype.setY = function(a) {
    this.y = a;
    this.sprite.setY(this.y - this.centerY)
};
Clip.prototype.setRotation = function(a) {
    this.rotation = a;
    this.sprite.originX = this.cx;
    this.sprite.originY = this.cy;
    this.rotation = a;
    this.sprite.setRotation(a)
};
Clip.prototype.setScale = function(a, b) {
    this.scaleX = a;
    this.scaleY = b;
    this.sprite.setScale(a, b)
};
Clip.prototype.setScaleX = function(a) {
    this.scaleX = a;
    this.sprite.setScaleX(a);
    this.centerX = 0 < a ? this.cx : this.width - this.cx
};
Clip.prototype.setScaleY = function(a) {
    this.scaleY = a;
    this.sprite.setScaleY(a);
    this.centerY = 0 < a ? this.cy : this.height - this.cy
};
Clip.prototype.resize = function(a, b) {
    this.setScale(a / this.width, b / this.height)
};
Clip.prototype.setVisible = function(a) {
    this.sprite.visible = a
};
Clip.prototype.isVisible = function() {
    return this.sprite.visible
};
Clip.prototype.setAlpha = function(a) {
    this.sprite.opacity = parseFloat(a)
};
Clip.prototype.getAlpha = function() {
    return this.sprite.opacity
};
Clip.prototype.getGlobalX = function() {
    return null === this.parent ? this.x : this.x + this.parent.getGlobalX()
};
Clip.prototype.getGlobalY = function() {
    return null === this.parent ? this.y : this.y + this.parent.getGlobalY()
};
Clip.prototype.nextFrame = function() {
    this.gotoFrame(this.currentFrame + 1);
    this.stop()
};

function SCC_WorldActor(a, b, c, d, e, f) {
    this.m_magic = this.m_health = this.m_depth = this.m_tempPosY = this.m_tempPosX = this.m_oldY = this.m_oldX = this.m_y = this.m_x = this.m_state = 0;
    this.m_scaleBounds = this.m_scaleY = this.m_scaleX = this.m_scale = 1;
    this.m_collisionDisplay = this.m_manager = this.m_character = this.m_clip = this.m_boundsAttack = this.m_boundsCollision = this.m_bounds = null;
    this.m_hitDepthRange = SCC_WorldActor.DEPTH_RANGE;
    this.m_canvas = a;
    this.m_world = b;
    this.m_isAwaitingDelete = this.m_flipX = this.m_limitRight = this.m_limitLeft =
        this.m_limitUp = this.m_limitBottom = this.m_collisionVisible = this.m_isVehicle = this.m_isIdle = !1;
    this.m_isRangeControlled = !0;
    this.m_limitRight = this.m_limitLeft = this.m_limitUp = this.m_limitBottom = this.m_isFallingOverWall = !1;
    this.m_id = SCC_WorldActor.ID_UNUSED;
    this.setActorClip(f);
    this.setPosition(c, d);
    this.m_className = ""
}
SCC_WorldActor.prototype.setScaleBounds = function(a) {
    this.m_scaleBounds = a
};
SCC_WorldActor.prototype.setHitDepthRange = function(a) {
    this.m_hitDepthRange = a
};
SCC_WorldActor.prototype.setDepth = function(a) {
    this.m_character && this.m_character.setDepth(a)
};
SCC_WorldActor.prototype.getClassName = function() {
    return this.m_className
};
SCC_WorldActor.prototype.getHealth = function() {
    return this.m_health
};
SCC_WorldActor.prototype.setHealth = function(a) {
    this.m_health = a
};
SCC_WorldActor.prototype.isAwaitingDelete = function() {
    return this.m_isAwaitingDelete
};
SCC_WorldActor.prototype.isFallingOverWall = function() {
    return this.m_isFallingOverWall
};
SCC_WorldActor.prototype.isVehicle = function() {
    return this.m_isVehicle
};
SCC_WorldActor.prototype.setAwaitingDelete = function(a) {
    this.m_isAwaitingDelete = a
};
SCC_WorldActor.prototype.setRangeControlled = function(a) {
    this.m_isRangeControlled = a
};
SCC_WorldActor.prototype.setFallingOverWall = function(a) {
    this.m_isFallingOverWall = a
};
SCC_WorldActor.prototype.setManager = function(a) {
    this.m_manager = a
};
SCC_WorldActor.prototype.clip = function() {
    return this.m_clip
};
SCC_WorldActor.prototype.bounds = function() {
    return this.m_bounds
};
SCC_WorldActor.prototype.world = function() {
    return this.m_world
};
SCC_WorldActor.prototype.limitBottom = function() {
    return this.m_limitBottom
};
SCC_WorldActor.prototype.limitUp = function() {
    return this.m_limitUp
};
SCC_WorldActor.prototype.limitLeft = function() {
    return this.m_limitLeft
};
SCC_WorldActor.prototype.limitRight = function() {
    return this.m_limitRight
};
SCC_WorldActor.prototype.isIdle = function() {
    return this.m_isIdle
};
SCC_WorldActor.prototype.depth = function() {
    return this.m_depth
};
SCC_WorldActor.prototype.scale = function() {
    return this.m_scale
};
SCC_WorldActor.prototype.x = function() {
    return this.m_x
};
SCC_WorldActor.prototype.y = function() {
    return this.m_y
};
SCC_WorldActor.prototype.flipX = function() {
    return this.m_flipX
};
SCC_WorldActor.prototype.id = function() {
    return this.m_id
};
SCC_WorldActor.prototype.canvas = function() {
    return this.m_canvas
};
SCC_WorldActor.prototype.setActorClip = function(a) {
    a = "undefined" === typeof a ? null : a;
    null !== a && (this.m_clip = Application.instance.getClip(a), this.m_canvas.addChild(this.m_clip.sprite), this.m_clip.parent = this.m_canvas)
};
SCC_WorldActor.prototype.setPositionPoint = function(a) {
    this.m_oldX = this.m_x = a.x;
    this.m_oldY = this.m_y = a.y
};
SCC_WorldActor.prototype.setPosition = function(a, b) {
    this.m_oldX = this.m_x = a;
    this.m_oldY = this.m_y = b
};
SCC_WorldActor.prototype.setX = function(a) {
    this.m_oldX = this.m_x = a
};
SCC_WorldActor.prototype.setY = function(a) {
    this.m_oldY = this.m_y = a
};
SCC_WorldActor.prototype.setFlipX = function(a) {
    this.m_flipX = a;
    null !== this.m_clip && (this.m_flipX && 0 < this.m_clip.sprite.getScaleX() || !this.m_flipX && 0 > this.m_clip.sprite.getScaleX()) && this.m_clip.setScaleX(-this.m_clip.scaleX)
};
SCC_WorldActor.prototype.setScale = function(a) {
    this.m_scale != a && (null !== this.m_clip && (this.m_clip.scaleX = a, this.m_clip.scaleY = a, this.m_clip.sprite.setScale(this.m_flipX ? -a : a, a)), this.m_scaleY = this.m_scaleX = this.m_scale = a)
};
SCC_WorldActor.prototype.setScaleX = function(a) {
    this.m_scaleX != a && (null !== this.m_clip && this.m_clip.sprite.setScaleX(this.m_flipX ? -a : a), this.m_scaleX = a)
};
SCC_WorldActor.prototype.setScaleY = function(a) {
    this.m_scaleY != a && (null !== this.m_clip && this.m_clip.sprite.setScaleY(a), this.m_scaleY = a)
};
SCC_WorldActor.prototype.setScaleXY = function(a, b) {
    this.setScaleX(a);
    this.setScaleY(b)
};
SCC_WorldActor.prototype.resize = function(a, b) {
    null !== this.m_clip && this.setScaleXY(a / this.m_clip.width, b / this.m_clip.height)
};
SCC_WorldActor.prototype.getBounds = function() {
    return null !== this.m_bounds ? new Rectangle(parseFloat(this.m_x + this.m_bounds.x), parseFloat(this.m_y + this.m_bounds.y), this.m_bounds.w, this.m_bounds.h) : null
};
SCC_WorldActor.prototype.getBoundsCollision = function() {
    return null !== this.m_boundsCollision ? new Rectangle(parseFloat(this.m_x + this.m_boundsCollision.x), parseFloat(this.m_y + this.m_boundsCollision.y), this.m_boundsCollision.w, this.m_boundsCollision.h) : null
};
SCC_WorldActor.prototype.getBoundsAttack = function() {
    return null !== this.m_boundsAttack ? new Rectangle(parseFloat(this.m_x + this.m_boundsAttack.x), parseFloat(this.m_y + this.m_boundsAttack.y), this.m_boundsAttack.w, this.m_boundsAttack.h) : null
};
SCC_WorldActor.prototype.updateBounds = function() {
    var a = null,
        b = 0,
        c = 0;
    this.m_clip.getBounds() && (a = this.m_clip.getBounds());
    null !== a ? (b = this.m_scaleX * this.m_scaleBounds, c = this.m_scaleY * this.m_scaleBounds, this.m_scaleX == this.m_scaleY && (this.m_scale = this.m_scaleX), this.m_bounds = new Rectangle(b * (this.m_flipX ? -a.x - a.w : a.x), c * a.y, b * a.w, c * a.h)) : this.m_bounds = null;
    "undefined" !== typeof this.m_clip.collision && (a = this.m_clip.collision);
    null !== a ? (b = this.m_scaleX, c = this.m_scaleY, this.m_scaleX == this.m_scaleY && (this.m_scale =
        this.m_scaleX), this.m_boundsCollision = new Rectangle(b * (this.m_flipX ? -a.x - a.w : a.x), c * a.y, b * a.w, c * a.h)) : this.m_boundsCollision = null;
    "undefined" !== typeof this.m_clip.boundsAttack && (a = this.m_clip.boundsAttack);
    null !== a ? (b = this.m_scaleX, c = this.m_scaleY, this.m_scaleX == this.m_scaleY && (this.m_scale = this.m_scaleX), this.m_boundsAttack = new Rectangle(b * (this.m_flipX ? -a.x - a.w : a.x), c * a.y, b * a.w, c * a.h)) : this.m_boundsAttack = null
};
SCC_WorldActor.prototype.gotoState = function(a) {
    a != this.m_state && (this.characterGotoState(a), this.m_state = a)
};
SCC_WorldActor.prototype.characterGotoState = function(a) {
    a !== this.m_state && (null !== this.m_clip && (this.m_tempPosX = this.m_clip.x, this.m_tempPosY = this.m_clip.y), this.m_character.gotoState(a), this.m_clip = this.m_character.actor().clip(), this.m_clip.setScaleX(this.m_flipX ? -this.m_scaleX : this.m_scaleX), this.m_clip.setScaleY(this.m_scaleY), this.m_clip.setX(this.m_tempPosX), this.m_clip.setY(this.m_tempPosY), null !== this.m_manager && (this.m_collisionVisible = this.m_manager.collisionsOn()), this.showCollision(this.m_collisionVisible))
};
SCC_WorldActor.prototype.update = function(a) {
    this.m_clip && (this.m_clip.setX(this.m_x - this.m_world.camera().x()), this.m_clip.setY(this.m_y - this.m_world.camera().y()));
    null !== this.m_collisionDisplay && (this.m_collisionDisplay.x = this.m_x - this.m_world.camera().x(), this.m_collisionDisplay.y = this.m_y - this.m_world.camera().y())
};
SCC_WorldActor.prototype.isInCamera = function(a) {
    return this.m_x + this.m_bounds.w / 3 > a.x() && this.m_x - this.m_bounds.w / 3 < a.x() + a.width && this.m_y > a.y() && this.m_y - this.m_bounds.h < a.y() + a.height
};
SCC_WorldActor.prototype.showInCamera = function(a) {
    this.m_character.setX(this.m_x - a.x());
    this.m_character.setY(this.m_y - a.y());
    null !== this.m_collisionDisplay && (this.m_collisionDisplay.x = this.m_x - a.x(), this.m_collisionDisplay.y = this.m_y - a.y())
};
SCC_WorldActor.prototype.hitTestBoundsPoint = function(a, b) {
    if (null !== this.m_bounds) {
        var c = new Rectangle(this.m_bounds.x, this.m_bounds.y, this.m_bounds.w, this.m_bounds.h);
        c.x += this.m_x;
        c.y += this.m_y;
        return c.intersectPoint(a, b)
    }
    return !1
};
SCC_WorldActor.prototype.hitTestCollisionPoint = function(a, b) {
    if (null !== this.m_boundsCollision) {
        var c = new Rectangle(this.m_boundsCollision.x, this.m_boundsCollision.y, this.m_boundsCollision.w, this.m_boundsCollision.h);
        c.x += this.m_x;
        c.y += this.m_y;
        return c.intersectPoint(a, b)
    }
    return !1
};
SCC_WorldActor.prototype.hitTestAttack = function(a) {
    if (null !== this.m_bounds) {
        if (Math.abs(this.m_y - a.y()) > this.m_hitDepthRange) return !1;
        var b = new Rectangle(this.m_bounds.x, this.m_bounds.y, this.m_bounds.w, this.m_bounds.h);
        b.x += this.m_x;
        b.y += this.m_y;
        a = a.getBoundsAttack();
        if (null !== a) return b.intersectRect(a)
    }
    return !1
};
SCC_WorldActor.prototype.hitTestCollision = function(a) {
    if (null !== this.m_boundsCollision) {
        if (Math.abs(this.m_y - a.y()) > this.m_hitDepthRange) return !1;
        var b = new Rectangle(this.m_boundsCollision.x, this.m_boundsCollision.y, this.m_boundsCollision.w, this.m_boundsCollision.h);
        b.x += this.m_x;
        b.y += this.m_y;
        a = a.getBounds();
        if (null !== a) return b.intersectRect(a)
    }
    return !1
};
SCC_WorldActor.prototype.hitTest = function(a) {
    if (null !== this.m_bounds) {
        if (Math.abs(this.m_y - a.y()) > this.m_hitDepthRange) return !1;
        var b = new Rectangle(this.m_bounds.x, this.m_bounds.y, this.m_bounds.w, this.m_bounds.h);
        b.x += this.m_x;
        b.y += this.m_y;
        a = a.getBounds();
        if (null !== a) return b.intersectRect(a)
    }
    return !1
};
SCC_WorldActor.prototype.showCollision = function(a) {
    (this.m_collisionVisible = a) ? (null === this.m_collisionDisplay && (this.m_collisionDisplay = new SNode), this.m_world.canvas.addChild(this.m_collisionDisplay), this.m_collisionDisplay.addDrawListener(this, "onDraw")) : null !== this.m_collisionDisplay && this.m_world.canvas.removeChild(this.m_collisionDisplay)
};
SCC_WorldActor.prototype.onDraw = function(a) {
    null !== this.m_bounds && SGraphics.drawRectangle(a, this.m_bounds.x, this.m_bounds.y, this.m_bounds.w, this.m_bounds.h, 2, Common.COLOR_RED, Common.COLOR_NONE);
    null !== this.m_boundsCollision && SGraphics.drawRectangle(a, this.m_boundsCollision.x, this.m_boundsCollision.y, this.m_boundsCollision.w, this.m_boundsCollision.h, 2, Common.COLOR_BLUE, Common.COLOR_BLUE);
    null !== this.m_boundsAttack && SGraphics.drawRectangle(a, this.m_boundsAttack.x, this.m_boundsAttack.y, this.m_boundsAttack.w,
        this.m_boundsAttack.h, 2, Common.COLOR_RED, Common.COLOR_RED)
};
SCC_WorldActor.prototype.onIdle = function(a) {
    this.m_isIdle = a;
    null !== this.m_clip && this.m_clip.setVisible(!a)
};
SCC_WorldActor.prototype.onMouseDown = function(a) {};
SCC_WorldActor.prototype.onMouseUp = function(a) {};
SCC_WorldActor.prototype.free = function() {
    null !== this.m_character && (this.m_character.free(), this.m_clip = this.m_character = null);
    null !== this.m_clip && (this.m_clip.parent.removeChild(this.m_clip.sprite), this.m_clip.free(), this.m_clip = null);
    this.m_manager = this.m_world = this.m_canvas = this.m_bounds = null
};
SCC_WorldActor.DEPTH_RANGE_BOMB = 500;
SCC_WorldActor.DEPTH_RANGE = 50;
SCC_WorldActor.ID_UNUSED = -1;

function SCC_Camera(a, b, c, d, e, f, g) {
    this.m_x = "undefined" !== typeof f ? f : 0;
    this.m_y = "undefined" !== typeof g ? g : 0;
    this.m_world = a;
    this.m_fixedX = this.m_world.cameraXMin == this.m_world.cameraXMax;
    this.m_fixedY = this.m_world.cameraYMax == this.m_world.cameraYMin;
    this.m_collision = null;
    this.m_movementType = SCC_Camera.MOVEMENT_ACTOR;
    this.targetCallback = this.onEndWait = this.onEndMovement = null;
    this.m_waitTime = 0;
    this.width = b;
    this.height = c;
    this.screenX = "undefined" !== typeof d ? d : 0;
    this.screenY = "undefined" !== typeof e ? e : 0;
    this.leftLimit =
        Math.round(this.m_world.cameraXMin * this.width);
    this.rightLimit = Math.round(this.m_world.cameraXMax * this.width);
    this.upLimit = Math.round(this.m_world.cameraYMin * this.height);
    this.downLimit = Math.round(this.m_world.cameraYMax * this.height);
    this.parallaxX = this.m_world.width() > this.width;
    this.parallaxY = this.m_world.height() > this.height
}
SCC_Camera.prototype.setCameraMode = function(a) {
    this.m_movementType = a
};
SCC_Camera.prototype.doWait = function(a) {
    this.m_movementType = SCC_Camera.MOVEMENT_WAIT;
    this.m_waitTime = a
};
SCC_Camera.prototype.gotoPosition = function(a, b, c) {
    this.m_linearMove = new LinearMovement(this.m_x, this.m_y, c);
    this.m_linearMove.set_endCallback("removeLinearMove");
    this.m_linearMove.targetActor = this;
    this.m_linearMove.gotoPosition(a, b);
    this.m_movementType = SCC_Camera.MOVEMENT_FOLLOW
};
SCC_Camera.prototype.removeLinearMove = function() {
    this.m_linearMove && this.m_linearMove.free();
    this.m_linearMove = null;
    if (this.onEndMovement && this.targetCallback) this.targetCallback[this.onEndMovement]()
};
SCC_Camera.prototype.x = function() {
    return this.m_x
};
SCC_Camera.prototype.y = function() {
    return this.m_y
};
SCC_Camera.prototype.setX = function(a) {
    this.m_x = a
};
SCC_Camera.prototype.setY = function(a) {
    this.m_y = a
};
SCC_Camera.prototype.scale = function() {
    return this.m_world.canvas().scaleX
};
SCC_Camera.prototype.update = function(a) {
    switch (this.m_movementType) {
        case SCC_Camera.MOVEMENT_ACTOR:
            this.m_fixedX ? this.m_x = this.m_world.getUpdateableObject().x() - this.leftLimit : (this.m_x + this.leftLimit > this.m_world.getUpdateableObject().x() && (this.m_x = this.m_world.getUpdateableObject().x() - this.leftLimit), this.m_x + this.rightLimit < this.m_world.getUpdateableObject().m_x && (this.m_x = this.m_world.getUpdateableObject().x() - this.rightLimit));
            this.m_fixedY ? this.m_y = this.m_world.getUpdateableObject().y() - this.upLimit :
                (this.m_y + this.upLimit > this.m_world.getUpdateableObject().y() && (this.m_y = this.m_world.getUpdateableObject().y() - this.upLimit), this.m_y + this.downLimit < this.m_world.getUpdateableObject().y() && (this.m_y = this.m_world.getUpdateableObject().y() - this.downLimit));
            break;
        case SCC_Camera.MOVEMENT_FOLLOW:
            null !== this.m_linearMove && (this.m_x = this.m_linearMove.x(), this.m_y = this.m_linearMove.y(), this.m_linearMove.update(a));
            break;
        case SCC_Camera.MOVEMENT_WAIT:
            if (this.m_waitTime -= a, 0 > this.m_waitTime && (this.m_movementType =
                SCC_Camera.MOVEMENT_FOLLOW, this.onEndWait && this.targetCallback)) this.targetCallback[this.onEndWait]()
    }
    0 > this.m_x ? this.m_x = 0 : this.m_x > this.m_world.width() - this.width && (this.m_x = this.m_world.width() - this.width);
    0 > this.m_y ? this.m_y = 0 : this.m_y > this.m_world.height() - this.height && (this.m_y = this.m_world.height() - this.height)
};
SCC_Camera.prototype.onEndMove = function(a) {};
SCC_Camera.prototype.setScale = function(a) {
    this.m_world.setScale(a)
};
SCC_Camera.prototype.showCollision = function(a) {
    a ? (this.m_collision && (this.m_world.canvas.removeChild(this.m_collision), this.m_collision = null), this.m_collision = new SNode, this.m_world.canvas.addChild(this.m_collision), this.m_collision.addDrawListener(this, "onDraw")) : this.m_collision && (this.m_world.canvas.removeChild(this.m_collision), this.m_collision = null)
};
SCC_Camera.prototype.onDraw = function(a) {
    SGraphics.drawRectangle(a, 0, 0, this.width, this.height, 4, Common.COLOR_RED, Common.COLOR_NONE)
};
SCC_Camera.prototype.free = function() {
    this.m_collision && (this.m_world = null);
    this.m_world = null
};
SCC_Camera.MAX_DISTANCE_MOVE = 40;
SCC_Camera.REPOSITION_SPEED = 0.25;
SCC_Camera.MOVEMENT_FOLLOW = 1;
SCC_Camera.MOVEMENT_ACTOR = 2;
SCC_Camera.MOVEMENT_WAIT = 3;

function SCC_Npc() {
    this.y = this.x = this.id = 0;
    this.canvas = null;
    this.params = ""
}
SCC_Npc.prototype.free = function() {
    this.canvas = null
};

function SCC_NpcManager(a) {
    this.m_maxIndex = this.m_minIndex = this.m_maxX = this.m_minX = 0;
    this.m_updateableObject = null;
    this.m_world = a;
    this.m_height = this.m_width = 0;
    this.m_showCollisions = !1;
    this.m_buffer = [];
    this.m_actors = [];
    this.visibleWidth = 1E3;
    this.visibleHeight = 600
}
SCC_NpcManager.prototype.init = function() {};
SCC_NpcManager.prototype.collisionsOn = function() {
    return this.m_showCollisions
};
SCC_NpcManager.prototype.getActors = function() {
    return this.m_actors
};
SCC_NpcManager.prototype.showCollisions = function(a) {
    this.m_showCollisions = a;
    for (var b = 0; b < this.m_actors.length; b++) this.m_actors[b].showCollision(a)
};
SCC_NpcManager.prototype.addNpc = function(a) {
    0 < this.m_buffer.length && a.x < this.m_buffer[this.m_buffer.length - 1].x && Application.warn("add: objects are not sorted");
    this.m_buffer.push(a)
};
SCC_NpcManager.prototype.add = function(a) {
    a.setManager(this);
    this.m_actors.push(a);
    return a
};
SCC_NpcManager.prototype.setUpdateableObject = function(a) {
    this.m_updateableObject = a
};
SCC_NpcManager.prototype.getUpdateableObject = function() {
    return this.m_updateableObject
};
SCC_NpcManager.prototype.update = function(a) {
    for (var b = 0; b < this.m_actors.length; b++) this.m_actors[b].isAwaitingDelete() ? (this.m_actors[b].free(), this.m_actors[b] = null, this.m_actors.splice(b--, 1)) : this.m_actors[b].update(a)
};
SCC_NpcManager.prototype.reset = function() {
    for (var a = 0; a < this.m_actors.length; a++) this.m_actors[a].free(), this.m_actors[a] = null;
    this.m_actors = null;
    this.m_actors = []
};
SCC_NpcManager.prototype.free = function() {
    for (var a = 0; a < this.m_actors.length; a++) this.m_buffer[a].free();
    this.m_buffer = null;
    for (a = 0; a < this.m_actors.length; a++) this.m_actors[a].free(), this.m_actors[a] = null;
    this.m_world = this.m_actors = null
};

function SCC_Player(a, b, c, d) {
    SCC_WorldActor.call(this, a, b, c, d);
    this.m_debugCollisionOn = this.m_isDead = this.m_isInvulnerable = !1;
    this.m_state = "";
    this.m_timeToIdle = 0
}
goog.inherits(SCC_Player, SCC_WorldActor);
SCC_Player.ST_PLAYER_STAND = "st100";
SCC_Player.ST_PLAYER_STAND_2 = "st101";
SCC_Player.ST_PLAYER_WALK = "st102";
SCC_Player.ST_PLAYER_RUN = "st103";
SCC_Player.ST_PLAYER_HIT = "st106";
SCC_Player.ST_PLAYER_LOSE = "st107";
SCC_Player.ST_PLAYER_WIN = "st108";
SCC_Player.prototype.isInvulnerable = function() {
    return this.m_isInvulnerable
};
SCC_Player.prototype.isDead = function() {
    return this.m_isDead
};
SCC_Player.prototype.setIsDead = function(a) {
    this.m_isDead = a
};
SCC_Player.prototype.state = function() {
    return this.m_state
};
SCC_Player.prototype.character = function() {
    return this.m_character
};
SCC_Player.prototype.factorSpeedX = function() {
    return this.m_factorSpeedX
};
SCC_Player.prototype.setFactorSpeedX = function(a) {
    this.m_factorSpeedX = a
};
SCC_Player.prototype.factorSpeedY = function() {
    return this.m_factorSpeedY
};
SCC_Player.prototype.setFactorSpeedY = function(a) {
    this.m_factorSpeedY = a
};
SCC_Player.prototype.gotoState = function(a) {
    if (a !== this.m_state) {
        this.characterGotoState(a);
        switch (a) {
            case SCC_Player.ST_PLAYER_STAND:
                this.m_timeToIdle = 0
        }
        this.m_clip = this.m_character.getActor().clip();
        this.m_scaleX == this.m_scaleY ? (this.m_clip.setScaleX(this.m_flipX ? -this.m_scale : this.m_scale), this.m_clip.setScaleY(this.m_scale)) : (this.m_clip.setScaleX(this.m_flipX ? -this.m_scaleX : this.m_scaleX), this.m_clip.setScaleY(this.m_scaleY));
        this.m_state = a;
        this.showCollision(this.m_collisionVisible)
    }
};
SCC_Player.prototype.characterGotoState = function(a) {
    a !== this.m_state && (null !== this.m_clip && (this.m_tempPosX = this.m_clip.x, this.m_tempPosY = this.m_clip.y), this.m_character.gotoState(a), this.m_clip = this.m_character.actor().clip(), this.m_clip.setScaleX(this.m_flipX ? -this.m_scaleX : this.m_scaleX), this.m_clip.setScaleY(this.m_scaleY), this.m_clip.setX(this.m_tempPosX), this.m_clip.setY(this.m_tempPosY), null !== this.m_manager && (this.m_collisionVisible = this.m_manager.collisionsOn()), this.updateBounds(), this.showCollision(this.m_collisionVisible))
};
SCC_Player.prototype.onEndAnimation = function(a) {
    a == SCC_Player.ST_PLAYER_STAND ? (Math.random(), this.m_timeToIdle > SCC_Player.TIME_TO_IDLE && this.gotoState(SCC_Player.ST_PLAYER_STAND_2)) : a == SCC_Player.ST_PLAYER_STAND_2 && this.gotoState(SCC_Player.ST_PLAYER_STAND)
};
SCC_Player.prototype.update = function(a) {
    this.m_character.update(a);
    this.m_state == SCC_Player.ST_PLAYER_STAND && (this.m_timeToIdle += a)
};
SCC_Player.prototype.resetMovement = function() {
    this.m_oldX = this.m_x;
    this.m_oldY = this.m_y
};
SCC_Player.prototype.toogleDebugCollision = function() {
    this.m_debugCollisionOn = !this.m_debugCollisionOn;
    Application.log("Player collision: " + this.m_debugCollisionOn)
};
SCC_Player.prototype.free = function() {
    SCC_Player.superClass_.free.call(this)
};
SCC_Player.TIME_TO_IDLE = 5E3;

function SCC_World(a, b) {
    this.playerInitY = this.playerInitX = 0;
    this.showCollisions = !1;
    this.cameraInitY = this.cameraInitX = this.cameraXMin = this.cameraXMax = this.cameraYMin = this.cameraYMax = this.cameraScreenY = this.cameraScreenX = this.cameraHeight = this.cameraWidth = 0;
    this.useEmbeddedAssets = !1;
    this.m_rangeTilesBelow = 0;
    this.m_game = b;
    this.m_layers = [];
    this.m_playerCanvas = null;
    this.m_objectsCanvas = [];
    this.m_player = this.m_objectsCanvas[0] = null;
    this.m_layerNames = [];
    this.m_markers = null;
    this.m_pointY = this.m_pointX = this.m_height =
        this.m_width = 0;
    this.m_effectManager = this.m_worldData = this.m_actorManager = this.m_camera = null;
    this.canvas = a
}
SCC_World.prototype.game = function() {
    return this.m_game
};
SCC_World.prototype.setScale = function(a) {
    this.setScaleX(a);
    this.setScaleY(a)
};
SCC_World.prototype.setScaleX = function(a) {
    for (var b = 0; b < this.m_layers.length; b++) this.m_layers[b].setScaleX(a)
};
SCC_World.prototype.setScaleY = function(a) {
    for (var b = 0; b < this.m_layers.length; b++) this.m_layers[b].setScaleY(a)
};
SCC_World.prototype.setX = function(a) {
    for (var b = 0; b < this.m_layers.length; b++) this.m_layers[b].setX(a)
};
SCC_World.prototype.setY = function(a) {
    for (var b = 0; b < this.m_layers.length; b++) this.m_layers[b].setY(a)
};
SCC_World.prototype.objectCanvas = function() {
    return this.m_objectsCanvas[0]
};
SCC_World.prototype.player = function() {
    return this.m_player
};
SCC_World.prototype.camera = function() {
    return this.m_camera
};
SCC_World.prototype.width = function() {
    return this.m_width
};
SCC_World.prototype.height = function() {
    return this.m_height
};
SCC_World.prototype.actorManager = function() {
    return this.m_actorManager
};
SCC_World.prototype.getLayer = function(a) {
    return this.m_layerNames[a]
};
SCC_World.prototype.loadData = function(a) {
    this.m_worldData = window[a];
    a = this.m_worldData.properties;
    this.m_width = this.getData(a, "width");
    this.m_height = this.getData(a, "height");
    this.showCollisions = 1 == this.getData(a, "showCollisions");
    this.playerInitX = this.getData(a, "playerX");
    this.playerInitY = this.getData(a, "playerY");
    this.cameraWidth = this.getData(a, "cameraWidth");
    this.cameraHeight = this.getData(a, "cameraHeight");
    0 >= this.cameraWidth && (this.cameraWidth = Application.APP_WIDTH);
    0 >= this.cameraHeight && (this.cameraHeight =
        Application.APP_HEIGHT);
    this.cameraScreenX = this.getData(a, "cameraScreenX");
    this.cameraScreenY = this.getData(a, "cameraScreenY");
    this.cameraInitX = this.getData(a, "cameraInitX");
    this.cameraInitY = this.getData(a, "cameraInitY");
    this.cameraYMax = this.getData(a, "cameraYMax");
    this.cameraYMin = this.getData(a, "cameraYMin");
    this.cameraXMax = this.getData(a, "cameraXMax");
    this.cameraXMin = this.getData(a, "cameraXMin");
    this.useEmbeddedAssets = this.getData(a, "useEmbeddedAssets");
    Application.log("Using embedded assets: " +
        this.useEmbeddedAssets);
    this.createCamera();
    this.createNpcManagers();
    this.createLayers()
};
SCC_World.prototype.createCamera = function() {
    this.m_camera = new SCC_Camera(this, this.cameraWidth, this.cameraHeight, this.cameraScreenX, this.cameraScreenY, 0, 0);
    this.m_camera.setScale(1)
};
SCC_World.prototype.createNpcManagers = function() {
    this.m_actorManager = new SCC_NpcManager(this)
};
SCC_World.prototype.getUpdateableObject = function() {
    return this.m_actorManager.getUpdateableObject()
};
SCC_World.prototype.addNpc = function(a, b) {
    var c = new SCC_Npc;
    c.id = a.id;
    c.x = a.x;
    c.y = a.y;
    c.canvas = b;
    c.params = a.params;
    this.m_actorManager.addNpc(c)
};
SCC_World.prototype.createLayers = function() {
    this.m_layerNames = [];
    for (var a = this.m_worldData.layerTypes, b = 0; b < a.length; b++) this.addLayer(a[b].type, a[b]);
    null === this.m_playerCanvas && (null === this.m_objectsCanvas[0] && (a = Application.instance.addDisplayContainer(), a._sorted = !0, this.canvas.addChild(a), this.m_objectsCanvas[0] = a, this.m_objectsCanvas.push(this.canvas)), this.m_playerCanvas = this.m_objectsCanvas[0]);
    this.m_worldData = null
};
SCC_World.prototype.addLayer = function(a, b) {
    if (a === SCC_WorldBaseLayer.ID_OBJECTS) {
        var c = Application.instance.addDisplayContainer();
        c._sorted = !0;
        this.canvas.addChild(c);
        this.m_objectsCanvas.push(c);
        this.m_objectsCanvas.push(this.canvas);
        for (var d = 0; d < b.object.length; d++) this.addNpc(b.object[d], c)
    } else a === SCC_WorldBaseLayer.ID_SPRITES ? (c = new SCC_WorldSpriteLayer(this, b), this.m_layerNames[c.name()] = c, this.m_layers.push(c)) : a !== SCC_WorldBaseLayer.ID_PLAYER && "collisions" != b.name && (c = new SCC_WorldTileLayer(this,
        b), this.m_layerNames[c.name()] = c, this.m_layers.push(c))
};
SCC_World.prototype.init = function() {
    this.setX(this.m_camera.screenX);
    this.setY(this.m_camera.screenY);
    for (var a = 0; a < this.m_layers.length; a++) this.m_layers[a].init()
};
SCC_World.prototype.showCollision = function(a) {
    this.m_player.showCollision(a);
    this.m_actorManager.showCollisions(a);
    this.m_camera.showCollision(a)
};
SCC_World.prototype.checkWorldBoundaries = function(a) {
    var b = null,
        b = a.bounds();
    null !== b && (a.limitUp() && 0 >= a.y() + b.top && a.setY(-b.top), a.limitBottom() && a.y() + b.bottom >= this.m_height && a.setY(this.m_height - b.bottom))
};
SCC_World.prototype.update = function(a) {
    a > SCC_World.MAX_DELTA_TIME && (a = SCC_World.MAX_DELTA_TIME);
    this.m_actorManager.update(a);
    for (var b = 0; b < this.m_layers.length; b++) this.m_layers[b].visible() && this.m_layers[b].render();
    this.m_camera.update(a)
};
SCC_World.prototype.getData = function(a, b) {
    if (null === a) Application.error("World:: data is null");
    else if (null === b) Application.error("World:: data is null: " + b);
    else {
        if (a[b]) return a[b];
        Application.error("Property not found: " + b)
    }
};
SCC_World.prototype.getOptionalData = function(a, b, c) {
    if ("undefined" === typeof a) Application.error("World:: data is undefined");
    else if ("undefined" === typeof b) Application.error("World:: data is undefined: " + b);
    else {
        if ("undefined" !== typeof a[b]) return a[b];
        Application.error("Optional property not found: " + b + " using: " + c);
        return c
    }
};
SCC_World.prototype.free = function() {
    null !== this.m_player && (this.m_player.free(), this.m_player = null);
    this.m_actorManager.free();
    this.m_actorManager = null;
    this.m_playerCanvas != this.m_objectsCanvas[0] && (this.canvas.removeChild(this.m_playerCanvas), this.m_playerCanvas = null);
    for (var a = 0; a < this.m_objectsCanvas.length; a++) this.canvas.removeChild(this.m_objectsCanvas[a]);
    this.m_objectsCanvas = null;
    null !== this.m_camera && (this.m_camera.free(), this.m_camera = null);
    for (a = 0; a < this.m_layers.length; a++) this.m_layers[a].free(),
    this.m_layers[a] = null;
    this.m_layers = this.m_layerNames = null
};
SCC_World.MAX_DELTA_TIME = 50;
SCC_World.MAX_SCAN_FLOOR = 750;

function SCC_WorldBaseLayer(a, b) {
    this.m_name = "";
    this.m_type = this.m_parallaxXFactor = this.m_y = this.m_x = this.m_height = this.m_width = 0;
    this.m_world = a;
    this.m_canvas = null;
    this.m_useEmbeddedAssets = !1;
    this.m_name = b.name;
    this.m_width = b.width;
    this.m_height = b.height;
    Application.log(" Layer: " + this.m_name + " w:" + this.m_width + " h:" + this.m_height);
    this.m_useEmbeddedAssets = this.m_world.useEmbeddedAssets;
    this.m_canvas = Application.instance.addDisplayContainer();
    a.canvas.addChild(this.m_canvas);
    this.m_type = 0
}
SCC_WorldBaseLayer.prototype.x = function() {
    return this.m_x
};
SCC_WorldBaseLayer.prototype.y = function() {
    return this.m_y
};
SCC_WorldBaseLayer.prototype.width = function() {
    return this.m_width
};
SCC_WorldBaseLayer.prototype.height = function() {
    return this.m_height
};
SCC_WorldBaseLayer.prototype.visible = function() {
    return !0
};
SCC_WorldBaseLayer.prototype.name = function() {
    return this.m_name
};
SCC_WorldBaseLayer.prototype.setX = function(a) {
    this.m_x = a
};
SCC_WorldBaseLayer.prototype.setY = function(a) {
    this.m_y = a
};
SCC_WorldBaseLayer.prototype.refresh = function() {};
SCC_WorldBaseLayer.prototype.init = function() {
    this.m_world.camera().parallaxX && (this.m_parallaxXFactor = (this.m_width - this.m_world.camera().width) / (this.m_world.width() - this.m_world.camera().width));
    this.m_world.camera().parallaxY && (this.m_parallaxYFactor = (this.m_height - this.m_world.camera().height) / (this.m_world.height() - this.m_world.camera().height))
};
SCC_WorldBaseLayer.prototype.render = function() {
    this.m_world.camera().parallaxX && (this.m_canvas.x = -this.parallaxX());
    this.m_world.camera().parallaxY && (this.m_canvas.y = -this.parallaxY())
};
SCC_WorldBaseLayer.prototype.parallaxX = function() {
    return this.m_world.camera().x() * this.m_parallaxXFactor
};
SCC_WorldBaseLayer.prototype.parallaxY = function() {
    return this.m_world.camera().y() * this.m_parallaxYFactor
};
SCC_WorldBaseLayer.prototype.free = function() {
    this.m_world && (this.m_world = this.m_canvas = null)
};
SCC_WorldBaseLayer.TYPE_TILES = 2;
SCC_WorldBaseLayer.TYPE_SPRITES = 3;
SCC_WorldBaseLayer.TYPE_OBJECTS = 4;
SCC_WorldBaseLayer.ID_PLAYER = "player";
SCC_WorldBaseLayer.ID_TILES = "cell";
SCC_WorldBaseLayer.ID_SPRITES = "sprites";
SCC_WorldBaseLayer.ID_OBJECTS = "objects";

function SCC_WorldTileLayer(a, b) {
    SCC_WorldBaseLayer.call(this, a, b);
    this.m_tileHeight = this.m_tileWidth = this.m_rows = this.m_columns = 0;
    this.m_bgClip = this.m_bitmapData = this.m_tiles = null;
    this.m_type = SCC_WorldBaseLayer.ID_TILES;
    this.m_columns = b.cols;
    this.m_rows = b.rows;
    this.m_tileWidth = b.tileW;
    this.m_tileHeight = b.tileH;
    this.m_tiles = b.image;
    this.m_bitmapData = b.matrix
}
goog.inherits(SCC_WorldTileLayer, SCC_WorldBaseLayer);
SCC_WorldTileLayer.prototype.tileWidth = function() {
    return this.m_tileWidth
};
SCC_WorldTileLayer.prototype.tileHeight = function() {
    return this.m_tileHeight
};
SCC_WorldTileLayer.prototype.getTileName = function(a) {
    return 0 <= a && a < this.m_tiles.length ? this.m_tiles[a] : null
};
SCC_WorldTileLayer.prototype.init = function() {
    SCC_WorldTileLayer.superClass_.init.call(this);
    this.m_bgClip = Application.instance.getDisplayObject(this.getTileName(0));
    this.m_canvas.addChild(this.m_bgClip);
    this.m_bgClip.parent = this.m_canvas;
    this.m_bgClip.setPosition(0, 0)
};
SCC_WorldTileLayer.prototype.render = function() {
    var a = 0;
    this.m_world.camera().parallaxX && (a = this.parallaxX(), this.m_canvas.setX(-a));
    this.m_world.camera().parallaxY && (a = this.parallaxY(), this.m_canvas.setY(-a))
};
SCC_WorldTileLayer.prototype.free = function() {
    this.m_bgClip && this.m_canvas.removeChild(this.m_bgClip);
    SCC_WorldTileLayer.superClass_.free.call(this)
};

function SCC_WorldSpriteLayer(a, b) {
    SCC_WorldBaseLayer.call(this, a, b);
    this.m_type = SCC_WorldBaseLayer.TYPE_SPRITES;
    for (var c = b.image.length, d = 0; d < c;) {
        var e = null,
            e = Application.instance.getClip(b.image[d].image);
        b.image[d].sx && e.setScaleX(b.image[d].sx);
        b.image[d].sy && e.setScaleY(b.image[d].sy);
        e.setX(b.image[d].x - e.width / 2);
        e.setY(b.image[d].y - e.height / 2);
        b.image[d].rot && e.setRotation(180 * b.image[d].rot / Math.PI);
        e.parent = this.m_canvas;
        this.m_canvas.addChild(e.sprite);
        ++d
    }
}
goog.inherits(SCC_WorldSpriteLayer, SCC_WorldBaseLayer);

function Server() {}
Server.online = !1;
Server.ip = "http://localhost/";
Server.key = "keyvalue";
Server.instance = null;
Server.initialize = function() {
    Server.instance = new Server;
    Server.online = 1 == parseInt(Application.config.server.online, 10);
    Server.ip = Application.config.server.ip;
    Server.key = Application.config.server.key
};
Server.prototype.getStandings = function(a, b) {
    Server.online ? this.callingGet(Server.ip + "standings?" + Server.key, a, b) : this.testCallOffline('[{"Day":"1","Results":"1W2L3W4D5L6W"},{"Day":"2","Results":"1L2D3D4D5L6L"}]', a, b)
};
Server.prototype.getRankings = function(a, b) {
    Server.online ? this.callingGet(Server.ip + "rankings?" + Server.key, a, b) : this.testCallOffline('[{"D":5,"Id":1,"L":7,"Points":41,"Rank":4,"W":12},{"D":3,"Id":2,"L":2,"Points":46,"Rank":1,"W":19},{"D":5,"Id":3,"L":9,"Points":36,"Rank":6,"W":10},{"D":5,"Id":4,"L":8,"Points":43,"Rank":5,"W":11},{"D":5,"Id":5,"L":5,"Points":61,"Rank":3,"W":14},{"D":5,"Id":6,"L":3,"Points":21,"Rank":2,"W":16}]', a, b)
};
Server.prototype.getMatchups = function(a, b) {
    Server.online ? this.callingGet(Server.ip + "currentMatchups?" + Server.key, a, b) : this.testCallOffline('{"matchups": "514632"}', a, b)
};
Server.prototype.sendResult = function(a, b, c, d, e, f) {
    if (Server.online) {
        var g = Server.ip + "match?" + Server.key;
        a = {
            PlayerTeamID: String(a),
            PlayerTeamGoals: parseInt(b, 10),
            ComTeamID: String(c),
            ComTeamGoals: parseInt(d, 10)
        };
        $.post(g, a).done(function(a) {
            Application.log("Server.sendResult:");
            Application.trace(a);
            e && f && f.call(e, a)
        }).fail(function(a) {
            Application.error("Server.js >> no response from server [" + Server.ip + "]");
            e && f && f.call(e, null)
        })
    } else this.testCallOffline('{"success": "data saved"}', e, f)
};
Server.prototype.testCallOffline = function(a, b, c) {
    b && c && c.call(b, JSON.parse(a))
};
Server.prototype.callingGet = function(a, b, c) {
    $.get(a, function(a) {
        Application.log("Server.callingGet:");
        Application.trace(a);
        b && c && c.call(b, a)
    }).fail(function(a) {
        Application.error("Server.js >> no response from server [" + Server.ip + "]");
        b && c && c.call(b, null)
    })
};

function Cheats() {}
Cheats.enabled = !0;
Cheats.onKeyDown = function(a) {
    if (Cheats.enabled) switch (a) {
        case Common.KEY_1:
            Global.level = 2;
            GuiManager.instance.gotoScreen(GuiManager.SC_GAME);
            break;
        case Common.KEY_2:
            Global.level = 3;
            GuiManager.instance.gotoScreen(GuiManager.SC_GAME);
            break;
        case Common.KEY_3:
            Global.level = 4, GuiManager.instance.gotoScreen(GuiManager.SC_GAME)
    }
};

function ItemSoccer(a, b, c, d, e, f) {
    SCC_WorldActor.call(this, a, b, c, d);
    this.m_type = e;
    this.m_index = f;
    this.m_players = this.m_world.players;
    this.m_character = new Character(c, d, a);
    switch (this.m_type) {
        case ItemSoccer.TYPE_SHOOT:
            this.m_character.addState(ItemSoccer.ST_STAND, "mcSSIcon");
            break;
        case ItemSoccer.TYPE_TURBO:
            this.m_character.addState(ItemSoccer.ST_STAND, "mcTurboIcon")
    }
    this.gotoState(ItemSoccer.ST_STAND);
    this.updateBounds()
}
goog.inherits(ItemSoccer, SCC_WorldActor);
ItemSoccer.prototype.update = function(a) {
    this.m_character.update(a);
    ItemSoccer.superClass_.update.call(this, a);
    this.setDepth(1E3 * this.m_y);
    switch (this.m_state) {
        case ItemSoccer.ST_STAND:
            for (a = 0; a < this.m_players.length; ++a)
                if (this.m_players[a].hitTestCollision(this)) {
                    switch (this.m_type) {
                        case ItemSoccer.TYPE_SHOOT:
                            !1 == this.m_players[a].team.isBotTeam && this.m_players[a].isWithFocus() && (Global.app.playSound("dko_snd_power1"), this.m_players[a].team.getSuperShotPowerUp(), this.m_world.freeItemIndex(this.m_index),
                                this.m_state = ItemSoccer.ST_FADING, Global.mickeyShots++);
                            break;
                        case ItemSoccer.TYPE_TURBO:
                            this.m_players[a].getTurboPowerUp(), this.m_world.freeItemIndex(this.m_index), this.m_state = ItemSoccer.ST_FADING, Global.app.playSound("dko_snd_speed")
                    }
                    return
                }
            break;
        case ItemSoccer.ST_FADING:
            this.m_clip.sprite.opacity -= 0.0015 * a, this.m_y -= 0.25 * a, 0.05 > this.m_clip.sprite.opacity && this.setAwaitingDelete(!0)
    }
};
ItemSoccer.ST_STAND = "st1";
ItemSoccer.ST_FADING = "st2";
ItemSoccer.TYPE_SHOOT = 1;
ItemSoccer.TYPE_TURBO = 2;

function Goal(a, b, c, d, e) {
    SCC_WorldActor.call(this, a, b, c, d);
    this.m_y += Goal.PIECE_DEPTH;
    this.m_clipPiece = null;
    this.m_character = new Character(c, d, a);
    !0 == e ? (this.m_character.addState(Goal.ST_STAND, "mcGoal_DKO_left"), this.m_clipPiece = Application.instance.getClip("mcGoal_left_piece")) : (this.m_character.addState(Goal.ST_STAND, "mcGoal_DKO_right"), this.m_clipPiece = Application.instance.getClip("mcGoal_right_piece"));
    this.m_clipPiece.setX(this.m_x - this.m_world.camera().x());
    this.m_clipPiece.setY(this.m_y - this.m_world.camera().y());
    this.m_canvas.addChild(this.m_clipPiece.sprite);
    this.gotoState(Goal.ST_STAND);
    this.m_piecePosition = new Point(this.m_x, this.m_y);
    this.setDepth(1E3 * (this.m_y + Goal.MID_GOAL));
    this.m_clipPiece.sprite._depth = 1E3 * (this.m_y + Goal.PIECE_DEPTH)
}
goog.inherits(Goal, SCC_WorldActor);
Goal.ST_STAND = "st1";
Goal.prototype.onGoal = function() {
    this.m_state = -1;
    this.gotoState(Goal.ST_STAND)
};
Goal.prototype.gotoState = function(a) {
    this.m_state != a && (Goal.superClass_.gotoState.call(this, a), this.m_character.actor().clip().setLoop(!1))
};
Goal.prototype.update = function(a) {
    this.m_character.update(a);
    Goal.superClass_.update.call(this, a);
    null !== this.m_clipPiece && (this.m_clipPiece.update(a), this.m_clipPiece.setX(this.m_piecePosition.x - this.m_world.camera().x()), this.m_clipPiece.setY(this.m_piecePosition.y - this.m_world.camera().y()))
};
Goal.prototype.free = function() {
    Goal.superClass_.free.call(this);
    null !== this.m_clipPiece && (this.m_canvas.removeChild(this.m_clipPiece.sprite), this.m_clipPiece = null)
};
Goal.PIECE_DEPTH = -60;
Goal.MID_GOAL = 185;

function JumpControl(a, b) {
    this.onMaxHeightReachedCallback = this.onCompleteJumpCallback = this.targetCallback = null;
    this.m_gravity = "undefined" !== typeof b ? b : 9.8;
    this.m_factorGravity = 1;
    this.m_vo = "undefined" !== typeof a ? a : -45;
    this.m_time = this.m_nextZ = this.m_z = 0;
    this.m_isPaused = this.m_isJump = !1;
    this.m_checkMaxHeight = !0;
    this.m_initVelocity = this.m_vo;
    this.m_initPosition = 0
}
JumpControl.prototype.setHeightInit = function(a) {
    this.m_initPosition = a;
    this.m_time = this.m_vo = 0;
    this.m_isJump = !0
};
JumpControl.prototype.cancel = function() {
    this.m_isJump = !1;
    this.m_z = this.m_vo = this.m_time = this.m_initPosition = 0
};
JumpControl.prototype.getCurrentHeight = function() {
    return this.m_z
};
JumpControl.prototype.getElapseTime = function() {
    return this.m_time
};
JumpControl.prototype.getGravity = function() {
    return this.m_gravity
};
JumpControl.prototype.setGravity = function(a) {
    this.m_gravity = a
};
JumpControl.prototype.getIsJump = function() {
    return this.m_isJump
};
JumpControl.prototype.getFactorGravity = function() {
    return this.m_factorGravity
};
JumpControl.prototype.setFactorGravity = function(a) {
    this.m_factorGravity = a
};
JumpControl.prototype.getPaused = function() {
    return this.m_isPaused
};
JumpControl.prototype.setPaused = function(a) {
    this.m_isPaused = a
};
JumpControl.prototype.init = function(a) {
    this.m_nextZ = this.m_z = "undefined" !== typeof a ? a : 0;
    this.m_time = 0;
    this.m_checkMaxHeight = this.m_isJump = !0
};
JumpControl.prototype.getInitVelocity = function() {
    return this.m_vo
};
JumpControl.prototype.setInitVelocity = function(a) {
    this.m_initVelocity = this.m_vo = a
};
JumpControl.prototype.applyForceY = function(a) {
    if (!this.m_isJump) return !1;
    this.m_initPosition = this.m_nextZ;
    this.m_vo = a;
    this.m_time = 0;
    return !0
};
JumpControl.prototype.applyImpulse = function(a) {
    this.m_initPosition = this.m_z;
    this.m_vo = a;
    this.m_time = 0;
    this.m_isJump = !0
};
JumpControl.prototype.completeJump = function() {
    this.m_vo = this.m_initVelocity;
    this.m_z = this.m_initPosition = 0;
    this.m_isJump = !1;
    if (this.targetCallback && this.onCompleteJumpCallback) this.targetCallback[this.onCompleteJumpCallback](this)
};
JumpControl.prototype.update = function(a) {
    if (!this.m_isPaused && this.m_isJump)
        if (this.m_time += 0.011 * a, this.m_nextZ = this.m_vo * this.m_time + this.m_gravity * this.m_factorGravity * this.m_time * this.m_time * 0.5 + this.m_initPosition, 0 >= this.m_nextZ) {
            if (this.m_checkMaxHeight && this.m_nextZ > this.m_z && (this.m_checkMaxHeight = !1, this.targetCallback && this.onMaxHeightReachedCallback)) this.targetCallback[this.onMaxHeightReachedCallback](this);
            this.m_z = this.m_nextZ
        } else this.completeJump()
};
JumpControl.prototype.free = function(a) {
    this.onMaxHeightReachedCallback = this.onCompleteJumpCallback = null
};

function Displace(a, b) {
    this.position = new Vector2D(a, b);
    this.positionTarget = new Vector2D(0, 0);
    this.angle = this.speedFactor = this.speedMagnitude = this.accelerationMagnitude = 0;
    this.targetCallback = this.onEndDisplaceCallback = null;
    this.m_timeElapse = 0;
    this.m_positionStart = this.position.clone();
    this.m_acceleration = new Vector2D(0, 0);
    this.m_speedInitial = new Vector2D(0, 0);
    this.m_totalDisplacement = 0;
    this.m_onMove = !1
}
Displace.prototype.currentSpeed = function() {
    var a = new Vector2D(0, 0);
    a.x = this.m_speedInitial.x * this.speedFactor + this.m_acceleration.x * this.m_timeElapse;
    a.y = this.m_speedInitial.y * this.speedFactor + this.m_acceleration.y * this.m_timeElapse;
    return a.length()
};
Displace.prototype.toLeft = function() {
    for (var a = this.angle, a = 180 / Math.PI * a; 0 > a;) a += 360;
    a %= 360;
    return 90 < a && 270 > a
};
Displace.prototype.x = function() {
    return this.position.x
};
Displace.prototype.y = function() {
    return this.position.y
};
Displace.prototype.resetPosition = function(a, b) {
    this.position.x = a;
    this.position.y = b
};
Displace.prototype.updateSpeed = function(a) {
    this.speedMagnitude = a;
    this.m_speedInitial.setVector(this.speedMagnitude, this.angle)
};
Displace.prototype.updateAcceleration = function(a) {
    this.m_timeElapse = 0;
    this.m_speedInitial.x = this.m_speedInitial.x * this.speedFactor + this.m_acceleration.x * this.m_timeElapse;
    this.m_speedInitial.y = this.m_speedInitial.y * this.speedFactor + this.m_acceleration.y * this.m_timeElapse;
    this.m_positionStart = this.position.clone();
    this.accelerationMagnitude = a;
    this.m_acceleration.setVector(this.accelerationMagnitude, this.angle)
};
Displace.prototype.cancel = function() {
    this.m_positionStart = this.position.clone();
    this.m_speedInitial.x = 0;
    this.m_speedInitial.y = 0;
    this.m_acceleration.x = 0;
    this.m_timeElapse = this.m_acceleration.y = 0;
    this.speedFactor = 1;
    this.m_onMove = !1;
    if (this.onEndDisplaceCallback && this.targetCallback) this.targetCallback[this.onEndDisplaceCallback]()
};
Displace.prototype.gotoPosition = function(a, b, c, d, e) {
    this.accelerationMagnitude = "undefined" === typeof d ? 0 : d;
    this.speedMagnitude = "undefined" === typeof c ? 0 : c;
    this.speedFactor = "undefined" === typeof e ? 1 : e;
    this.m_timeElapse = 0;
    this.m_positionStart = this.position.clone();
    this.positionTarget.x = a;
    this.positionTarget.y = b;
    this.angle = this.positionTarget.minus(this.m_positionStart).angle();
    this.m_speedInitial.setVector(this.speedMagnitude, this.angle);
    this.m_acceleration.setVector(this.accelerationMagnitude, this.angle);
    this.m_totalDisplacement = this.positionTarget.minus(this.m_positionStart).length();
    this.m_onMove = !0
};
Displace.prototype.gotoDirection = function(a, b, c, d, e) {
    this.accelerationMagnitude = "undefined" === typeof d ? 0 : d;
    this.speedMagnitude = "undefined" === typeof c ? 0 : c;
    this.speedFactor = "undefined" === typeof e ? 1 : e;
    this.angle = b;
    this.m_timeElapse = 0;
    this.m_positionStart = this.position.clone();
    this.m_speedInitial.setVector(this.speedMagnitude, this.angle);
    this.m_acceleration.setVector(this.accelerationMagnitude, this.angle);
    this.m_totalDisplacement = a;
    this.m_onMove = !0;
    this.positionTarget.x = this.m_positionStart.x + a * Math.cos(b);
    this.positionTarget.y = this.m_positionStart.y + a * Math.sin(b)
};
Displace.prototype.estimatePositionAfterTime = function(a) {
    a *= 0.001;
    var b = new Point(0, 0);
    b.x = this.position.x + this.m_speedInitial.x * a * this.speedFactor + 0.5 * this.m_acceleration.x * a * a;
    b.y = this.position.y + this.m_speedInitial.y * a * this.speedFactor + 0.5 * this.m_acceleration.y * a * a;
    return b
};
Displace.prototype.onBounce = function(a) {
    var b = 0;
    a == Displace.DIRECTION_LEFT && (b = 180);
    this.m_timeElapse = 0;
    this.m_positionStart = this.position.clone();
    this.angle = (b + Common.random(-Displace.BOUNCE_ANGLE_VAR, Displace.BOUNCE_ANGLE_VAR)) * (Math.PI / 180);
    this.m_speedInitial.setVector(this.speedMagnitude * Displace.ENERGY_AFTER_BOUNCE, this.angle);
    this.m_acceleration.setVector(this.accelerationMagnitude, this.angle)
};
Displace.prototype.update = function(a) {
    if (!1 != this.m_onMove && (this.m_timeElapse += 0.001 * a, this.position.x = this.m_positionStart.x + this.m_speedInitial.x * this.m_timeElapse * this.speedFactor + 0.5 * this.m_acceleration.x * this.m_timeElapse * this.m_timeElapse, this.position.y = this.m_positionStart.y + this.m_speedInitial.y * this.m_timeElapse * this.speedFactor + 0.5 * this.m_acceleration.y * this.m_timeElapse * this.m_timeElapse, a = new Vector2D(0, 0), a.x = this.m_speedInitial.x * this.speedFactor + this.m_acceleration.x * this.m_timeElapse,
        a.y = this.m_speedInitial.y * this.speedFactor + this.m_acceleration.y * this.m_timeElapse, this.m_positionStart.minus(this.position).length() >= this.m_totalDisplacement || Math.abs(a.x) < Displace.NO_SPEED_VALUE && Math.abs(a.y) < Displace.NO_SPEED_VALUE)) {
        if (this.onEndDisplaceCallback && this.targetCallback) this.targetCallback[this.onEndDisplaceCallback]();
        this.m_onMove = !1
    }
};
Displace.prototype.free = function() {
    this.m_speedInitial = this.m_acceleration = this.m_positionOrigin = this.position = null
};
Displace.DIRECTION_RIGHT = 1;
Displace.DIRECTION_LEFT = -1;
Displace.BOUNCE_ANGLE_VAR = 15;
Displace.ENERGY_AFTER_BOUNCE = 0.6;
Displace.NO_SPEED_VALUE = 5;

function DrawLine(a, b) {
    Actor.call(this, "line", a, b, Application.instance);
    this.m_alpha = 1;
    this.m_maxLen = Common.random(20, 70);
    this.endDraw = !1;
    this.m_scaleX = 0;
    this.m_scaleY = 1;
    this.m_clip.sprite._depth = 9999;
    this.m_clip.setScale(this.m_scaleX, this.m_scaleY)
}
goog.inherits(DrawLine, Actor);
DrawLine.LINE_WIDTH = 50;
DrawLine.prototype.update = function(a) {
    this.m_alpha -= 0.0018 * a;
    this.m_clip.setAlpha(this.m_alpha);
    0 > this.m_alpha && (this.m_clip.setAlpha(1), this.isAwaitingDeletion = !0);
    this.m_scaleY -= 0.006 * a;
    this.m_clip.setScale(this.m_scaleX, this.m_scaleY);
    DrawLine.superClass_.update.call(this, a)
};
DrawLine.prototype.onMouseMove = function(a, b) {
    var c = a - this.x(),
        d = b - this.y(),
        e = Math.atan2(d, c);
    this.m_clip.setRotation(180 * e / Math.PI);
    c = Math.sqrt(c * c + d * d);
    this.m_scaleX = c / DrawLine.LINE_WIDTH;
    this.m_scaleY = 2.5;
    this.m_clip.setScale(this.m_scaleX, this.m_scaleY);
    c >= this.m_maxLen && (this.endDraw = !0)
};
DrawLine.prototype.setAwaitingDelete = function(a) {
    this.isAwaitingDeletion = !0
};

function DataManager() {
    this.goalReq = parseInt(Application.config.achievements.goalReq, 10);
    this.matchReq = parseInt(Application.config.achievements.matchReq, 10);
    this.kicksReq = parseInt(Application.config.achievements.kicksReq, 10);
    this.superShootReq = parseInt(Application.config.achievements.superShootReq, 10);
    this.totalGoalReq = parseInt(Application.config.achievements.totalGoalReq, 10);
    Global.enableChampionship = !Application.config.settings.hideButtonChampMode;
    Global.showAds = 1 == parseInt(Application.config.settings.showAds,
        10);
    this.achievementRockScorer = this.achievementLionKick = this.achievementSmallField = this.achievementZeroHero = this.achievementHatTrick = 0;
    this.semifinalMatchs = Common.loadData(DataManager.KEY_DATA_SEMIS, "0000");
    var a = Common.loadData(DataManager.KEY_DATA_VAR, "011111");
    this.selectedTeam = parseInt(a.charAt(DataManager.IDX_SELECTED_TEAM), 10);
    this.isFirstGame = 1 == parseInt(a.charAt(DataManager.IDX_IS_FIRST_GAME), 10);
    this.needCutscene = 1 == parseInt(a.charAt(DataManager.IDX_NEED_CUTSCENE), 10);
    this.needTutorial = 1 ==
        parseInt(a.charAt(DataManager.IDX_NEED_TUTORIAL), 10);
    this.showMessageSemifinal = 1 == parseInt(a.charAt(DataManager.IDX_NEED_MSG_SEMIS), 10);
    this.showMessageFinal = 1 == parseInt(a.charAt(DataManager.IDX_NEED_MSG_FINAL), 10)
}
DataManager.prototype.saveSemisMatchs = function(a) {
    -1 !== this.semifinalMatchs.indexOf("0000") && Common.saveData(DataManager.KEY_DATA_SEMIS, a)
};
DataManager.prototype.selectTeam = function(a) {
    this.selectedTeam = a;
    this.saveData()
};
DataManager.prototype.onFirstGame = function() {
    this.isFirstGame = !1;
    this.saveData()
};
DataManager.prototype.onCutscene = function() {
    this.needCutscene = !1;
    this.saveData()
};
DataManager.prototype.onTutorial = function() {
    this.needTutorial = !1;
    this.saveData()
};
DataManager.prototype.onShowMessageSemifinal = function() {
    this.showMessageSemifinal = !1;
    this.saveData()
};
DataManager.prototype.onShowMessageFinal = function() {
    this.showMessageFinal = !1;
    this.saveData()
};
DataManager.prototype.saveData = function() {
    var a;
    a = this.replaceAt("011111", DataManager.IDX_SELECTED_TEAM, this.selectedTeam);
    !1 == this.isFirstGame && (a = this.replaceAt(a, DataManager.IDX_IS_FIRST_GAME, "0"));
    !1 == this.needCutscene && (a = this.replaceAt(a, DataManager.IDX_NEED_CUTSCENE, "0"));
    !1 == this.needTutorial && (a = this.replaceAt(a, DataManager.IDX_NEED_TUTORIAL, "0"));
    !1 == this.showMessageSemifinal && (a = this.replaceAt(a, DataManager.IDX_NEED_MSG_SEMIS, "0"));
    !1 == this.showMessageFinal && (a = this.replaceAt(a, DataManager.IDX_NEED_MSG_FINAL,
        "0"));
    Common.saveData(DataManager.KEY_DATA_VAR, a)
};
DataManager.prototype.initLoadData = function() {
    for (var a = Common.loadData(Global.KEY_NUM_DATA, "0|0|0|0|0|0|0|0|0|0").split("|"), b = 0; b < a.length; b++) a[b] = parseInt(a[b], 10);
    Application.log("GET SAVED NUMS " + a);
    this.achievementHatTrick = parseInt(a[Global.INDEX_ACHIEVEMENT_1], 10);
    Application.log("ACH - HAT TRICK: " + this.achievementHatTrick);
    this.achievementZeroHero = parseInt(a[Global.INDEX_ACHIEVEMENT_2], 10);
    Application.log("ACH - ZERO HERO: " + this.achievementZeroHero);
    this.achievementSmallField = parseInt(a[Global.INDEX_ACHIEVEMENT_3],
        10);
    Application.log("ACH - SMALL FIELD: " + this.achievementSmallField);
    this.achievementLionKick = parseInt(a[Global.INDEX_ACHIEVEMENT_4], 10);
    Application.log("ACH - LION KICK: " + this.achievementLionKick);
    this.achievementRockScorer = parseInt(a[Global.INDEX_ACHIEVEMENT_5], 10);
    Application.log("ACH - ROCK SCORER: " + this.achievementRockScorer);
    return a
};
DataManager.prototype.reset = function() {
    for (var a = this.achievementRockScorer = this.achievementLionKick = this.achievementSmallField = this.achievementZeroHero = this.achievementHatTrick = 0; a < Global.savedNumData.length; a++) Global.savedNumData[a] = 0
};
DataManager.prototype.checkAchievementHatTrick = function(a) {
    1 === this.achievementHatTrick ? Application.log("ACH - HAT TRICK: Already obtained!") : a === this.goalReq && (Application.log("ACH - HAT TRICK: Obtained!"), this.achievementHatTrick = 1, Global.savedNumData[Global.INDEX_ACHIEVEMENT_1] = this.achievementHatTrick, Common.saveData(Global.KEY_NUM_DATA, Common.storageString(Global.savedNumData)), null !== HudSoccer.instance && HudSoccer.instance.showTrophy(1))
};
DataManager.prototype.checkAchievementZeroHero = function() {
    1 === this.achievementZeroHero ? Application.log("ACH - ZERO HERO: Already obtained!") : Global.savedNumData[Global.INDEX_ACH_COUNTER_2] >= this.matchReq && (Application.log("ACH - ZERO HERO: Obtained!"), this.achievementZeroHero = 1, Global.savedNumData[Global.INDEX_ACHIEVEMENT_2] = this.achievementZeroHero, Common.saveData(Global.KEY_NUM_DATA, Common.storageString(Global.savedNumData)), null !== HudSoccer.instance && HudSoccer.instance.showTrophy(2))
};
DataManager.prototype.checkAchievementSmallField = function() {
    1 === this.achievementSmallField ? Application.log("ACH - SMALL FIELD: Already obtained!") : Global.savedNumData[Global.INDEX_ACH_COUNTER_3] >= this.kicksReq && (Application.log("ACH - SMALL FIELD: Obtained!"), this.achievementSmallField = 1, Global.savedNumData[Global.INDEX_ACHIEVEMENT_3] = this.achievementSmallField, Common.saveData(Global.KEY_NUM_DATA, Common.storageString(Global.savedNumData)), null !== HudSoccer.instance && HudSoccer.instance.showTrophy(3))
};
DataManager.prototype.checkAchievementLionKick = function() {
    1 === this.achievementLionKick ? Application.log("ACH - LION KICK: Already obtained!") : Global.savedNumData[Global.INDEX_ACH_COUNTER_4] >= this.superShootReq && (Application.log("ACH - LION KICK: Obtained!"), this.achievementLionKick = 1, Global.savedNumData[Global.INDEX_ACHIEVEMENT_4] = this.achievementLionKick, Common.saveData(Global.KEY_NUM_DATA, Common.storageString(Global.savedNumData)), null !== HudSoccer.instance && HudSoccer.instance.showTrophy(4))
};
DataManager.prototype.checkAchievementRockScorer = function() {
    1 === this.achievementRockScorer ? Application.log("ACH - ROCK SCORER: Already obtained!") : Global.savedNumData[Global.INDEX_ACH_COUNTER_5] >= this.totalGoalReq && (Application.log("ACH - ROCK SCORER: Obtained!"), this.achievementRockScorer = 1, Global.savedNumData[Global.INDEX_ACHIEVEMENT_5] = this.achievementRockScorer, Common.saveData(Global.KEY_NUM_DATA, Common.storageString(Global.savedNumData)), null !== HudSoccer.instance && HudSoccer.instance.showTrophy(5))
};
DataManager.prototype.replaceAt = function(a, b, c) {
    return a.substr(0, b) + c + a.substr(b + c.length)
};
DataManager.KEY_DATA_SEMIS = "data_semis";
DataManager.KEY_DATA_VAR = "data_vars";
DataManager.IDX_SELECTED_TEAM = 0;
DataManager.IDX_IS_FIRST_GAME = 1;
DataManager.IDX_NEED_CUTSCENE = 2;
DataManager.IDX_NEED_TUTORIAL = 3;
DataManager.IDX_NEED_MSG_SEMIS = 4;
DataManager.IDX_NEED_MSG_FINAL = 5;

function ActorManagerSoccer(a) {
    SCC_NpcManager.call(this, a);
    this.players = [];
    this.goals = [];
    this.ballon = null
}
goog.inherits(ActorManagerSoccer, SCC_NpcManager);
ActorManagerSoccer.prototype.onGoal = function() {
    for (var a = 0; a < this.goals.length; ++a) this.goals[a].onGoal()
};
ActorManagerSoccer.prototype.init = function() {
    var a = new Goal(this.m_world.objectCanvas(), this.m_world, ActorManagerSoccer.GOAL_LEFT_POSITION.x, ActorManagerSoccer.GOAL_LEFT_POSITION.y, !0);
    this.add(a);
    this.goals.push(a);
    a = new Goal(this.m_world.objectCanvas(), this.m_world, ActorManagerSoccer.GOAL_RIGHT_POSITION.x, ActorManagerSoccer.GOAL_RIGHT_POSITION.y, !1);
    this.add(a);
    this.goals.push(a);
    this.ballon = new Ballon(this.m_world.objectCanvas(), this.m_world, ActorManagerSoccer.BALLON_POSITION.x, ActorManagerSoccer.BALLON_POSITION.y);
    this.add(this.ballon);
    this.setUpdateableObject(this.ballon)
};
ActorManagerSoccer.prototype.addPlayer = function(a, b, c, d, e, f, g) {
    a = new PlayerManager(this.m_world.objectCanvas(), this.m_world, a, b, c, d, e, f, g);
    this.players.push(a);
    this.add(a);
    return a
};
ActorManagerSoccer.prototype.addItem = function(a, b, c, d) {
    this.add(new ItemSoccer(this.m_world.objectCanvas(), this.m_world, a, b, c, d))
};
ActorManagerSoccer.prototype.free = function() {
    ActorManagerSoccer.superClass_.free.call(this);
    this.ballon = this.players = null
};
ActorManagerSoccer.GOAL_LEFT_POSITION = new Point(30, 385);
ActorManagerSoccer.GOAL_RIGHT_POSITION = new Point(1655, 385);
ActorManagerSoccer.BALLON_POSITION = new Point(817, 375);
ActorManagerSoccer.GOAL = 1;
ActorManagerSoccer.BALLON = 2;
ActorManagerSoccer.PLAYER = 3;

function GameSoccer(a, b) {
    SGame.call(this, a);
    this.m_reset = this.inTransition = this.playerWin = this.isPaused = this.win = !1;
    this.m_world = null;
    this.m_onWaitEnd = this.m_waitEndDelayed = this.m_collisionVisible = this.m_finish = !1;
    this.m_waitEndTime = GameSoccer.WAIT_END_TIME;
    this.m_dataWorld = b;
    this.m_lives = 5;
    this.m_score = 0;
    this.m_onGoal = !1;
    this.m_time = 0;
    this.m_maxTime = 1E3 * Application.config.SoccerGeneral.halfTimeDuration;
    GameSoccer.instance = this;
    ControlTouch.instance.setMultitouchGame(!1);
    this.reset()
}
goog.inherits(GameSoccer, SGame);
GameSoccer.WAIT_END_TIME = 3E3;
GameSoccer.END_MESSAGE_TIME = 1.25;
GameSoccer.MAX_DELTA = 50;
GameSoccer.instance = null;
GameSoccer.prototype.setOnGoal = function(a) {
    this.m_onGoal = a
};
GameSoccer.prototype.world = function() {
    return this.m_world
};
GameSoccer.prototype.init = function() {
    Application.log("GameSoccer");
    Global.app.playSound("dko_snd_crowd_low");
    this.m_hud = new HudSoccer
};
GameSoccer.prototype.addScore = function(a) {
    this.m_score += a;
    HudSoccer.instance.setScore(this.m_score)
};
GameSoccer.prototype.setScore = function(a) {
    this.m_score = a;
    HudSoccer.instance.setScore(this.m_score)
};
GameSoccer.prototype.addLife = function(a) {
    this.m_lives += a;
    if (0 > a)
        if (0 > this.m_lives) this.onGameEnd(!1);
        else this.m_reset = !0;
        else HudSoccer.instance.setLives(this.m_lives)
};
GameSoccer.prototype.onGameEnd = function(a) {
    this.m_finish = !0
};
GameSoccer.prototype.reset = function() {
    this.m_world && (this.m_world.free(), this.m_world = null);
    this.m_world = new WorldSoccer(this.m_canvas, this);
    this.m_world.loadData(this.m_dataWorld);
    this.m_reset = !1
};
GameSoccer.prototype.setOnWaitEnd = function() {
    this.m_onWaitEnd = !0
};
GameSoccer.prototype.update = function(a) {
    this.m_reset ? this.reset() : this.m_finish ? GuiGame.instance && (this.m_world.free(), Global.app.stopSound("dko_snd_crowd_low"), !0 == Global.onHalfTime ? (Global.level = Common.random(2, 4), GuiManager.instance.gotoScreen(GuiManager.SC_GAME)) : (this.m_world.teamUsers.numGols > this.m_world.teamBots.numGols && (Global.savedNumData[Global.INDEX_ACH_COUNTER_2]++, Global.data.checkAchievementZeroHero(), Common.saveData(Global.KEY_NUM_DATA, Common.storageString(Global.savedNumData))),
        GuiManager.instance.gotoScreen(GuiManager.SC_END_LEVEL))) : (a > GameSoccer.MAX_DELTA && (a = GameSoccer.MAX_DELTA), !1 == this.m_world.isOnThrowIn() && !1 == this.m_onGoal && HudSoccer.instance.state() === HudSoccer.STATE_NORMAL && (this.m_time += a), !1 == this.m_waitEndDelayed && !1 == this.m_onWaitEnd && this.m_time > this.m_maxTime + Global.extraTimeGame && (this.m_world.setPause(!0), Global.onHalfTime = !Global.onHalfTime, !0 == Global.onHalfTime ? (this.m_world.onHalfTime(), HudSoccer.instance.onEndMessage = "", HudSoccer.instance.doMsg(Application.strings.STR_HALF_TIME_1,
        Application.strings.STR_HALF_TIME_2, GameSoccer.END_MESSAGE_TIME), HudSoccer.instance.setTimer(GameSoccer.TIME_HALF), this.m_onWaitEnd = !0) : (this.m_waitEndDelayed = !0, this.m_world.onEndMatch(), HudSoccer.instance.setTimer(2 * GameSoccer.TIME_HALF + Global.extraTime), Global.extraTimeGame = 0)), !0 == this.m_onWaitEnd && (this.m_waitEndTime -= a, 0 > this.m_waitEndTime && (this.m_finish = !0, Global.onHalfTime || (Global.extraTime = 0, Global.extraMickeyShots = 0, Global.boostOn = 0))), this.m_world.update(a), GameSoccer.superClass_.update.call(this,
        a))
};
GameSoccer.prototype.onKeyDown = function(a) {
    GameSoccer.superClass_.onKeyDown.call(this, a);
    a == Common.KEY_C ? this.debugToogleCollision() : a == Common.KEY_E ? Global.game_mode === Global.mode_tournament ? (this.onGameEnd(!0), GuiManager.instance.gotoScreen(GuiManager.SC_WINNER_GAME)) : GuiManager.instance.gotoScreen(GuiManager.SC_END_LEVEL) : a == Common.KEY_1 ? Global.game_mode !== Global.mode_tournament && (this.onGameEnd(!0), Global.level = 2, GuiManager.instance.gotoScreen(GuiManager.SC_GAME)) : a == Common.KEY_2 ? Global.game_mode !== Global.mode_tournament &&
        (this.onGameEnd(!0), Global.level = 3, GuiManager.instance.gotoScreen(GuiManager.SC_GAME)) : a == Common.KEY_3 && Global.game_mode !== Global.mode_tournament && (this.onGameEnd(!0), Global.level = 4, GuiManager.instance.gotoScreen(GuiManager.SC_GAME));
    if (!1 == this.m_finish) this.m_world.onKeyDown(a)
};
GameSoccer.prototype.onKeyUp = function(a) {
    GameSoccer.superClass_.onKeyUp.call(this, a)
};
GameSoccer.prototype.onMouseMove = function(a) {
    GameSoccer.superClass_.onMouseMove.call(this, a);
    this.m_world.onMouseMove(a)
};
GameSoccer.prototype.onMouseDown = function(a) {
    GameSoccer.superClass_.onMouseDown.call(this, a);
    this.m_world.onMouseDown(a)
};
GameSoccer.prototype.onMouseUp = function(a) {
    GameSoccer.superClass_.onMouseUp.call(this, a);
    this.m_world.onMouseUp(a)
};
GameSoccer.prototype.onMouseOutWindow = function(a) {
    GameSoccer.superClass_.onMouseOutWindow.call(this, a);
    this.m_world.onMouseOutWindow(a)
};
GameSoccer.prototype.debugToogleCollision = function() {
    this.m_collisionVisible = !this.m_collisionVisible;
    this.m_world.showCollision(this.m_collisionVisible);
    Application.log("Collision visible: " + this.m_collisionVisible)
};
GameSoccer.prototype.getSuperShootCounter = function() {
    return this.m_world.teamLeft.m_supershootCount
};
GameSoccer.prototype.setSuperShootCounter = function(a) {
    this.m_world.teamLeft.m_supershootCount = a
};
GameSoccer.prototype.getElapsedTime = function() {
    return this.m_time
};
GameSoccer.prototype.setElapsedTime = function(a) {
    this.m_time = a;
    0 > this.m_time && (this.m_time = 0)
};
GameSoccer.prototype.getMaxTime = function() {
    return this.m_maxTime
};
GameSoccer.prototype.getGoals = function(a) {
    if (this.m_world.teamLeft.isBotTeam === a) return this.m_world.teamLeft.numGols;
    if (this.m_world.teamRight.isBotTeam === a) return this.m_world.teamRight.numGols;
    Application.warn("check the teams, it appears 2 are bot teams or the opposite")
};
GameSoccer.prototype.setGoals = function(a, b) {
    this.m_world.teamLeft.isBotTeam === b ? this.m_world.teamLeft.numGols = a : this.m_world.teamRight.isBotTeam === b ? this.m_world.teamRight.numGols = a : Application.warn("check the teams, it appears 2 are bot teams or the opposite")
};
GameSoccer.TIME_HALF = 27E5;

function HudSoccer(a, b) {
    SScreen.call(this, a, b);
    HudSoccer.instance = this;
    this.m_timeElapse = 0;
    this.m_txtScore = $(".ui_hud_scoreplayer");
    this.panelMsg = $(".ui_hud_messagebase");
    this.panelMsg.css("display", "none");
    this.panelCombo = $(".ui_hud_combobase");
    this.panelCombo.css("display", "none");
    this.playerHpBar = $(".ui_hud_hpplayer");
    this.enemyHpBar = $(".ui_hud_hpenemy");
    this.txtPlayerLive = $(".ui_hud_lifes");
    this.fadeObject = $(".ui_hud_bg");
    this.m_onFade = !1;
    this.onEndTransition = null;
    this.m_mouseEarsOffBaseName =
        ".ui_hud_specialoff.i";
    this.m_mouseEarsOnBaseName = ".ui_hud_special.s";
    this.m_maxMouseEars = Team.SUPERSHOT_TOTAL;
    this.m_mouseOnElements = [];
    this.m_mouseOffElements = [];
    for (var c = 0; c < this.m_maxMouseEars; c++) this.m_mouseOnElements.push(this.m_mouseEarsOnBaseName + (c + 1)), this.m_mouseOffElements.push(this.m_mouseEarsOffBaseName + (c + 1));
    Application.log("earsOn: ");
    Application.log(this.m_mouseOnElements);
    this.initEars();
    this.m_txtScoreLeft = $(".ui_hud_messagepoint1");
    this.m_txtScoreRight = $(".ui_hud_messagepoint2");
    this.m_txtScoreMsgBar = $(".ui_hud_messagepoint3");
    this.m_txtMessage = $(".ui_hud_messagetext");
    this.m_txtMessage2 = $(".ui_hud_messagetext2");
    this.m_playerImage = null;
    switch (Global.selectedTeam) {
        case Global.TEAM_MICKEY:
            this.m_playerImage = Global.onHalfTime ? $(".ui_hud_fan02.f1") : $(".ui_hud_fan.f1");
            break;
        case Global.TEAM_MINNIE:
            this.m_playerImage = Global.onHalfTime ? $(".ui_hud_fan02.f2") : $(".ui_hud_fan.f2");
            break;
        case Global.TEAM_DONALD:
            this.m_playerImage = Global.onHalfTime ? $(".ui_hud_fan02.f3") : $(".ui_hud_fan.f3");
            break;
        case Global.TEAM_DAISY:
            this.m_playerImage = Global.onHalfTime ? $(".ui_hud_fan02.f4") : $(".ui_hud_fan.f4");
            break;
        case Global.TEAM_GOOFY:
            this.m_playerImage = Global.onHalfTime ? $(".ui_hud_fan02.f5") : $(".ui_hud_fan.f5");
            break;
        case Global.TEAM_PLUTO:
            this.m_playerImage = Global.onHalfTime ? $(".ui_hud_fan02.f6") : $(".ui_hud_fan.f6")
    }
    this.m_txtTimer = $(".ui_hud_timer.t1");
    this.m_txtTimer2 = $(".ui_hud_timer.t3");
    this.m_state = HudSoccer.STATE_NORMAL;
    this.m_state = HudSoccer.STATE_INIT;
    this.m_msgTime = 0;
    this.m_hasMsgFinished = !0;
    this.m_timeInState = 0;
    this.m_goalShowScoreTime = this.m_goalCelebrateTime = 2;
    this.m_goalMadeByBot = !1;
    this.targetCallback = this.onEndMessageGoal = this.onEndMessage = null;
    this.m_minAlpha = 0.1;
    this.m_maxAlpha = 1;
    this.m_alphaStep = 0;
    this.m_currentAlpha = this.m_maxAlpha;
    Global.onHalfTime ? this.setTeams(Global.enemyTeam, Global.selectedTeam) : (this.setTeams(Global.selectedTeam, Global.enemyTeam), Global.mickeyShots = 0);
    this.onRefreshEars(Global.mickeyShots);
    this.m_oldTime = Global.onHalfTime ? GameSoccer.instance.getMaxTime() :
        0;
    this.m_showingTrophy = !1;
    this.m_trophyTime = 0;
    this.m_onFxShoot = !1;
    this.m_fxCount = 0;
    this.opacity = 1;
    this.change = 0;
    this.showFxNoTime = !1;
    this.opacityFx = 0.5;
    this.changeFx = 0.1;
    this.m_needShowExtraFx = this.m_showingHud = !0;
    this.m_onFxExtra = !1;
    this.extraFxCount = HudSoccer.FX_COUNT;
    this.opacityFxExtra = 0.4;
    this.changeFxExtra = 0.08
}
goog.inherits(HudSoccer, SScreen);
HudSoccer.instance = null;
HudSoccer.MsgTime = 2E3;
HudSoccer.STATE_NORMAL = 0;
HudSoccer.STATE_GOAL_CELEBRATE = 1;
HudSoccer.STATE_GOAL_SHOW_SCORE = 2;
HudSoccer.STATE_SHOWING_MESSAGE = 3;
HudSoccer.STATE_INIT = 10;
HudSoccer.ACTION_ON_NORMAL = 10;
HudSoccer.ACTION_ON_GOAL_MADE = 11;
HudSoccer.ACTION_ON_SHOW_SCORE = 12;
HudSoccer.ACTION_DO_MESSAGE = 13;
HudSoccer.prototype.setGuiHTML = function() {
    this.css = " .ui_general_screen_bg {  top:0;  left:0;  width: 750px;  height: 500px;  background:url(media/images/ui_images/hud/gui_hud.png); } .ui_hud_button_pause {  position: absolute;  top: 12px;  left: 675px;  width: 60px;  height: 60px;  background: url(media/images/ui_images/buttons/gui_buttons_icons03.png) no-repeat right top;  cursor: pointer; } .ui_hud_button_pause.b1 {  background-position: -120px 0px; } .ui_hud_button_pause.b1:hover {  background-position: -180px 0px; } .ui_hud_special {  position: absolute;  pointer-events: none;  width: 37px;  height: 38px;  top: 23px;  background: url(media/images/ui_images/hud/gui_hud_special.png);  background-position: 0px 0px; } .ui_hud_special.s1 {  left: 399px; } .ui_hud_special.s2 {  left: 447px; } .ui_hud_special.s3 {  left: 497px; } .ui_hud_specialbase {  position: absolute;  pointer-events: none;  width: 155px;  height: 55px;  top: 15px;  background: url(media/images/ui_images/hud/gui_hud_special_base.png);  left: 388px } .ui_hud_specialfx {  position: absolute;  pointer-events: none;  width: 296px;  height: 161px;  top: 0px;  left: 322px;  background: url(media/images/ui_images/hud/gui_hud_special_fx.png);  background-position: 0px 0px; } .ui_hud_support {  position: absolute;  pointer-events: none;  width: 347px;  height: 64px;  left: 9px;  top: 15px;  background: url(media/images/ui_images/hud/gui_hud_support.png);  opacity: 0.8; } .ui_hud_timerbase {  position: absolute;  pointer-events: none;  width: 95px;  height: 52px;  left: 270px;  top: 28px;  background: url(media/images/ui_images/hud/gui_hud_timer_fx.png);  opacity: 0.8; } .ui_hud_timerextra {  position: absolute;  pointer-events: none;  width: 135px;  height: 96px;  left: 249px;  top: 9px;  background: url(media/images/ui_images/hud/gui_hud_timer_fx2.png);  opacity: 0.8; } .ui_hud_point {  position: absolute;  left: 236px;  width: 45px;  height: 34px;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 20px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always; } .ui_hud_point.p1 {  top: 21px; } .ui_hud_point.p2 {  top: 48px; } .ui_hud_teamname {  position: absolute;  left: 50px;  width: 154px;  height: 18px;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 14px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always; } .ui_hud_teamname.t1 {  top: 27px; } .ui_hud_teamname.t2 {  top: 52px; } .ui_hud_matchtime{  position: absolute;  top: 25px;  width: 65px;  height: 27px;  color: #242f39;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 18px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 285px; } .ui_hud_timer {  position: absolute;  top: 45px;  width: 26px;  height: 28px;  color: #242f39;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 18px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 285px; } .ui_hud_timer.t1 {  position: absolute;  left: 288px; } .ui_hud_timer.t2 {  position: absolute;  left: 305px; } .ui_hud_timer.t3 {  position: absolute;  left: 319px; } .ui_hud_confetti {  position: absolute;  width: 161px;  height: 442px;  top: 0px; } .ui_hud_confetti.c1 {  background: url('media/images/ui_images/hud/gui_hud_confetti01.png') no-repeat scroll 0 0 rgba(0, 0, 0, 0);  left: 0px; } .ui_hud_confetti.c2 {  background: url('media/images/ui_images/hud/gui_hud_confetti02.png') no-repeat scroll 0 0 rgba(0, 0, 0, 0);  width: 124px;  height: 350px;  left: 626px; } .ui_hud_pinleft {  position: absolute;  width: 31px;  height: 27px;  background: url('media/images/ui_images/hud/gui_hud_pin.png') no-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 19px;  left: 14px; } .ui_hud_pinleft.p1 {  background-position: 0px 0px; } .ui_hud_pinleft.p2 {  background-position: -31px  0px; } .ui_hud_pinleft.p3 {  background-position: -62px  0px; } .ui_hud_pinleft.p4 {  background-position: -93px  0px; } .ui_hud_pinleft.p5 {  background-position: -124px  0px; } .ui_hud_pinleft.p6 {  background-position: -155px  0px; } .ui_hud_pinright {  position: absolute;  width: 31px;  height: 27px;  background: url('media/images/ui_images/hud/gui_hud_pin.png') no-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 47px;  left: 14px; } .ui_hud_pinright.p1 {  background-position: 0px 0px; } .ui_hud_pinright.p2 {  background-position: -31px  0px; } .ui_hud_pinright.p3 {  background-position: -62px  0px; } .ui_hud_pinright.p4 {  background-position: -93px  0px; } .ui_hud_pinright.p5 {  background-position: -124px  0px; } .ui_hud_pinright.p6 {  background-position: -155px  0px; } .ui_hud_tutorialbase {  position: absolute;  pointer-events: none;  width: 369px;  height: 101px;  left: 0px;  top: 0px;  background: url(media/images/ui_images/popups/gui_popup_tutorial_base.png); } .ui_hud_tutorialtext {  position: absolute;  left: 18px;  top: 20px;  top: 21px;  width: 324px;  height: 56px;  color: #000000;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 15px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always; } .ui_hud_messagetext {  position: absolute;  left: 110px;  top: 197px;  width: 566px;  height: 51px;  color: #005189;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 30px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always; } .ui_hud_messagetext2 {  position: absolute;  left: 169px;  top: 180px;  width: 411px;  height: 77px;  color: #005189;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 32px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always; } .ui_hud_messagepoint1{  position: absolute;  top: 191px;  width: 45px;  height: 70px;  color: #005189;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 44px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 295px; } .ui_hud_messagepoint2 {  position: absolute;  top: 191px;  width: 45px;  height: 70px;  color: #005189;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 44px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 416px; } .ui_hud_messagepoint3 {  position: absolute;  top: 190px;  width: 45px;  height: 70px;  color: #005189;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 44px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 366px; } .ui_hud_messagebase {  position: absolute;  pointer-events: none;  width: 565px;  height: 208px;  left: 94px;  top: 119px;  background: url(media/images/ui_images/popups/gui_popups_message1.png); } .ui_hud_fan {  position: absolute;  left: 0px;  top: 294px;  width: 219px;  height: 206px;  display: table-cell; }  .ui_hud_fan.f1 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan01.png); }  .ui_hud_fan.f2 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan02.png); } .ui_hud_fan.f3 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan03.png); } .ui_hud_fan.f4 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan04.png); } .ui_hud_fan.f5 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan05.png); } .ui_hud_fan.f6 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan06.png); }  .ui_hud_fan02 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  left: 531px;  display: table-cell; } .ui_hud_fan02.f1 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character01.png); }  .ui_hud_fan02.f2 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character02.png); } .ui_hud_fan02.f3 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character03.png); } .ui_hud_fan02.f4 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character04.png); } .ui_hud_fan02.f5 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character05.png); } .ui_hud_fan02.f6 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character06.png); } .ui_hud_citytitle {  position: absolute;  left: 0px;  top: 432px;  width: 750px;  height: 46px;  color: #adfcff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 32px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_hud_trophies_text {  position: absolute;  left: 310px;  width: 260px;  height: 23px;  color: #000000;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 16px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always; } .ui_hud_trophies_text.t1 {  top: 423px;  color: #005189;  font-size: 18px; } .ui_hud_trophies_text.t2 {  top: 442px; } .ui_hud_trophy {  position: absolute;  top: 400px;  left: 210px;  width: 100px;  height: 100px;  background: url(media/images/ui_images/buttons/gui_buttons_trophies.png) no-repeat scroll 0 0 rgba(0, 0, 0, 0);  cursor: pointer; } .ui_hud_trophy.t1 {  background-position: 0px 0px; } .ui_hud_trophy.t2 {  background-position: -200px 0px; } .ui_hud_trophy.t3 {  background-position: -400px 0px; } .ui_hud_trophy.t4 {  background-position: -600px 0px; } .ui_hud_trophy.t5 {  background-position: -800px 0px; } .ui_hud_trophies_base {  position: absolute;  pointer-events: none;  left: 219px;  top: 407px;  width: 357px;  height: 87px;  background: url(media/images/ui_images/hud/gui_hud_trophies_base.png); } .ui_hud_bg {  top: 0;  left: 0;  width: 750px;  height: 500px;  background-color: #000000;  opacity: 1; }";
    this.html =
        "  \x3c!--<div class='ui_general_screen_bg'>--\x3e  <div class='ui_hud_trophies_base'></div>  <div class='ui_hud_trophies_text t1'>TITLE</div>  <div class='ui_hud_trophies_text t2'>TEXT</div>  <div class='ui_hud_trophy t1' id='btn_trophy1'></div>  <div class='ui_hud_trophy t2' id='btn_trophy2'></div>  <div class='ui_hud_trophy t3' id='btn_trophy3'></div>  <div class='ui_hud_trophy t4' id='btn_trophy4'></div>  <div class='ui_hud_trophy t5' id='btn_trophy5'></div>  <div class='ui_hud_confetti c1'></div>   <div class='ui_hud_confetti c2'></div>  <div class='ui_hud_fan f1'></div>  <div class='ui_hud_fan f2'></div>  <div class='ui_hud_fan f3'></div>  <div class='ui_hud_fan f4'></div>  <div class='ui_hud_fan f5'></div>   <div class='ui_hud_fan f6'></div>  <div class='ui_hud_fan02 f1'></div>  <div class='ui_hud_fan02 f2'></div>  <div class='ui_hud_fan02 f3'></div>  <div class='ui_hud_fan02 f4'></div>  <div class='ui_hud_fan02 f5'></div>   <div class='ui_hud_fan02 f6'></div>   <div class='ui_hud_support'></div>  <div class='ui_hud_pinleft p1' id='img_pinl01'></div>  <div class='ui_hud_pinleft p2' id='img_pinl02'></div>  <div class='ui_hud_pinleft p3' id='img_pinl03'></div>  <div class='ui_hud_pinleft p4' id='img_pinl04'></div>  <div class='ui_hud_pinleft p5' id='img_pinl05'></div>  <div class='ui_hud_pinleft p6' id='img_pinl06'></div>  <div class='ui_hud_pinright p1' id='img_pinr01'></div>  <div class='ui_hud_pinright p2' id='img_pinr02'></div>  <div class='ui_hud_pinright p3' id='img_pinr03'></div>  <div class='ui_hud_pinright p4' id='img_pinr04'></div>  <div class='ui_hud_pinright p5' id='img_pinr05'></div>  <div class='ui_hud_pinright p6' id='img_pinr06'></div>  <div class='ui_hud_point p1'>00</div>  <div class='ui_hud_point p2'>00</div>  <div class='ui_hud_teamname t1'>TEAM NAME01</div>  <div class='ui_hud_teamname t2'>TEAM NAME02</div>  <div class='ui_hud_timerbase'></div>  <div class='ui_hud_timerextra'></div>  <div class='ui_hud_timer t1'>00</div> <div class='ui_hud_timer t2'>:</div>  <div class='ui_hud_timer t3'>00</div>  <div class='ui_hud_matchtime'>1T</div>  <div class='ui_hud_specialbase'></div>  <div class='ui_hud_specialoff i2'></div>   <div class='ui_hud_specialoff i3'></div>  <div class='ui_hud_special s1'></div>  <div class='ui_hud_special s2'></div>  <div class='ui_hud_special s3'></div>  <div class='ui_hud_specialfx'></div>  <div class='ui_hud_button_pause b1' id='btn_pause'></div>  <div class='ui_general_button_skip b1' id='btn_skip'></div>    <div class='ui_hud_tutorialbase'>   <div class='ui_hud_tutorialtext'>tutorial</div>  </div>  <div class='ui_hud_messagebase'></div>  <div class='ui_hud_messagetext'>START</div>  <div class='ui_hud_messagetext2'>MATCH COMPLETED</div>    <div class='ui_hud_messagepoint1'>00</div>   <div class='ui_hud_messagepoint2'>00</div>   <div class='ui_hud_messagepoint3'>-</div>   <div class='ui_hud_bg'></div>  <div class='ui_hud_citytitle'>CITY</div>";
    HudSoccer.superClass_.setGuiHTML.call(this)
};
HudSoccer.prototype.free = function() {
    this.m_timeElapse = null;
    HudSoccer.superClass_.free.call(this)
};
HudSoccer.prototype.initHalfSign = function() {
    !1 == Global.onHalfTime ? $(".ui_hud_matchtime").html(Application.strings.STR_HUD_HALF_1) : $(".ui_hud_matchtime").html(Application.strings.STR_HUD_HALF_2)
};
HudSoccer.prototype.showHud = function(a) {
    $("#btn_skip").css("display", "none");
    this.m_showingHud = a;
    var b = 1;
    !1 == a && (b = 0);
    $(".ui_hud_support").css("opacity", b);
    $(".ui_hud_pinleft.p1").css("opacity", b);
    $(".ui_hud_pinleft.p2").css("opacity", b);
    $(".ui_hud_pinleft.p3").css("opacity", b);
    $(".ui_hud_pinleft.p4").css("opacity", b);
    $(".ui_hud_pinleft.p5").css("opacity", b);
    $(".ui_hud_pinleft.p6").css("opacity", b);
    $(".ui_hud_pinright.p1").css("opacity", b);
    $(".ui_hud_pinright.p2").css("opacity", b);
    $(".ui_hud_pinright.p3").css("opacity",
        b);
    $(".ui_hud_pinright.p4").css("opacity", b);
    $(".ui_hud_pinright.p5").css("opacity", b);
    $(".ui_hud_pinright.p6").css("opacity", b);
    $(".ui_hud_point.p1").css("opacity", b);
    $(".ui_hud_point.p2").css("opacity", b);
    $(".ui_hud_teamname.t1").css("opacity", b);
    $(".ui_hud_teamname.t2").css("opacity", b);
    $(".ui_hud_timer").css("opacity", b);
    $(".ui_hud_specialoff.i1").css("opacity", b);
    $(".ui_hud_specialoff.i2").css("opacity", b);
    $(".ui_hud_specialoff.i3").css("opacity", b);
    $(".ui_hud_special.s1").css("opacity", b);
    $(".ui_hud_special.s2").css("opacity",
        b);
    $(".ui_hud_special.s3").css("opacity", b);
    $(".ui_hud_button_pause.b1").css("opacity", b);
    $(".ui_hud_buttons_sound.s1").css("opacity", b);
    $(".ui_hud_buttons_sound.s2").css("opacity", b);
    $(".ui_hud_matchtime").css("opacity", b);
    $(".ui_hud_specialbase").css("opacity", b);
    $(".ui_hud_timerbase").css("display", "none");
    this.showFxNoTime = !1
};
HudSoccer.prototype.showScoreHud = function(a) {
    $(".ui_hud_support").css("opacity", "0.3");
    $(".ui_hud_point.p1").css("opacity", "0.3");
    $(".ui_hud_point.p2").css("opacity", "0.3");
    $(".ui_hud_point.p3").css("opacity", "0.3");
    $(".ui_hud_timer").css("opacity", "0.3");
    $(".ui_hud_pinleft.p1").css("opacity", "0.3");
    $(".ui_hud_pinleft.p2").css("opacity", "0.3");
    $(".ui_hud_pinleft.p3").css("opacity", "0.3");
    $(".ui_hud_pinleft.p4").css("opacity", "0.3");
    $(".ui_hud_pinleft.p5").css("opacity", "0.3");
    $(".ui_hud_pinleft.p6").css("opacity",
        "0.3");
    $(".ui_hud_pinright.p1").css("opacity", "0.3");
    $(".ui_hud_pinright.p2").css("opacity", "0.3");
    $(".ui_hud_pinright.p3").css("opacity", "0.3");
    $(".ui_hud_pinright.p4").css("opacity", "0.3");
    $(".ui_hud_pinright.p5").css("opacity", "0.3");
    $(".ui_hud_pinright.p6").css("opacity", "0.3");
    !0 == a && ($(".ui_hud_support").css("opacity", "1"), $(".ui_hud_point.p1").css("opacity", "1"), $(".ui_hud_point.p2").css("opacity", "1"), $(".ui_hud_point.p3").css("opacity", "1"), $(".ui_hud_timer").css("opacity", "1"), $(".ui_hud_pinleft.p1").css("opacity",
        "1"), $(".ui_hud_pinleft.p2").css("opacity", "1"), $(".ui_hud_pinleft.p3").css("opacity", "1"), $(".ui_hud_pinleft.p4").css("opacity", "1"), $(".ui_hud_pinleft.p5").css("opacity", "1"), $(".ui_hud_pinleft.p6").css("opacity", "1"), $(".ui_hud_pinright.p1").css("opacity", "1"), $(".ui_hud_pinright.p2").css("opacity", "1"), $(".ui_hud_pinright.p3").css("opacity", "1"), $(".ui_hud_pinright.p4").css("opacity", "1"), $(".ui_hud_pinright.p5").css("opacity", "1"), $(".ui_hud_pinright.p6").css("opacity", "1"))
};
HudSoccer.prototype.showTrophy = function(a) {
    this.m_trophyTime = HudSoccer.TROPHY_TIME;
    this.m_showingTrophy = !0;
    $(".ui_hud_trophies_base").css("display", "");
    $(".ui_hud_trophies_text.t1").css("display", "");
    $(".ui_hud_trophies_text.t2").css("display", "");
    $(".ui_hud_trophy.t1").css("display", "none");
    $(".ui_hud_trophy.t2").css("display", "none");
    $(".ui_hud_trophy.t3").css("display", "none");
    $(".ui_hud_trophy.t4").css("display", "none");
    $(".ui_hud_trophy.t5").css("display", "none");
    switch (a) {
        case 1:
            $(".ui_hud_trophy.t1").css("display",
                "");
            $(".ui_hud_trophies_text.t1").html(Application.strings.STR_TROPHIE1);
            $(".ui_hud_trophies_text.t2").html(Application.strings.STR_TROPHIE1_TEXT2);
            break;
        case 1:
            $(".ui_hud_trophy.t2").css("display", "");
            $(".ui_hud_trophies_text.t1").html(Application.strings.STR_TROPHIE2);
            $(".ui_hud_trophies_text.t2").html(Application.strings.STR_TROPHIE2_TEXT2);
            break;
        case 1:
            $(".ui_hud_trophy.t3").css("display", "");
            $(".ui_hud_trophies_text.t1").html(Application.strings.STR_TROPHIE3);
            $(".ui_hud_trophies_text.t2").html(Application.strings.STR_TROPHIE3_TEXT2);
            break;
        case 1:
            $(".ui_hud_trophy.t4").css("display", "");
            $(".ui_hud_trophies_text.t1").html(Application.strings.STR_TROPHIE4);
            $(".ui_hud_trophies_text.t2").html(Application.strings.STR_TROPHIE4_TEXT2);
            break;
        case 1:
            $(".ui_hud_trophy.t5").css("display", ""), $(".ui_hud_trophies_text.t1").html(Application.strings.STR_TROPHIE5), $(".ui_hud_trophies_text.t2").html(Application.strings.STR_TROPHIE5_TEXT2)
    }
};
HudSoccer.prototype.setScore = function(a) {
    this.m_txtScore.html(a)
};
HudSoccer.prototype.setLives = function(a) {
    this.txtPlayerLive.html(a)
};
HudSoccer.prototype.setEnergyBar = function(a) {
    100 < a && (a = 100);
    this.playerHpBar.css("width", 1.16 * a + "px")
};
HudSoccer.prototype.setEnemyEnergyBar = function(a) {
    100 < a && (a = 100);
    this.enemyHpBar.css("width", 1.16 * a + "px")
};
HudSoccer.prototype.onDraw = function(a) {};
HudSoccer.prototype.setTeams = function(a, b) {
    $(".ui_hud_pinleft").css("display", "none");
    $(".ui_hud_pinright").css("display", "none");
    switch (a) {
        case Global.TEAM_MICKEY:
            $(".ui_hud_teamname.t1").html(Application.strings.STR_SELECTED_TEAM_MICKEY.toUpperCase());
            $("#img_pinl01").css("display", "");
            break;
        case Global.TEAM_MINNIE:
            $(".ui_hud_teamname.t1").html(Application.strings.STR_SELECTED_TEAM_MINNIE.toUpperCase());
            $("#img_pinl04").css("display", "");
            break;
        case Global.TEAM_DONALD:
            $(".ui_hud_teamname.t1").html(Application.strings.STR_SELECTED_TEAM_DONALD.toUpperCase());
            $("#img_pinl06").css("display", "");
            break;
        case Global.TEAM_DAISY:
            $(".ui_hud_teamname.t1").html(Application.strings.STR_SELECTED_TEAM_DAISY.toUpperCase());
            $("#img_pinl03").css("display", "");
            break;
        case Global.TEAM_GOOFY:
            $(".ui_hud_teamname.t1").html(Application.strings.STR_SELECTED_TEAM_GOOFY.toUpperCase());
            $("#img_pinl05").css("display", "");
            break;
        case Global.TEAM_PLUTO:
            $(".ui_hud_teamname.t1").html(Application.strings.STR_SELECTED_TEAM_PLUTO.toUpperCase()), $("#img_pinl02").css("display", "")
    }
    switch (b) {
        case Global.TEAM_MICKEY:
            $(".ui_hud_teamname.t2").html(Application.strings.STR_SELECTED_TEAM_MICKEY.toUpperCase());
            $("#img_pinr01").css("display", "");
            break;
        case Global.TEAM_MINNIE:
            $(".ui_hud_teamname.t2").html(Application.strings.STR_SELECTED_TEAM_MINNIE.toUpperCase());
            $("#img_pinr04").css("display", "");
            break;
        case Global.TEAM_DONALD:
            $(".ui_hud_teamname.t2").html(Application.strings.STR_SELECTED_TEAM_DONALD.toUpperCase());
            $("#img_pinr06").css("display", "");
            break;
        case Global.TEAM_DAISY:
            $(".ui_hud_teamname.t2").html(Application.strings.STR_SELECTED_TEAM_DAISY.toUpperCase());
            $("#img_pinr03").css("display", "");
            break;
        case Global.TEAM_GOOFY:
            $(".ui_hud_teamname.t2").html(Application.strings.STR_SELECTED_TEAM_GOOFY.toUpperCase());
            $("#img_pinr05").css("display", "");
            break;
        case Global.TEAM_PLUTO:
            $(".ui_hud_teamname.t2").html(Application.strings.STR_SELECTED_TEAM_PLUTO.toUpperCase()), $("#img_pinr02").css("display", "")
    }
};
HudSoccer.prototype.init = function() {
    HudSoccer.superClass_.init.call(this);
    $(".ui_hud_trophies_base").css("display", "none");
    $(".ui_hud_trophies_text.t1").css("display", "none");
    $(".ui_hud_trophies_text.t2").css("display", "none");
    $(".ui_hud_trophy.t1").css("display", "none");
    $(".ui_hud_trophy.t2").css("display", "none");
    $(".ui_hud_trophy.t3").css("display", "none");
    $(".ui_hud_trophy.t4").css("display", "none");
    $(".ui_hud_trophy.t5").css("display", "none");
    $(".ui_hud_tutorialbase").css("display", "none");
    $(".ui_hud_tutorialtext").css("display",
        "none");
    $(".ui_hud_baseplayer").css("pointer-events", "none");
    $(".ui_enemybase").css("pointer-events", "none");
    $(".ui_hud_messagebase").css("pointer-events", "none");
    $(".ui_hud_combobase").css("pointer-events", "none");
    $(".ui_hud_messagetext").css("pointer-events", "none");
    $(".ui_hud_messagetext2").css("pointer-events", "none");
    $(".ui_hud_messagetext").html("");
    $(".ui_hud_messagetext2").html("");
    this.addClickListener("btn_pause");
    this.addClickListener("btn_soundon");
    this.addClickListener("btn_soundoff");
    $(".ui_general_popup_bg").css("display", "none");
    $(".ui_hud_fan.f1").css("display", "none");
    $(".ui_hud_fan.f2").css("display", "none");
    $(".ui_hud_fan.f3").css("display", "none");
    $(".ui_hud_fan.f4").css("display", "none");
    $(".ui_hud_fan.f5").css("display", "none");
    $(".ui_hud_fan.f6").css("display", "none");
    $(".ui_hud_fan02.f1").css("display", "none");
    $(".ui_hud_fan02.f2").css("display", "none");
    $(".ui_hud_fan02.f3").css("display", "none");
    $(".ui_hud_fan02.f4").css("display", "none");
    $(".ui_hud_fan02.f5").css("display",
        "none");
    $(".ui_hud_fan02.f6").css("display", "none");
    $(".ui_hud_messagebase").css("display", "none");
    $(".ui_hud_messagepoint1").css("display", "none");
    $(".ui_hud_messagepoint2").css("display", "none");
    $(".ui_hud_messagepoint3").css("display", "none");
    this.setElementVisibility(".ui_hud_special.s1", !1);
    this.setElementVisibility(".ui_hud_special.s2", !1);
    this.setElementVisibility(".ui_hud_special.s3", !1);
    this.setElementVisibility(".ui_hud_special.s4", !1);
    this.setElementVisibility(".ui_hud_special.s5", !1);
    this.setElementVisibility("#btn_soundon", !Global.app.isSoundOn());
    this.setElementVisibility("#btn_soundoff", Global.app.isSoundOn());
    $(".ui_hud_point.p1").html("" + Global.scoreTeamLeft);
    $(".ui_hud_point.p2").html("" + Global.scoreTeamRight);
    $(".ui_hud_confetti.c1").css("display", "none");
    $(".ui_hud_confetti.c2").css("display", "none");
    $("#btn_skip").css("display", "none");
    $(".ui_hud_timerextra").css("display", "none");
    $(".ui_hud_specialfx").css("display", "none");
    $(".ui_hud_bg").css("display", "none");
    $(".ui_hud_bg").css("pointer-events",
        "none");
    $(".ui_hud_timer.t2").html(Application.strings.STR_HUD_TIMER);
    $(".ui_hud_timerbase").css("display", "none");
    $(".ui_hud_citytitle").css("display", "none")
};
HudSoccer.prototype.showCityName = function(a) {
    $(".ui_hud_citytitle").css("display", "");
    $(".ui_hud_citytitle").html(a)
};
HudSoccer.prototype.hideCityName = function() {
    $(".ui_hud_citytitle").css("display", "none")
};
HudSoccer.prototype.setMickeyShots = function(a) {
    for (var b = 1; b <= a; b++) $(".ui_hud_special.s" + b).css("display", ""), $(".ui_hud_specialoff.i" + b).css("display", "none");
    for (b = a; 3 >= b; b++) $(".ui_hud_special.s " + b).css("display", "none"), $(".ui_hud_specialoff.i" + b).css("display", "")
};
HudSoccer.prototype.initScore = function(a, b) {
    this.m_txtScoreLeft.html("" + a);
    $(".ui_hud_point.p1").html("" + a);
    this.m_txtScoreRight.html("" + b);
    $(".ui_hud_point.p2").html("" + b)
};
HudSoccer.prototype.initEars = function() {
    for (var a = 0; a < this.m_mouseEarsOnBaseName.length; a++) this.setElementVisibility(this.m_mouseOnElements[a], !1), this.setElementVisibility(this.m_mouseOffElements[a], !0)
};
HudSoccer.prototype.onClick = function(a) {
    switch (a.id) {
        case "btn_pause":
            GuiGame.instance.addPopup(GuiPopupPause, 0, 0);
            break;
        case "btn_soundon":
            $("#btn_soundon").css("display", "none");
            $("#btn_soundoff").css("display", "");
            Global.app.toogleMute();
            break;
        case "btn_soundoff":
            $("#btn_soundoff").css("display", "none"), $("#btn_soundon").css("display", ""), Global.app.toogleMute()
    }
};
HudSoccer.prototype.changeState = function(a) {
    if (a === HudSoccer.STATE_NORMAL || a === HudSoccer.STATE_GOAL_CELEBRATE || a === HudSoccer.STATE_GOAL_SHOW_SCORE) this.m_state = a
};
HudSoccer.prototype.doMsg = function(a, b, c, d) {
    this.m_txtScoreLeft.css("display", "none");
    this.m_txtScoreRight.css("display", "none");
    this.m_txtScoreMsgBar.css("display", "none");
    this.m_hasMsgFinished = !1;
    this.m_txtMessage.html("" + a);
    this.m_txtMessage2.html("" + b);
    this.m_msgTime = c;
    this.m_alphaStep = (this.m_maxAlpha - this.m_minAlpha) / this.m_msgTime;
    a = {};
    "undefined" !== typeof d && (a.active = d);
    this.transition(HudSoccer.ACTION_DO_MESSAGE, a)
};
HudSoccer.prototype.hasMsgFinished = function() {
    return this.m_hasMsgFinished
};
HudSoccer.prototype.showScoreMessage = function(a) {
    this.m_state = HudSoccer.STATE_GOAL_CELEBRATE;
    this.transition(HudSoccer.ACTION_ON_SHOW_SCORE);
    this.m_goalMadeByBot = !a
};
HudSoccer.prototype.transition = function(a, b) {
    switch (this.m_state) {
        case HudSoccer.STATE_SHOWING_MESSAGE:
            a === HudSoccer.ACTION_ON_NORMAL && (this.m_state = HudSoccer.STATE_NORMAL, this.m_hasMsgFinished = !0, this.panelMsg.css("display", "none"), this.m_txtMessage.html(""), this.m_txtMessage2.html(""));
            break;
        case HudSoccer.STATE_NORMAL:
            a === HudSoccer.ACTION_ON_GOAL_MADE ? (this.m_state = HudSoccer.STATE_GOAL_CELEBRATE, this.panelMsg.css("display", ""), this.m_txtMessage.html(Application.strings.STR_GOAL_1), this.m_txtMessage.css("opacity",
                "1"), this.m_txtMessage2.html(Application.strings.STR_GOAL_2), this.m_txtMessage2.css("opacity", "1"), this.panelMsg.css("opacity", "1"), this.m_timeInState = 0) : a === HudSoccer.ACTION_DO_MESSAGE && (this.m_state = HudSoccer.STATE_SHOWING_MESSAGE, "undefined" !== typeof b && typeof("undefined" !== b.active) && (!1 === b.active ? (this.panelMsg.css("display", "none"), this.m_txtMessage.html(""), this.m_txtMessage2.html("")) : this.panelMsg.css("display", "")), this.m_timeInState = 0);
            break;
        case HudSoccer.STATE_GOAL_CELEBRATE:
            if (a ===
                HudSoccer.ACTION_ON_NORMAL && (this.m_state = HudSoccer.STATE_NORMAL, this.panelMsg.css("display", "none"), this.m_txtMessage.html(""), this.m_txtMessage2.html(""), this.onEndMessage && this.targetCallback)) this.targetCallback[this.onEndMessage]();
            a === HudSoccer.ACTION_ON_SHOW_SCORE && (this.m_state = HudSoccer.STATE_GOAL_SHOW_SCORE, this.m_txtMessage.html(""), this.m_txtMessage2.html(""), this.panelMsg.css("display", ""), this.m_txtScoreLeft.css("display", ""), this.m_txtScoreRight.css("display", ""), this.m_txtScoreMsgBar.css("display",
                ""), !1 === this.m_goalMadeByBot && this.m_playerImage.css("display", ""), this.m_timeInState = 0);
            break;
        case HudSoccer.STATE_GOAL_SHOW_SCORE:
            a === HudSoccer.ACTION_ON_NORMAL && (this.m_state = HudSoccer.STATE_SHOWING_MESSAGE, this.panelMsg.css("display", "none"), this.m_txtScoreLeft.css("display", "none"), this.m_txtScoreRight.css("display", "none"), this.m_txtScoreMsgBar.css("display", "none"), this.m_playerImage.css("display", "none"), this.m_txtMessage.html(""), this.m_txtMessage2.html(""), this.showConfetti(!1), this.m_timeInState =
                0);
            break;
        case HudSoccer.STATE_INIT:
            a === HudSoccer.ACTION_DO_MESSAGE && (this.m_state = HudSoccer.STATE_SHOWING_MESSAGE, "undefined" !== typeof b && typeof("undefined" !== b.active) && (!1 === b.active ? (this.panelMsg.css("display", "none"), this.m_txtMessage.html(""), this.m_txtMessage2.html("")) : this.panelMsg.css("display", "")), this.m_timeInState = 0)
    }
};
HudSoccer.prototype.initTransition = function() {
    this.opacity = 1;
    this.fadeObject.css("display", "");
    this.fadeObject.css("opacity", 1);
    this.m_onFade = !0
};
HudSoccer.prototype.update = function(a) {
    HudSoccer.superClass_.update.call(this, a);
    if (!0 == this.m_onFade && (this.opacity -= 0.03, this.fadeObject.css("opacity", this.opacity), 0.04 > this.opacity && (this.fadeObject.css("opacity", 0), this.fadeObject.css("display", "none"), this.m_onFade = !1, this.onEndTransition && this.targetCallback))) this.targetCallback[this.onEndTransition]();
    !0 == this.showFxNoTime && (this.opacityFx += this.changeFx, 0.4 > this.opacityFx && (this.changeFx = -this.changeFx), 1 < this.opacityFx && (this.changeFx = -this.changeFx), $(".ui_hud_timerbase").css("opacity", this.opacityFx));
    !0 == this.m_onFxShoot && (this.opacity += this.change, 0.4 > this.opacity && (this.change = -this.change, this.m_fxCount--), 1 < this.opacity && (this.change = -this.change), $(".ui_hud_specialfx").css("opacity", this.opacity), 0 >= this.m_fxCount && (this.m_onFxShoot = !1, $(".ui_hud_specialfx").css("opacity", 1), $(".ui_hud_specialfx").css("display", "none")));
    !0 == this.m_onFxExtra && (this.opacityFxExtra += this.changeFxExtra, 0.4 > this.opacityFxExtra && (this.changeFxExtra = -this.changeFxExtra, this.extraFxCount--), 1 < this.opacityFxExtra && (this.changeFxExtra = -this.changeFxExtra), $(".ui_hud_timerextra").css("opacity", this.opacityFxExtra), 0 >= this.extraFxCount && (this.m_onFxExtra = !1, $(".ui_hud_timerextra").css("opacity", 1), $(".ui_hud_timerextra").css("display", "none")));
    !0 == this.m_showingTrophy && (this.m_trophyTime -= a, 0 > this.m_trophyTime && (this.m_showingTrophy = !1, $(".ui_hud_trophies_base").css("display", "none"), $(".ui_hud_trophies_text.t1").css("display", "none"), $(".ui_hud_trophies_text.t2").css("display",
        "none"), $(".ui_hud_trophy.t1").css("display", "none"), $(".ui_hud_trophy.t2").css("display", "none"), $(".ui_hud_trophy.t3").css("display", "none"), $(".ui_hud_trophy.t4").css("display", "none"), $(".ui_hud_trophy.t5").css("display", "none")));
    this.m_timeInState += a / 1E3;
    switch (this.m_state) {
        case HudSoccer.STATE_SHOWING_MESSAGE:
            if (this.m_timeInState > this.m_msgTime && (this.m_timeInState = 0, this.transition(HudSoccer.ACTION_ON_NORMAL), this.onEndMessage && this.targetCallback)) this.targetCallback[this.onEndMessage]();
            break;
        case HudSoccer.STATE_NORMAL:
            a = GameSoccer.instance.getElapsedTime();
            var b = GameSoccer.instance.getMaxTime();
            !0 == this.m_showingHud && 0 <= b - a + Global.extraTime && this.updateTimer(a, b);
            break;
        case HudSoccer.STATE_GOAL_CELEBRATE:
            this.m_timeInState > this.m_goalCelebrateTime && this.transition(HudSoccer.ACTION_ON_NORMAL);
            break;
        case HudSoccer.STATE_GOAL_SHOW_SCORE:
            if (this.m_timeInState > this.m_goalShowScoreTime && (this.transition(HudSoccer.ACTION_ON_NORMAL), this.onEndMessageGoal && this.targetCallback)) this.targetCallback[this.onEndMessageGoal]()
    }
};
HudSoccer.prototype.state = function() {
    return this.m_state
};
HudSoccer.prototype.onKeyDown = function(a) {
    HudSoccer.superClass_.onKeyDown.call(this, a);
    if (SGame.instance) SGame.instance.onKeyDown(a)
};
HudSoccer.prototype.onKeyUp = function(a) {
    HudSoccer.superClass_.onKeyUp.call(this, a);
    if (SGame.instance) SGame.instance.onKeyUp(a)
};
HudSoccer.prototype.onMouseUp = function(a) {
    HudSoccer.superClass_.onMouseUp.call(this, a);
    if (SGame.instance) SGame.instance.onMouseUp(a)
};
HudSoccer.prototype.onMouseDown = function(a) {
    HudSoccer.superClass_.onMouseDown.call(this, a);
    if (SGame.instance) SGame.instance.onMouseDown(a)
};
HudSoccer.prototype.onMouseMove = function(a) {
    HudSoccer.superClass_.onMouseMove.call(this, a);
    if (SGame.instance) SGame.instance.onMouseMove(a)
};
HudSoccer.prototype.setElementVisibility = function(a, b) {
    !0 === b ? $(a).css("display", "") : $(a).css("display", "none")
};
HudSoccer.prototype.showFxShoot = function() {
    $(".ui_hud_specialfx").css("display", "");
    this.m_fxCount = HudSoccer.FX_COUNT;
    this.m_onFxShoot = !0;
    this.opacity = 0.4;
    this.change = 0.08;
    $(".ui_hud_specialfx").css("opacity", this.opacity)
};
HudSoccer.prototype.showFxExtra = function() {
    $(".ui_hud_timerextra").css("display", "");
    this.extraFxCount = HudSoccer.FX_COUNT;
    this.m_needShowExtraFx = !1;
    this.m_onFxExtra = !0;
    this.opacityFxExtra = 0.4;
    this.changeFxExtra = 0.08;
    $(".ui_hud_timerextra").css("opacity", this.opacityFxExtra)
};
HudSoccer.prototype.onRefreshEars = function(a) {
    a -= 1;
    if (0 <= a)
        for (var b = 0; b < this.m_maxMouseEars; b++) b <= a ? (this.setElementVisibility(this.m_mouseOffElements[b], !1), this.setElementVisibility(this.m_mouseOnElements[b], !0)) : (this.setElementVisibility(this.m_mouseOffElements[b], !0), this.setElementVisibility(this.m_mouseOnElements[b], !1));
    else
        for (b = 0; b < this.m_maxMouseEars; b++) this.setElementVisibility(this.m_mouseOffElements[b], !0), this.setElementVisibility(this.m_mouseOnElements[b], !1)
};
HudSoccer.prototype.showConfetti = function(a) {
    !0 === a ? ($(".ui_hud_confetti.c1").css("display", "block"), $(".ui_hud_confetti.c2").css("display", "block")) : ($(".ui_hud_confetti.c1").css("display", "none"), $(".ui_hud_confetti.c2").css("display", "none"))
};
HudSoccer.prototype.setTimer = function(a) {
    var b = a;
    a = parseInt(b / 6E4, 10);
    a = 10 > a ? "0" + a : "" + a;
    b = parseInt(b % 6E4, 10);
    b = parseInt(b / 1E3, 10);
    b = 10 > b ? "0" + b : "" + b;
    this.m_txtTimer.html(a);
    this.m_txtTimer2.html(b)
};
HudSoccer.prototype.updateTimer = function(a, b) {
    var c = a + (Global.onHalfTime ? b : 0);
    if (c >= this.m_oldTime + b / 900) {
        this.m_oldTime = c;
        var d = 27E5 * c / b,
            c = parseInt(d / 6E4, 10),
            c = 10 > c ? "0" + c : "" + c,
            d = parseInt(d % 6E4, 10),
            d = parseInt(d / 1E3, 10),
            d = 10 > d ? "0" + d : "" + d;
        !1 == this.showFxNoTime && (!1 == Global.onHalfTime && 40 <= parseInt(c, 10) && (this.showFxNoTime = !0, $(".ui_hud_timerbase").css("display", ""), Global.app.playSound("dko_minigame_warning")), !0 == Global.onHalfTime && 85 <= parseInt(c, 10) && (this.showFxNoTime = !0, $(".ui_hud_timerbase").css("display",
            ""), Global.app.playSound("dko_minigame_warning")));
        !0 == Global.onHalfTime && 90 <= parseInt(c, 10) && (!0 == this.m_needShowExtraFx && this.showFxExtra(), c = parseInt(c, 10) - 90, c = 10 > c ? "0" + c : "" + c);
        this.m_txtTimer.html(c);
        this.m_txtTimer2.html(d)
    }
};
HudSoccer.prototype.onMakeGoal = function(a, b, c, d) {
    this.m_txtScoreLeft.html("" + a);
    $(".ui_hud_point.p1").html("" + a);
    this.m_txtScoreRight.html("" + b);
    $(".ui_hud_point.p2").html("" + b);
    !0 == c && (b = a);
    this.m_goalMadeByBot = d;
    !1 === d && (this.showConfetti(!0), Global.data.checkAchievementHatTrick(b), Global.savedNumData[Global.INDEX_ACH_COUNTER_5]++, Global.data.checkAchievementRockScorer(), Common.saveData(Global.KEY_NUM_DATA, Common.storageString(Global.savedNumData)));
    this.transition(HudSoccer.ACTION_ON_GOAL_MADE)
};
HudSoccer.prototype.onGainEar = function() {
    var a = GameSoccer.instance.getSuperShootCounter();
    if (a < Team.SUPERSHOT_TOTAL) {
        GameSoccer.instance.setSuperShootCounter(a + 1);
        Application.log("current super shoot counter: " + GameSoccer.instance.getSuperShootCounter());
        for (var b = 0; b < this.m_maxMouseEars; b++) b <= a ? (this.setElementVisibility(this.m_mouseOffElements[b], !1), this.setElementVisibility(this.m_mouseOnElements[b], !0)) : (this.setElementVisibility(this.m_mouseOffElements[b], !0), this.setElementVisibility(this.m_mouseOnElements[b], !1))
    }
};
HudSoccer.prototype.onLoseEar = function() {
    var a = GameSoccer.instance.getSuperShootCounter();
    if (0 < a) {
        GameSoccer.instance.setSuperShootCounter(a - 1);
        Application.log("current super shoot counter: " + GameSoccer.instance.getSuperShootCounter());
        for (var b = 0; b < this.m_maxMouseEars; b++) b < a - 1 ? (this.setElementVisibility(this.m_mouseOffElements[b], !1), this.setElementVisibility(this.m_mouseOnElements[b], !0)) : (this.setElementVisibility(this.m_mouseOffElements[b], !0), this.setElementVisibility(this.m_mouseOnElements[b], !1))
    }
};
HudSoccer.TROPHY_TIME = 2500;
HudSoccer.FX_COUNT = 3;

function WorldSoccer(a, b) {
    SCC_World.call(this, a, b);
    this.goalMaxY = this.goalMinY = this.limitMaxY = this.limitMinY = this.limitMaxX = this.limitMinX = 0;
    this.m_initGame = !0;
    this.m_mousePositionOld = new Point(0, 0);
    this.m_initHoldSwipePos = new Point(0, 0);
    this.m_changeDirectionLength = 0;
    this.m_onHoldSwipe = !1;
    this.ballon = this.teamBots = this.teamUsers = this.teamRight = this.teamLeft = null;
    this.players = [];
    this.m_dragSwipeSpeed = parseInt(Application.config.SoccerGeneral.dragSwipeSpeed, 10);
    this.m_powerUpTime = this.m_powerUpTimeTotal =
        parseInt(Application.config.SoccerGeneral.itemTimeSpawn, 10);
    this.m_itemProbTurbo = parseFloat(Application.config.SoccerGeneral.itemProbTurbo);
    this.m_itemProbMickey = parseFloat(Application.config.SoccerGeneral.itemProbMickey);
    this.m_touchInitY = this.m_touchInitX = this.m_mouseHoldTime = this.m_timeSelector = 0;
    this.m_lines = [];
    this.m_lastLine = void 0;
    this.m_mouseState = WorldSoccer.MOUSE_WAIT;
    this.m_mouseCurrentPos = new Point;
    this.m_onCornerKick = this.m_onThrowIn = !1;
    this.m_clipTap = null;
    this.m_clipTapPosition = new Point(0,
        0);
    this.m_onWait = this.m_isPaused = !1;
    this.m_timeWait = 0;
    this.m_goalKickTeamDirection = -1;
    this.m_kickoffMoveCount = 0;
    this.m_teamGoal = -1;
    this.m_positionPowerups = [];
    this.m_powerupsIndexUsed = [];
    this.m_positionPowerups.push(WorldSoccer.POSITION_POWERUP_1);
    this.m_powerupsIndexUsed.push(0);
    this.m_positionPowerups.push(WorldSoccer.POSITION_POWERUP_2);
    this.m_powerupsIndexUsed.push(0);
    this.m_positionPowerups.push(WorldSoccer.POSITION_POWERUP_3);
    this.m_powerupsIndexUsed.push(0);
    this.m_positionPowerups.push(WorldSoccer.POSITION_POWERUP_4);
    this.m_powerupsIndexUsed.push(0);
    this.m_positionPowerups.push(WorldSoccer.POSITION_POWERUP_5);
    this.m_powerupsIndexUsed.push(0);
    this.m_swipeDetectMin = parseInt(Application.config.SoccerGeneral.detectSwipeMin, 10);
    ControlTouch.instance.resetTouchControl();
    this.m_adCenter = null;
    this.m_adCenterPos = new Point(825, 385);
    this.m_adUpBase = this.m_adUp = null;
    this.m_adUpPos = new Point(840, 100);
    this.m_viewClip = null;
    Global.app.playSound("dko_snd_crowd_low");
    Global.app.playSound("dko_snd_crowd_low2")
}
goog.inherits(WorldSoccer, SCC_World);
WorldSoccer.prototype.doAerealView = function() {
    switch (Global.selectedVenue) {
        case Global.VENUE_NONE:
            this.m_viewClip = Application.instance.getClip("gui_screen_intro_07");
            HudSoccer.instance.showCityName(Application.strings.STR_CITY_NAME_BRAZIL);
            break;
        case Global.VENUE_PARIS:
            this.m_viewClip = Application.instance.getClip("gui_screen_intro_01");
            HudSoccer.instance.showCityName(Application.strings.STR_CITY_NAME_PARIS);
            break;
        case Global.VENUE_NEW_YORK:
            this.m_viewClip = Application.instance.getClip("gui_screen_intro_02");
            HudSoccer.instance.showCityName(Application.strings.STR_CITY_NAME_NEW_YORK);
            break;
        case Global.VENUE_TOKYO:
            this.m_viewClip = Application.instance.getClip("gui_screen_intro_04");
            HudSoccer.instance.showCityName(Application.strings.STR_CITY_NAME_TOKYO);
            break;
        case Global.VENUE_BEIJING:
            this.m_viewClip = Application.instance.getClip("gui_screen_intro_03");
            HudSoccer.instance.showCityName(Application.strings.STR_CITY_NAME_BEIJING);
            break;
        case Global.VENUE_ITALY:
            this.m_viewClip = Application.instance.getClip("gui_screen_intro_05");
            HudSoccer.instance.showCityName(Application.strings.STR_CITY_NAME_ITALY);
            break;
        case Global.VENUE_IDAHO:
            this.m_viewClip = Application.instance.getClip("gui_screen_intro_06"), HudSoccer.instance.showCityName(Application.strings.STR_CITY_NAME_IDAHO)
    }
    this.objectCanvas().addChild(this.m_viewClip.sprite);
    this.m_viewClip.setX(this.m_viewClip.width / 2 - this.m_camera.x() - WorldSoccer.AERIAL_CLIP_OFFSET_LEFT);
    this.m_viewClip.setY(this.m_viewClip.height / 2 - this.m_camera.y());
    this.m_viewClip.sprite._depth = 999999;
    this.m_camera.doWait(WorldSoccer.AERIAL_VIEW_STOP_TIME);
    this.m_camera.onEndWait =
        "onEndFirstWait";
    this.m_camera.targetCallback = this
};
WorldSoccer.prototype.onEndFirstWait = function() {
    this.m_camera.gotoPosition(this.m_viewClip.width - this.m_camera.width - WorldSoccer.AERIAL_CLIP_OFFSET_LEFT, this.m_camera.y(), WorldSoccer.AERIAL_VIEW_CAMERA_SPEED);
    this.m_camera.onEndMovement = "onEndCameraAerialMove";
    this.m_camera.targetCallback = this
};
WorldSoccer.prototype.onEndCameraAerialMove = function() {
    this.m_camera.doWait(WorldSoccer.AERIAL_VIEW_STOP_TIME);
    this.m_camera.onEndWait = "startGame";
    this.m_camera.targetCallback = this
};
WorldSoccer.prototype.onEndMatch = function() {
    Global.app.stopAllSounds();
    Global.app.playSound("dko_mus_lose");
    HudSoccer.instance.showHud(!1);
    this.ballon.onHalfTime();
    HudSoccer.instance.doMsg(Application.strings.STR_FULL_TIME_1, Application.strings.STR_FULL_TIME_2, GameSoccer.END_MESSAGE_TIME);
    this.teamUsers.numGols > this.teamBots.numGols && (this.teamUsers.onAddGoal(), this.teamBots.onReceiveGoal(), HudSoccer.instance.onEndMessage = "onEndMessageEnd", HudSoccer.instance.targetCallback = this, HudSoccer.instance.showConfetti(!0),
        Global.app.stopAllSounds(), Global.game_mode == Global.mode_tournament && Global.championship_stage == Global.CHAMPIONSHIP_FINAL ? Global.app.playSound("dko_mus_win_game") : Global.app.playSound("dko_mus_win"));
    this.teamUsers.numGols < this.teamBots.numGols && (this.teamUsers.onReceiveGoal(), this.teamBots.onAddGoal(), HudSoccer.instance.onEndMessage = "onEndMessageEnd", HudSoccer.instance.targetCallback = this);
    this.teamUsers.numGols === this.teamBots.numGols && (GameSoccer.instance.setOnWaitEnd(), this.m_camera.gotoPosition(this.m_camera.x(),
        this.m_camera.y(), WorldSoccer.CAMERA_SPEED), this.m_camera.onEndMovement = "", this.m_camera.targetCallback = null)
};
WorldSoccer.prototype.onEndMessageEnd = function() {
    this.teamUsers.numGols > this.teamBots.numGols && (this.teamUsers.onRunToCelebrate(), this.m_camera.gotoPosition(this.m_width / 2 - this.m_camera.width / 2, this.m_height / 2 - this.m_camera.height / 2, WorldSoccer.CAMERA_SPEED), this.m_camera.onEndMovement = "onEndCameraMoveEnd", this.m_camera.targetCallback = this);
    this.teamUsers.numGols < this.teamBots.numGols && (this.teamBots.onRunToCelebrate(), HudSoccer.instance.showScoreMessage(!1), HudSoccer.instance.onEndMessage = "onEndMessageScoreEnd",
        HudSoccer.instance.targetCallback = this)
};
WorldSoccer.prototype.onEndCameraMoveEnd = function() {
    HudSoccer.instance.showScoreMessage(!0);
    HudSoccer.instance.onEndMessage = "onEndMessageScoreEnd";
    HudSoccer.instance.targetCallback = this
};
WorldSoccer.prototype.onEndMessageScoreEnd = function() {
    GameSoccer.instance.setOnWaitEnd()
};
WorldSoccer.prototype.onHalfTime = function() {
    this.teamLeft.onHalfTime();
    this.teamRight.onHalfTime();
    this.ballon.onHalfTime();
    this.m_camera.gotoPosition(this.m_camera.x(), this.m_camera.y(), WorldSoccer.CAMERA_SPEED);
    this.m_camera.onEndMovement = "";
    this.m_camera.targetCallback = null
};
WorldSoccer.prototype.onPlayerShoot = function(a) {
    this.teamLeft.goalKeeper.getActiveAI().onPlayerShoot(a);
    this.teamRight.goalKeeper.getActiveAI().onPlayerShoot(a)
};
WorldSoccer.prototype.setPause = function(a) {
    this.teamLeft.setPause(a);
    this.teamRight.setPause(a);
    this.m_isPaused = a;
    !0 == this.m_isPaused && (null !== this.m_player && this.m_player.cancelHoldMove(), this.m_mouseState = WorldSoccer.MOUSE_WAIT)
};
WorldSoccer.prototype.isOnThrowIn = function() {
    return !0 == this.m_onThrowIn || !0 == this.m_onCornerKick ? !0 : !1
};
WorldSoccer.prototype.cancelMouse = function() {
    null !== this.m_player && this.m_mouseState == WorldSoccer.MOUSE_MOVE_HOLD && this.m_player.cancelHoldMove();
    this.m_mouseState = WorldSoccer.MOUSE_WAIT
};
WorldSoccer.prototype.onOutWidth = function(a, b, c) {
    if (!0 != this.m_isPaused) {
        this.cancelMouse();
        var d = null,
            d = null === c ? this.teamRight : c.team;
        if (a)
            if (d.direction == Team.TEAM_LEFT) this.onCornerKick(Team.TEAM_RIGHT, b);
            else this.onGoalKick(Team.TEAM_LEFT);
            else if (d.direction == Team.TEAM_LEFT) this.onGoalKick(Team.TEAM_RIGHT);
        else this.onCornerKick(Team.TEAM_LEFT, b)
    }
};
WorldSoccer.prototype.onOutHeight = function(a, b, c) {
    if (!0 != this.m_isPaused) {
        this.cancelMouse();
        var d = null,
            d = null === c ? this.teamRight : c.team;
        this.onThrowIn(d.enemyTeam.direction, a, b)
    }
};
WorldSoccer.prototype.onGoalKick = function(a) {
    this.setPause(!0);
    this.ballon.setPositionField(this.ballon.x(), this.ballon.y());
    this.m_goalKickTeamDirection = a;
    HudSoccer.instance.targetCallback = this;
    Global.app.playSound("dko_snd_whistle1");
    HudSoccer.instance.onEndMessage = "endGoalKickMsg";
    HudSoccer.instance.doMsg(Application.strings.STR_GOAL_KICK_1, Application.strings.STR_GOAL_KICK_2, WorldSoccer.TIME_THROWIN_MSG)
};
WorldSoccer.prototype.endGoalKickMsg = function() {
    var a = this.teamLeft;
    this.m_goalKickTeamDirection == Team.TEAM_RIGHT && (a = this.teamRight);
    this.ballon.setPlayer(a.findPlayerByType(PlayerManager.TYPE_GOALKEEPER));
    this.setPause(!1)
};
WorldSoccer.prototype.onThrowIn = function(a, b, c) {
    this.m_onThrowIn = !0;
    var d = this.teamLeft;
    a == Team.TEAM_RIGHT && (d = this.teamRight);
    var e = this.limitMinY + WorldSoccer.THROWIN_OFFSET_Y_UP;
    !1 == b && (e = this.limitMaxY - WorldSoccer.THROWIN_OFFSET_Y_DOWN);
    this.ballon.setPositionField(this.ballon.x(), this.ballon.y());
    this.teamLeft.onThrowIn(a, b, c);
    this.teamRight.onThrowIn(a, b, c);
    d.findPlayerByType(PlayerManager.TYPE_MIDDLER).setThrowInTarget(c, e);
    Global.app.playSound("dko_snd_whistle2");
    HudSoccer.instance.onEndMessage =
        "";
    HudSoccer.instance.doMsg(Application.strings.STR_THROWIN_1, Application.strings.STR_THROWIN_2, WorldSoccer.TIME_THROWIN_MSG)
};
WorldSoccer.prototype.onCornerKick = function(a, b) {
    this.m_onCornerKick = !0;
    var c = this.teamLeft,
        d = this.limitMaxX,
        e = -WorldSoccer.CORNER_OFFSET;
    a == Team.TEAM_RIGHT && (e = WorldSoccer.CORNER_OFFSET, c = this.teamRight, d = this.limitMinX);
    var f = this.limitMinY + WorldSoccer.THROWIN_OFFSET_Y_UP;
    !1 == b && (f = this.limitMaxY - WorldSoccer.THROWIN_OFFSET_Y_DOWN);
    this.teamLeft.onCornerKick(a, b);
    this.teamRight.onCornerKick(a, b);
    c.findPlayerByType(PlayerManager.TYPE_MIDDLER).setCornerTarget(d + e, f);
    this.ballon.setPositionField(d +
        e, f);
    HudSoccer.instance.onEndMessage = "";
    Global.app.playSound("dko_snd_whistle1");
    HudSoccer.instance.doMsg(Application.strings.STR_CORNER_1, Application.strings.STR_CORNER_2, WorldSoccer.TIME_CORNER_MSG)
};
WorldSoccer.prototype.onThrowInEnd = function() {
    this.teamLeft.onThrowInEnd();
    this.teamRight.onThrowInEnd();
    this.m_onThrowIn = !1
};
WorldSoccer.prototype.onCornerKickEnd = function() {
    this.teamLeft.onCornerKickEnd();
    this.teamRight.onCornerKickEnd();
    this.m_onCornerKick = !1
};
WorldSoccer.prototype.addItem = function() {
    if (!0 != this.m_isPaused) {
        for (var a = [], b = 0; b < this.m_powerupsIndexUsed.length; ++b) 0 == this.m_powerupsIndexUsed[b] && a.push(b);
        if (0 != a.length) {
            a = a[Common.random(0, a.length - 1)];
            b = this.m_positionPowerups[a];
            this.m_powerupsIndexUsed[a] = 1;
            var c = ItemSoccer.TYPE_SHOOT;
            Math.random() < this.m_itemProbTurbo && (c = ItemSoccer.TYPE_TURBO);
            this.m_actorManager.addItem(b.x + Common.random(-WorldSoccer.POWERUP_OFFSET, WorldSoccer.POWERUP_OFFSET), b.y + Common.random(-WorldSoccer.POWERUP_OFFSET,
                WorldSoccer.POWERUP_OFFSET), c, a)
        }
    }
};
WorldSoccer.prototype.freeItemIndex = function(a) {
    this.m_powerupsIndexUsed[a] = 0
};
WorldSoccer.prototype.setPlayer = function(a) {
    null !== this.m_player && this.m_player.uid !== a.uid && this.m_player.focus(!1);
    this.m_player = a
};
WorldSoccer.prototype.objectCanvas = function() {
    return WorldSoccer.superClass_.objectCanvas.call(this)
};
WorldSoccer.prototype.createNpcManagers = function() {
    this.m_actorManager = new ActorManagerSoccer(this)
};
WorldSoccer.prototype.getTeam = function(a) {
    if (a === Team.TEAM_LEFT) return this.teamLeft;
    if (a === Team.TEAM_RIGHT) return this.teamRight
};
WorldSoccer.prototype.onGoal = function(a) {
    !0 != this.m_isPaused && (this.setPause(!0), this.m_teamGoal = a, HudSoccer.instance.showHud(!1), this.m_teamGoal == Team.TEAM_LEFT && (this.teamLeft.onAddGoal(), this.teamRight.onReceiveGoal(), Global.scoreTeamLeft += 1, HudSoccer.instance.onMakeGoal(this.teamLeft.numGols, this.teamRight.numGols, !0, this.teamLeft.isBotTeam), !1 == this.teamLeft.isBotTeam && Global.app.playSound("dko_snd_crowd_cheer")), this.m_teamGoal == Team.TEAM_RIGHT && (this.teamLeft.onReceiveGoal(), this.teamRight.onAddGoal(),
        Global.scoreTeamRight += 1, HudSoccer.instance.onMakeGoal(this.teamLeft.numGols, this.teamRight.numGols, !1, this.teamRight.isBotTeam), !1 == this.teamRight.isBotTeam && Global.app.playSound("dko_snd_crowd_cheer")), this.m_actorManager.onGoal(), HudSoccer.instance.onEndMessage = "onEndMessageGoal", HudSoccer.instance.targetCallback = this, GameSoccer.instance.setOnGoal(!0), Global.app.playSound("dko_snd_goal"))
};
WorldSoccer.prototype.onEndMessageGoal = function(a) {
    if (this.m_teamGoal == Team.TEAM_LEFT) this.teamLeft.onRunToCelebrate();
    if (this.m_teamGoal == Team.TEAM_RIGHT) this.teamRight.onRunToCelebrate();
    this.m_camera.gotoPosition(this.m_width / 2 - this.m_camera.width / 2, this.m_height / 2 - this.m_camera.height / 2, WorldSoccer.CAMERA_SPEED);
    this.m_camera.onEndMovement = "onEndCameraMove";
    this.m_camera.targetCallback = this
};
WorldSoccer.prototype.onEndCameraMove = function() {
    this.m_teamGoal.direction == this.teamUsers ? HudSoccer.instance.showScoreMessage(!0) : HudSoccer.instance.showScoreMessage(!1);
    HudSoccer.instance.onEndMessage = "onEndMessageScore";
    HudSoccer.instance.targetCallback = this
};
WorldSoccer.prototype.onEndMessageScore = function() {
    HudSoccer.instance.initTransition();
    HudSoccer.instance.onEndTransition = "onEndGoalTransition";
    HudSoccer.instance.targetCallback = this;
    this.ballon.reset();
    this.teamLeft.resetPosition();
    this.teamRight.resetPosition()
};
WorldSoccer.prototype.onEndGoalTransition = function() {
    this.startGame();
    GameSoccer.instance.setOnGoal(!1)
};
WorldSoccer.prototype.isUserLeftTeam = function() {
    return !1 === this.teamLeft.isBotTeam ? !0 : !1
};
WorldSoccer.prototype.startGame = function() {
    this.setPause(!0);
    this.ballon.reset();
    !0 == this.m_initGame ? (HudSoccer.instance.initTransition(), HudSoccer.instance.onEndTransition = "onEndGoalTransition", HudSoccer.instance.targetCallback = this, this.teamLeft.resetPosition(), this.teamLeft.kickOffMove(), this.teamLeft.onEndkickOffMove = "onEndkickOffMove", this.teamLeft.targetCallback = this, this.teamRight.resetPosition(), this.teamRight.kickOffMove(), this.teamRight.onEndkickOffMove = "onEndkickOffMove", this.teamRight.targetCallback =
        this) : (this.teamLeft.resetPosition(), this.teamRight.resetPosition(), this.ballon.validateCollisionWithPlayer(), this.m_timeWait = WorldSoccer.TIME_START_WAIT, this.m_onWait = !0);
    this.m_initGame = !1;
    null !== this.m_viewClip && (this.objectCanvas().removeChild(this.m_viewClip.sprite), this.m_viewClip = null);
    this.m_camera.setCameraMode(SCC_Camera.MOVEMENT_ACTOR);
    HudSoccer.instance.hideCityName()
};
WorldSoccer.prototype.onEndkickOffMove = function() {
    this.m_kickoffMoveCount++;
    this.m_kickoffMoveCount >= WorldSoccer.TEAM_COUNT && (this.m_timeWait = WorldSoccer.TIME_START_WAIT, this.m_onWait = !0)
};
WorldSoccer.prototype.onEndMessageStart = function() {
    this.setPause(!1);
    Global.app.playSound("dko_snd_whistle3");
    Global.onHalfTime && 1 === Global.boostOn && (this.teamUsers.offensePlayer.getTurboPowerUp(), Global.boostOn = 0);
    HudSoccer.instance.showHud(!0)
};
WorldSoccer.prototype.update = function(a) {
    WorldSoccer.superClass_.update.call(this, a);
    this.teamLeft.updateDefensiveStand();
    this.teamRight.updateDefensiveStand();
    !0 == this.m_onWait && (this.m_timeWait -= a, 0 > this.m_timeWait && (HudSoccer.instance.onEndMessage = "onEndMessageStart", HudSoccer.instance.targetCallback = this, HudSoccer.instance.updateTimer(0, GameSoccer.instance.getMaxTime()), HudSoccer.instance.doMsg(Application.strings.STR_START_1, Application.strings.STR_START_2, WorldSoccer.TIME_START_MSG), this.m_onWait = !1));
    this.m_powerUpTime -= a;
    0 > this.m_powerUpTime && (this.m_powerUpTime = this.m_powerUpTimeTotal, this.addItem());
    null !== this.m_viewClip && (this.m_viewClip.setX(this.m_viewClip.width / 2 - this.m_camera.x() - WorldSoccer.AERIAL_CLIP_OFFSET_LEFT), this.m_viewClip.setY(this.m_viewClip.height / 2 - this.m_camera.y()));
    null !== this.m_adCenter && (this.m_adCenter.update(a), this.m_adCenter.setX(this.m_adCenterPos.x - this.m_camera.x()), this.m_adCenter.setY(this.m_adCenterPos.y - this.m_camera.y()));
    null !== this.m_adUp && (this.m_adUp.update(a),
        this.m_adUp.setX(this.m_adUpPos.x - this.m_camera.x() - 4), this.m_adUp.setY(this.m_adUpPos.y - this.m_camera.y() - 3));
    null !== this.m_adUpBase && (this.m_adUpBase.update(a), this.m_adUpBase.setX(this.m_adUpPos.x - this.m_camera.x()), this.m_adUpBase.setY(this.m_adUpPos.y - this.m_camera.y()));
    null !== this.m_clipTap && (this.m_clipTap.update(a), this.m_clipTap.setX(this.m_clipTapPosition.x - this.m_camera.x()), this.m_clipTap.setY(this.m_clipTapPosition.y - this.m_camera.y()), this.m_clipTap.currentFrame == this.m_clipTap.totalFrames -
        1 && (this.objectCanvas().removeChild(this.m_clipTap.sprite), this.m_clipTap = null, this.teamLeft.onEndTapSign(), this.teamRight.onEndTapSign()));
    this.m_timeSelector -= a;
    if (!1 == this.m_isPaused && !1 == this.m_onThrowIn && !1 == this.m_onCornerKick && 0 > this.m_timeSelector && (null !== this.ballon.player && !0 == this.ballon.player.team.isBotTeam || null === this.ballon.player)) {
        var b = this.teamUsers.findPlayerNearTheBall(this.ballon.x());
        null !== b ? b.focus(!0) : this.teamUsers.findPlayerNearTheBall().focus(!0);
        this.m_timeSelector =
            WorldSoccer.TIME_SELECTOR_TOTAL
    }
    if (this.m_mouseState == WorldSoccer.MOUSE_MOVE && (this.m_mouseHoldTime += a, this.m_mouseHoldTime > WorldSoccer.TIME_SWIPE && (this.m_onHoldSwipe = !1, this.m_mouseState = WorldSoccer.MOUSE_MOVE_HOLD, this.m_mousePositionOld = new Point(this.m_mouseCurrentPos.x, this.m_mouseCurrentPos.y), null !== this.m_player && this.m_player.type !== PlayerManager.TYPE_GOALKEEPER))) {
        if (!0 == this.m_onThrowIn || !0 == this.m_onCornerKick) return;
        this.m_player.gotoPosition(this.m_mouseCurrentPos.x + this.m_camera.x(),
            this.m_mouseCurrentPos.y + this.m_camera.y());
        this.m_player.onHoldMove()
    }
    if (this.m_mouseState == WorldSoccer.MOUSE_MOVE_HOLD) {
        if ((!0 == this.m_onThrowIn || !0 == this.m_onCornerKick) && null !== this.ballon.player && null !== this.m_player && this.ballon.player.uid === this.m_player.uid) return;
        null !== this.m_player && this.m_player.type !== PlayerManager.TYPE_GOALKEEPER && (this.m_player.updateHoldMove(), this.m_player.gotoPosition(this.m_mouseCurrentPos.x + this.m_camera.x(), this.m_mouseCurrentPos.y + this.m_camera.y()))
    }
    if (this.m_lines)
        for (b =
            0; b < this.m_lines.length; b++) this.m_lines[b].update(a), this.m_lines[b].isAwaitingDeletion && (this.m_lines[b].free(), this.m_lines[b] = null, this.m_lines.splice(b, 1), b--), 0 === this.m_lines.length && (this.m_lastLine = null)
};
WorldSoccer.prototype.free = function() {
    for (var a = 0; a < this.m_lines.length; a++) this.m_lines[a].free(), this.m_lines[a] = null;
    this.m_lastLine = this.m_lines = null;
    !0 == Global.onHalfTime && (Global.scoreTeamLeft = this.teamLeft.numGols, Global.scoreTeamRight = this.teamRight.numGols);
    this.teamRight.free();
    this.teamLeft.free()
};
WorldSoccer.prototype.onKeyDown = function(a) {};
WorldSoccer.prototype.onMouseDown = function(a) {
    if (!0 != this.m_isPaused) {
        this.m_mouseState = WorldSoccer.MOUSE_MOVE;
        for (var b = 0; b < this.m_lines.length; b++) this.m_lines[b].setAwaitingDelete(!0);
        this.m_touchInitX = a.offsetX;
        this.m_touchInitY = a.offsetY;
        this.m_mouseHoldTime = 0
    }
};
WorldSoccer.prototype.onMouseMove = function(a) {
    if (!0 != this.m_isPaused) {
        var b = a.offsetX;
        a = a.offsetY;
        this.m_mouseState == WorldSoccer.MOUSE_MOVE && (this.m_lastLine ? (this.m_lastLine.onMouseMove(b, a), this.m_lastLine.endDraw && this.createLine(b, a)) : this.createLine(b, a));
        this.m_mouseCurrentPos.x = b;
        this.m_mouseCurrentPos.y = a;
        this.m_changeDirectionLength = Math.sqrt(Math.pow(this.m_mouseCurrentPos.x - this.m_mousePositionOld.x, 2) + Math.pow(this.m_mouseCurrentPos.y - this.m_mousePositionOld.y, 2));
        this.m_mousePositionOld.x =
            b;
        this.m_mousePositionOld.y = a;
        !1 == this.m_onHoldSwipe && this.m_changeDirectionLength > this.m_dragSwipeSpeed && (this.m_onHoldSwipe = !0, this.m_initHoldSwipePos.x = b, this.m_initHoldSwipePos.y = a);
        !0 == this.m_onHoldSwipe && this.m_changeDirectionLength < this.m_dragSwipeSpeed && (this.m_onHoldSwipe = !1)
    }
};
WorldSoccer.prototype.onMouseOutWindow = function(a) {
    this.onMouseUp(a)
};
WorldSoccer.prototype.createLine = function(a, b) {
    this.m_lastLine = new DrawLine(a, b);
    this.m_objectsCanvas[0].addChild(this.m_lastLine.clip().sprite);
    this.m_lastLine.clip().parent = this.m_objectsCanvas[0];
    this.m_lines.push(this.m_lastLine)
};
WorldSoccer.prototype.onMouseUp = function(a) {
    var b = 0,
        c = 0,
        c = b = 0;
    this.m_mouseState == WorldSoccer.MOUSE_MOVE && (Math.abs(a.offsetX - this.m_touchInitX) < WorldSoccer.TAP_DISTANCE && Math.abs(a.offsetY - this.m_touchInitY) < WorldSoccer.TAP_DISTANCE ? this.processTap(a) : (b = Math.abs(a.offsetX - this.m_touchInitX), c = Math.abs(a.offsetY - this.m_touchInitY), b = Math.sqrt(b * b + c * c), c = Math.atan2(a.offsetY - this.m_touchInitY, a.offsetX - this.m_touchInitX), this.processSwipe(a, b, c)));
    !0 == this.m_onHoldSwipe && this.m_mouseState == WorldSoccer.MOUSE_MOVE_HOLD &&
        (b = Math.abs(a.offsetX - this.m_initHoldSwipePos.x), c = Math.abs(a.offsetY - this.m_initHoldSwipePos.y), b = Math.sqrt(b * b + c * c), c = Math.atan2(a.offsetY - this.m_initHoldSwipePos.y, a.offsetX - this.m_initHoldSwipePos.x), b > this.m_swipeDetectMin && this.processSwipe(a, b, c));
    this.m_changeDirectionLength = 0;
    this.m_onHoldSwipe = !1;
    null !== this.m_player && this.m_mouseState == WorldSoccer.MOUSE_MOVE_HOLD && this.m_player.cancelHoldMove();
    this.m_mouseState = WorldSoccer.MOUSE_WAIT
};
WorldSoccer.prototype.processTap = function(a) {
    null === this.m_clipTap && (this.m_clipTap = Application.instance.getClip("mcPointer"), this.objectCanvas().addChild(this.m_clipTap.sprite), this.m_clipTap.sprite._depth = 9999);
    this.m_clipTapPosition.x = a.offsetX + this.m_camera.x();
    this.m_clipTapPosition.y = a.offsetY + this.m_camera.y();
    this.m_clipTap.setX(this.m_clipTapPosition.x - this.m_camera.x());
    this.m_clipTap.setY(this.m_clipTapPosition.y - this.m_camera.y());
    for (var b = null, c = 0; c < this.players.length; c++)
        if (this.players[c].hitTestBoundsPoint(a.offsetX +
            this.m_camera.x(), a.offsetY + this.m_camera.y())) {
            b = this.players[c];
            break
        }
    if (null !== this.m_player) this.m_player.onTap(b, a.offsetX + this.m_camera.x(), a.offsetY + this.m_camera.y());
    else null != b && !1 == b.team.isBotTeam && b.type !== PlayerManager.TYPE_GOALKEEPER && b.focus(!0)
};
WorldSoccer.prototype.processSwipe = function(a, b, c) {
    if (null !== this.m_player) this.m_player.onSwipe(a.offsetX + this.m_camera.x(), a.offsetY + this.m_camera.y(), b, c)
};
WorldSoccer.prototype.showCollision = function(a) {
    WorldSoccer.superClass_.showCollision.call(this, a)
};
WorldSoccer.prototype.loadData = function(a) {
    WorldSoccer.superClass_.loadData.call(this, a);
    this.m_worldData = window[a];
    a = this.m_worldData.properties;
    this.limitMinX = a.limitLeft;
    this.limitMaxX = a.limitRight;
    this.limitMinY = a.limitUp;
    this.limitMaxY = a.limitDown;
    this.goalMinY = a.goalYInit;
    this.goalMaxY = a.goalYEnd;
    this.m_actorManager.init();
    this.init();
    this.ballon = this.m_actorManager.ballon;
    this.players = this.m_actorManager.players;
    if (!1 == Global.onHalfTime) this.teamLeft = new Team(this, Team.TEAM_LEFT, Global.selectedTeam),
    this.teamRight = new Team(this, Team.TEAM_RIGHT, Global.enemyTeam), this.teamRight.isBotTeam = !0, this.teamUsers = this.teamLeft, this.teamBots = this.teamRight;
    else
        for (HudSoccer.instance.doMsg(Application.strings.STR_SECOND_TIME_1, Application.strings.STR_SECOND_TIME_2, WorldSoccer.TIME_SECOND_HALF_MSG), this.teamLeft = new Team(this, Team.TEAM_LEFT, Global.enemyTeam), this.teamRight = new Team(this, Team.TEAM_RIGHT, Global.selectedTeam), this.teamLeft.isBotTeam = !0, this.teamUsers = this.teamRight, this.teamBots = this.teamLeft,
            a = 0; a < Global.mickeyShots; a++) this.teamUsers.getSuperShotPowerUp(!1);
    this.teamLeft.enemyTeam = this.teamRight;
    this.teamRight.enemyTeam = this.teamLeft;
    this.teamLeft.updateIADifficulty();
    this.teamRight.updateIADifficulty();
    this.teamLeft.iskickOffTeam = !0;
    this.teamRight.iskickOffTeam = !1;
    this.teamUsers.updatePlayerStats();
    !1 == Global.onHalfTime ? (HudSoccer.instance.initScore(0, 0), this.doAerealView()) : (this.teamLeft.numGols = Global.scoreTeamRight, this.teamRight.numGols = Global.scoreTeamLeft, HudSoccer.instance.initScore(this.teamLeft.numGols,
        this.teamRight.numGols), Global.scoreTeamLeft = this.teamLeft.numGols, Global.scoreTeamRight = this.teamRight.numGols, this.startGame());
    HudSoccer.instance.initHalfSign();
    HudSoccer.instance.showHud(!1);
    Global.showAds && (this.m_adCenter = Application.instance.getClip("central_logo_1"), this.m_adCenter.sprite.setImage(Application.instance.core.assets["media/images/localized/central_logo_1.png"]), this.objectCanvas().addChild(this.m_adCenter.sprite), this.m_adCenter.sprite._depth = 0, this.m_adUpBase = Application.instance.getClip("adBase"),
        this.objectCanvas().addChild(this.m_adUpBase.sprite), this.m_adUpBase.sprite._depth = 0, this.m_adUp = Application.instance.getClip("ad"), a = Common.random(1, Global.countSponsors), this.m_adUp.sprite.setImage(Application.instance.core.assets["media/images/localized/ad_logo_" + a + ".png"]), this.objectCanvas().addChild(this.m_adUp.sprite), this.m_adUp.sprite._depth = 10)
};
WorldSoccer.POSITION_POWERUP_1 = new Point(450, 270);
WorldSoccer.POSITION_POWERUP_2 = new Point(550, 470);
WorldSoccer.POSITION_POWERUP_3 = new Point(820, 370);
WorldSoccer.POSITION_POWERUP_4 = new Point(1050, 290);
WorldSoccer.POSITION_POWERUP_5 = new Point(1250, 470);
WorldSoccer.AERIAL_CLIP_OFFSET_LEFT = 10;
WorldSoccer.AERIAL_VIEW_STOP_TIME = 1E3;
WorldSoccer.AERIAL_VIEW_CAMERA_SPEED = 0.1;
WorldSoccer.THROWIN_OFFSET_Y_UP = 20;
WorldSoccer.THROWIN_OFFSET_Y_DOWN = -10;
WorldSoccer.TIME_START_WAIT = 200;
WorldSoccer.TIME_THROWIN_MSG = 1;
WorldSoccer.TIME_CORNER_MSG = 1;
WorldSoccer.TIME_START_MSG = 1;
WorldSoccer.TIME_SECOND_HALF_MSG = 1;
WorldSoccer.MOUSE_WAIT = 1;
WorldSoccer.MOUSE_MOVE = 2;
WorldSoccer.MOUSE_MOVE_HOLD = 3;
WorldSoccer.TAP_DISTANCE = 20;
WorldSoccer.TIME_SWIPE = 200;
WorldSoccer.TIME_SWIPE_MAX = 1E3;
WorldSoccer.TIME_SELECTOR_TOTAL = 500;
WorldSoccer.POWERUP_OFFSET = 50;
WorldSoccer.CORNER_OFFSET = 20;
WorldSoccer.TEAM_COUNT = 2;
WorldSoccer.CAMERA_SPEED = 0.18;

function Ballon(a, b, c, d) {
    SCC_WorldActor.call(this, a, b, c, d);
    this.ballonPlayerFreeMove = this.player = null;
    this.m_character = new Character(this.m_x, this.m_y, a);
    this.m_character.addState(Ballon.ST_SHADOW_STAND, "mcBallShadow");
    this.gotoState(Ballon.ST_SHADOW_STAND);
    this.m_ballonClip = null;
    this.m_onSuperShoot = this.m_onHalfTime = !1;
    this.m_displace = new Displace(this.m_x, this.m_y);
    this.m_displace.onEndDisplaceCallback = "onEndDisplace";
    this.m_displace.targetCallback = this;
    this.m_displaceZ = new JumpControl;
    this.m_displaceZ.onCompleteJumpCallback =
        "onCompleteJump";
    this.m_displaceZ.targetCallback = this;
    this.m_kickOffPosition = new Point(this.m_x, this.m_y);
    this.m_speedState = Ballon.SPEED_RUN_1;
    this.ballonGotoState(Ballon.ST_STAND);
    this.updateBounds();
    this.m_dribbleDirection = 1;
    this.m_dribbleDisplaceCurrent = 0;
    this.m_frictionShoot = parseInt(Application.config.SoccerGeneral.frictionShoot, 10);
    this.m_frictionPass = parseInt(Application.config.SoccerGeneral.frictionPass, 10);
    this.m_frictionAir = parseInt(Application.config.SoccerGeneral.frictionAir, 10);
    this.m_shootElevationSpeedMin =
        parseInt(Application.config.SoccerGeneral.shootElevationSpeedMin, 10);
    this.m_shootElevationMin = parseInt(Application.config.SoccerGeneral.shootElevationMin, 10);
    this.m_shootElevationSpeedMax = parseInt(Application.config.SoccerGeneral.shootElevationSpeedMax, 10);
    this.m_shootElevationMax = parseInt(Application.config.SoccerGeneral.shootElevationMax, 10);
    this.m_lastAcceleration = 0;
    this.m_onForceCatch = this.m_onBounce = !1;
    this.m_forceCatchTime = 0;
    this.m_visible = !0;
    this.m_onGoal = !1;
    this.setScale(0.7);
    this.m_timeBounce =
        0
}
goog.inherits(Ballon, SCC_WorldActor);
Ballon.prototype.setHeightInit = function(a) {
    this.m_displaceZ.setHeightInit(a)
};
Ballon.prototype.onHalfTime = function() {
    this.ballonGotoState(Ballon.ST_FAUL);
    this.m_onHalfTime = !0
};
Ballon.prototype.setVisible = function(a) {
    this.m_ballonClip.setVisible(a);
    this.m_character.actor().clip().setVisible(a);
    this.m_visible = a
};
Ballon.prototype.xDribble = function() {
    return this.m_x
};
Ballon.prototype.x = function() {
    switch (this.m_state) {
        case Ballon.ST_WITH_PLAYER_STAND:
        case Ballon.ST_WITH_PLAYER_MOVE:
            return this.player.x()
    }
    return this.m_x
};
Ballon.prototype.setPositionField = function(a, b) {
    this.ballonGotoState(Ballon.ST_STAND);
    this.m_displace.resetPosition(a, b);
    this.m_displace.cancel();
    this.m_displaceZ.cancel();
    this.m_x = a;
    this.m_y = b
};
Ballon.prototype.onSuperShoot = function() {
    this.ballonGotoState(Ballon.ST_SUPER_SHOOT);
    this.m_onSuperShoot = !0
};
Ballon.prototype.toLeft = function() {
    return this.m_displace.toLeft()
};
Ballon.prototype.setPlayerTouch = function(a) {
    this.ballonPlayerFreeMove = a
};
Ballon.prototype.setPlayer = function(a) {
    if (null !== this.player) this.player.onGetTheBallon(!1);
    this.player = a;
    null !== a ? (this.ballonGotoState(Ballon.ST_WITH_PLAYER_STAND), this.player.onGetTheBallon(!0)) : this.ballonGotoState(Ballon.ST_STAND);
    this.m_onBounce = !1
};
Ballon.prototype.angle = function() {
    return this.m_displace.angle
};
Ballon.prototype.speed = function() {
    return this.m_displace.currentSpeed()
};
Ballon.prototype.onElevation = function() {
    return this.m_displaceZ.getCurrentHeight() < -Ballon.CANT_GET_BALLON_HEIGHT
};
Ballon.prototype.estimatePositionOnGround = function() {
    return new Point(0, 0)
};
Ballon.prototype.applyForce = function(a, b, c, d) {
    this.m_displace.resetPosition(this.m_x, this.m_y);
    this.m_lastAcceleration = this.m_frictionPass;
    !0 == a && (this.m_lastAcceleration = this.m_frictionShoot);
    this.m_displace.gotoDirection(9999, c, b, this.m_lastAcceleration, 1);
    !0 == d && (this.m_displace.updateAcceleration(this.m_frictionAir), this.m_displaceZ.applyImpulse(Ballon.ELEVATION_IMPULSE));
    !0 == a ? (this.m_world.onPlayerShoot(b), this.ballonGotoState(Ballon.ST_FREE_MOVE_SHOOT), a = 0, b > this.m_shootElevationSpeedMax &&
        (a = this.m_shootElevationMax), b > this.m_shootElevationSpeedMin && b < this.m_shootElevationSpeedMax && (a = this.m_shootElevationMin + (b - this.m_shootElevationSpeedMin) / (this.m_shootElevationSpeedMax - this.m_shootElevationSpeedMin) * (this.m_shootElevationMax - this.m_shootElevationMin)), 0 < a && this.m_displaceZ.applyImpulse(-a)) : this.ballonGotoState(Ballon.ST_FREE_MOVE);
    this.m_onBounce = !1
};
Ballon.prototype.reset = function() {
    this.m_x = this.m_kickOffPosition.x;
    this.m_y = this.m_kickOffPosition.y;
    this.m_displace.resetPosition(this.m_x, this.m_y);
    this.m_displace.cancel();
    this.m_displaceZ.cancel();
    this.ballonGotoState(Ballon.ST_STAND);
    this.m_onHalfTime = this.m_onGoal = !1;
    this.setVisible(!0)
};
Ballon.prototype.update = function(a) {
    this.m_character.update(a);
    null !== this.m_ballonClip && (this.m_ballonClip.update(a), this.m_ballonClip.setX(this.m_x - this.m_world.camera().x()), this.m_ballonClip.setY(this.m_y + Ballon.SPRITE_TO_SHADOW_GAP + this.m_displaceZ.getCurrentHeight() - this.m_world.camera().y()), this.m_ballonClip.sprite._depth = 1E3 * this.m_y);
    !0 == this.m_onBounce && (this.m_timeBounce -= a, 0 > this.m_timeBounce && (this.m_onBounce = !1));
    !0 == this.m_onForceCatch && (this.m_forceCatchTime -= a, 0 > this.m_forceCatchTime &&
        (this.m_onForceCatch = !1));
    Ballon.superClass_.update.call(this, a);
    this.setDepth(1E3 * this.m_y - 10);
    switch (this.m_state) {
        case Ballon.ST_STAND:
            this.validateCollisionWithPlayer();
            break;
        case Ballon.ST_FREE_MOVE:
        case Ballon.ST_FREE_MOVE_SHOOT:
            this.m_displaceZ.update(a);
            this.m_displace.update(a);
            if (!0 == this.ballonInsideGoal() && (this.m_displace.y() < this.m_world.limitMinY + Ballon.INSIDE_GOAL_GAP || this.m_displace.y() > this.m_world.limitMaxY - Ballon.INSIDE_GOAL_GAP || 0 > this.m_displace.x() || this.m_displace.x() > this.m_world.width())) {
                this.m_displace.cancel();
                this.ballonGotoState(Ballon.ST_STAND);
                return
            }
            this.m_x = this.m_displace.x();
            this.m_y = this.m_displace.y();
            if (!1 == this.m_onGoal && (this.m_y > this.m_world.goalMinY - Ballon.POLE_GAP && this.m_y < this.m_world.goalMinY + Ballon.POLE_GAP || this.m_y - Ballon.MID_HEIGHT > this.m_world.goalMinY - Ballon.POLE_GAP && this.m_y - Ballon.MID_HEIGHT < this.m_world.goalMinY + Ballon.POLE_GAP || this.m_y > this.m_world.goalMaxY - Ballon.POLE_GAP && this.m_y < this.m_world.goalMaxY + Ballon.POLE_GAP_DOWN || this.m_y - Ballon.MID_HEIGHT > this.m_world.goalMaxY -
                Ballon.POLE_GAP && this.m_y - Ballon.MID_HEIGHT < this.m_world.goalMaxY + Ballon.POLE_GAP_DOWN) || this.m_y > this.m_world.goalMinY && this.m_y < this.m_world.goalMaxY && this.m_displaceZ.getCurrentHeight() < -Ballon.GOAL_HEIGHT + Ballon.POLE_GAP && this.m_displaceZ.getCurrentHeight() > -Ballon.GOAL_HEIGHT - Ballon.POLE_GAP) this.m_x < this.m_world.limitMinX + Ballon.POLE_GAP && (this.m_displace.onBounce(Displace.DIRECTION_RIGHT), this.m_displace.update(a), this.m_x = this.m_displace.x(), this.m_y = this.m_displace.y(), this.m_lastAcceleration =
                this.m_frictionPass, this.m_displace.updateAcceleration(this.m_lastAcceleration), this.m_onBounce = !0, this.m_timeBounce = Ballon.TIME_BOUNCE, Global.app.playSound("dko_snd_post")), this.m_x > this.m_world.limitMaxX - Ballon.POLE_GAP && (this.m_displace.onBounce(Displace.DIRECTION_LEFT), this.m_displace.update(a), this.m_x = this.m_displace.x(), this.m_y = this.m_displace.y(), this.m_lastAcceleration = this.m_frictionPass, this.m_displace.updateAcceleration(this.m_lastAcceleration), this.m_onBounce = !0, this.m_timeBounce = Ballon.TIME_BOUNCE,
                Global.app.playSound("dko_snd_post"));
            this.validateCollisionWithPlayer();
            this.m_speedState >= Ballon.SPEED_RUN_1 && this.m_displace.currentSpeed() < Ballon.SPEED_RUN_2 && (this.m_speedState = Ballon.SPEED_RUN_2, null !== this.m_ballonClip && (this.m_canvas.removeChild(this.m_ballonClip.sprite), this.m_ballonClip = null), this.m_ballonClip = Application.instance.getClip("mcBallRun2"), this.m_ballonClip.setX(this.m_x - this.m_world.camera().x()), this.m_ballonClip.setY(this.m_y - this.m_world.camera().y()), this.m_canvas.addChild(this.m_ballonClip.sprite),
                this.m_ballonClip.sprite.setScale(0.7));
            this.m_speedState >= Ballon.SPEED_RUN_2 && this.m_displace.currentSpeed() < Ballon.SPEED_RUN_3 && (this.m_speedState = Ballon.SPEED_RUN_3, null !== this.m_ballonClip && (this.m_canvas.removeChild(this.m_ballonClip.sprite), this.m_ballonClip = null), this.m_ballonClip = Application.instance.getClip("mcBallRun3"), this.m_ballonClip.setX(this.m_x - this.m_world.camera().x()), this.m_ballonClip.setY(this.m_y - this.m_world.camera().y()), this.m_canvas.addChild(this.m_ballonClip.sprite), this.m_ballonClip.sprite.setScale(0.7));
            break;
        case Ballon.ST_SUPER_SHOOT:
            this.m_displaceZ.update(a);
            this.m_displace.update(a);
            this.m_x = this.m_displace.x();
            this.m_y = this.m_displace.y();
            this.validateCollisionWithPlayer();
            break;
        case Ballon.ST_WITH_PLAYER_STAND:
        case Ballon.ST_WITH_PLAYER_MOVE:
            var b = 1;
            this.player.isLookingLeft() && (b = -1);
            !0 == this.player.isRunning() && (this.m_dribbleDisplaceCurrent += this.m_dribbleDirection * Ballon.DRIBBLE_SPEED * a, this.m_dribbleDisplaceCurrent < -Ballon.DRIBBLE_MAX_DISPLACE && (this.m_dribbleDisplaceCurrent = -Ballon.DRIBBLE_MAX_DISPLACE,
                this.m_dribbleDirection = 1), this.m_dribbleDisplaceCurrent > Ballon.DRIBBLE_MAX_DISPLACE && (this.m_dribbleDisplaceCurrent = Ballon.DRIBBLE_MAX_DISPLACE, this.m_dribbleDirection = -1));
            !0 == this.player.isOnThrowIn() ? this.m_x = this.player.x() : this.m_x = this.player.x() + b * Ballon.DRIBBLE_OFFSET + this.m_dribbleDisplaceCurrent;
            this.m_y = this.player.y();
            break;
        case Ballon.ST_FAUL:
            !0 == this.m_onGoal && this.m_displaceZ.update(a), !0 == this.m_onHalfTime && (this.m_displaceZ.update(a), this.m_displace.update(a), this.m_x = this.m_displace.x(),
                this.m_y = this.m_displace.y())
    }!1 == this.m_onBounce && !1 == this.m_onGoal && this.m_displaceZ.getCurrentHeight() > -Ballon.GOAL_HEIGHT && this.m_y > this.m_world.goalMinY && this.m_y < this.m_world.goalMaxY && !1 == this.m_world.isOnThrowIn() ? (this.m_x < this.m_world.limitMinX && (this.m_world.onGoal(Team.TEAM_RIGHT), this.m_onSuperShoot = !1, this.m_onGoal = !0, null !== this.player && (this.m_displace.resetPosition(this.m_x, this.m_y), this.m_displace.cancel())), this.m_x > this.m_world.limitMaxX && (this.m_world.onGoal(Team.TEAM_LEFT),
        this.m_onSuperShoot = !1, this.m_onGoal = !0, null !== this.player && (this.m_displace.resetPosition(this.m_x, this.m_y), this.m_displace.cancel()))) : !1 == this.m_world.isOnThrowIn() && !1 == this.m_onBounce && (a = this.m_world.limitMinY + (this.m_world.limitMaxY - this.m_world.limitMinY) / 2, this.m_x < this.m_world.limitMinX - Ballon.OFFSET_OUT_X ? (this.m_world.onOutWidth(!0, this.m_y < a, this.ballonPlayerFreeMove), this.ballonGotoState(Ballon.ST_FAUL), this.m_displace.resetPosition(this.m_x, this.m_y), this.m_displace.cancel()) : this.m_x >
        this.m_world.limitMaxX + Ballon.OFFSET_OUT_X ? (this.m_world.onOutWidth(!1, this.m_y < a, this.ballonPlayerFreeMove), this.ballonGotoState(Ballon.ST_FAUL), this.m_displace.resetPosition(this.m_x, this.m_y), this.m_displace.cancel()) : this.m_y < this.m_world.limitMinY - Ballon.SPRITE_TO_SHADOW_GAP ? (this.m_world.onOutHeight(!0, this.m_x, this.ballonPlayerFreeMove), this.ballonGotoState(Ballon.ST_FAUL), this.m_displace.resetPosition(this.m_x, this.m_y), this.m_displace.cancel()) : this.m_y > this.m_world.limitMaxY + Ballon.SPRITE_TO_SHADOW_GAP &&
        (this.m_world.onOutHeight(!1, this.m_x, this.ballonPlayerFreeMove), this.ballonGotoState(Ballon.ST_FAUL), this.m_displace.resetPosition(this.m_x, this.m_y), this.m_displace.cancel()))
};
Ballon.prototype.ballonInsideGoal = function() {
    return this.m_y > this.m_world.goalMinY && this.m_y < this.m_world.goalMaxY && (this.m_x < this.m_world.limitMinX || this.m_x > this.m_world.limitMaxX) ? !0 : !1
};
Ballon.prototype.ballonGotoState = function(a) {
    if (this.m_state != a) {
        null !== this.m_ballonClip && (this.m_canvas.removeChild(this.m_ballonClip.sprite), this.m_ballonClip = null);
        switch (a) {
            case Ballon.ST_STAND:
                this.m_ballonClip = Application.instance.getClip("mcBallStand");
                this.ballonPlayerFreeMove = this.player;
                this.player = null;
                break;
            case Ballon.ST_FREE_MOVE:
                this.m_ballonClip = Application.instance.getClip("mcBallRun1");
                this.m_displace.resetPosition(this.m_x, this.m_y);
                this.ballonPlayerFreeMove = this.player;
                this.m_speedState =
                    Ballon.SPEED_RUN_1;
                this.player = null;
                break;
            case Ballon.ST_FREE_MOVE_SHOOT:
                this.m_ballonClip = Application.instance.getClip("mcBallShoot");
                this.m_displace.resetPosition(this.m_x, this.m_y);
                this.ballonPlayerFreeMove = this.player;
                this.player = null;
                break;
            case Ballon.ST_WITH_PLAYER_STAND:
                this.m_ballonClip = Application.instance.getClip("mcBallStand");
                this.m_displaceZ.cancel();
                this.ballonPlayerFreeMove = this.player;
                break;
            case Ballon.ST_WITH_PLAYER_MOVE:
                this.m_ballonClip = Application.instance.getClip("mcBallPlayerRun");
                this.m_displaceZ.cancel();
                this.ballonPlayerFreeMove = this.player;
                break;
            case Ballon.ST_SUPER_SHOOT:
                this.m_ballonClip = Application.instance.getClip("mcBallSpecialShoot");
                this.player = null;
                break;
            case Ballon.ST_FAUL:
                this.m_ballonClip = Application.instance.getClip("mcBallStand"), null !== this.player && (this.m_displace.resetPosition(this.m_x, this.m_y), this.m_displace.cancel()), this.m_onSuperShoot = !1, this.player = null
        }
        this.m_ballonClip.setX(this.m_x - this.m_world.camera().x());
        this.m_ballonClip.setY(this.m_y - this.m_world.camera().y());
        this.m_canvas.addChild(this.m_ballonClip.sprite);
        this.setVisible(this.m_visible);
        this.m_ballonClip.sprite.setScale(0.7);
        this.m_state = a
    }
};
Ballon.prototype.validateCollisionWithPlayer = function() {
    for (var a = this.m_world.players, b = 0; b < a.length; ++b)
        if (!1 == this.m_onSuperShoot && this.isActorCollisionable(a[b]) && a[b].hitTestCollision(this)) {
            if (a[b].type == PlayerManager.TYPE_GOALKEEPER)
                if (a[b].state() == PlayerManager.ST_PLAYER_JUMP) {
                    if (this.m_displaceZ.getCurrentHeight() < -Ballon.GK_HEIGHT_JUMP) continue
                } else if (a[b].state() == PlayerManager.ST_PLAYER_FLY_UP || a[b].state() == PlayerManager.ST_PLAYER_FLY_DOWN) {
                if (this.m_displaceZ.getCurrentHeight() < -Ballon.GK_HEIGHT_FLY) continue
            } else {
                if (this.m_displaceZ.getCurrentHeight() < -Ballon.GK_HEIGHT_STAND) continue
            } else if (!0 == this.onElevation()) continue;
            if (a[b].type == PlayerManager.TYPE_GOALKEEPER && !1 == this.m_onForceCatch && this.m_displace.currentSpeed() > a[b].getActiveAI().speedCantBlock()) {
                this.m_displace.onBounce(a[b].team.direction);
                this.m_lastAcceleration = this.m_frictionPass;
                this.m_displace.updateAcceleration(this.m_lastAcceleration);
                this.m_forceCatchTime = Ballon.FORCE_CATCH_TIME;
                this.m_onForceCatch = !0;
                this.setPlayerTouch(a[b]);
                break
            }
            this.player = a[b];
            this.ballonGotoState(Ballon.ST_WITH_PLAYER_STAND);
            this.player.onGetTheBallon(!0);
            this.m_onBounce = !1;
            break
        }
};
Ballon.prototype.isActorCollisionable = function(a) {
    return a.y() > this.m_y - Ballon.ACTION_RANGE && a.y() < this.m_y + Ballon.ACTION_RANGE && a.x() > this.m_x - Ballon.ACTION_RANGE && a.x() < this.m_x + Ballon.ACTION_RANGE && !0 == a.canGetTheBallon() ? !0 : !1
};
Ballon.prototype.onEndDisplace = function() {
    this.ballonGotoState(Ballon.ST_STAND)
};
Ballon.prototype.onCompleteJump = function() {
    this.m_displace.updateAcceleration(this.m_lastAcceleration)
};
Ballon.prototype.free = function() {
    Ballon.superClass_.free.call(this);
    null !== this.m_ballonClip && (this.m_canvas.removeChild(this.m_ballonClip.sprite), this.m_ballonClip = null)
};
Ballon.OFFSET_OUT_X = 10;
Ballon.TIME_BOUNCE = 500;
Ballon.SPRITE_TO_SHADOW_GAP = 5;
Ballon.FORCE_CATCH_TIME = 1E3;
Ballon.CANT_GET_BALLON_HEIGHT = 25;
Ballon.GK_HEIGHT_FLY = 40;
Ballon.GK_HEIGHT_STAND = 60;
Ballon.GK_HEIGHT_JUMP = 80;
Ballon.DRIBBLE_MAX_DISPLACE = 15;
Ballon.DRIBBLE_OFFSET = 35;
Ballon.DRIBBLE_SPEED = 0.12;
Ballon.GOAL_HEIGHT = 140;
Ballon.ELEVATION_IMPULSE = -45;
Ballon.ACTION_RANGE = 100;
Ballon.POLE_GAP = 4;
Ballon.POLE_GAP_DOWN = 10;
Ballon.MID_HEIGHT = 10;
Ballon.ST_SHADOW_STAND = "st0";
Ballon.ST_STAND = "st1";
Ballon.ST_FREE_MOVE = "st2";
Ballon.ST_FREE_MOVE_SHOOT = "st3";
Ballon.ST_WITH_PLAYER_STAND = "st4";
Ballon.ST_WITH_PLAYER_MOVE = "st5";
Ballon.ST_SUPER_SHOOT = "st6";
Ballon.ST_FAUL = "st7";
Ballon.INSIDE_GOAL_GAP = 3;
Ballon.SPEED_RUN_1 = 9999;
Ballon.SPEED_RUN_2 = 300;
Ballon.SPEED_RUN_3 = 150;

function IABase(a, b) {
    this.m_world = a;
    this.m_player = b;
    this.m_ballon = this.m_world.ballon;
    this.m_team = this.m_player.team;
    this.m_supportCoverDistance = this.m_sweepEffectiveSearchAngle = this.m_passEffectiveSearchAngle = this.m_sideDribble = this.m_waitTimeToSweep = this.m_waitTimeToCover = this.m_rivalMinDistance = this.m_timeDribble = this.m_tryToShootGap = this.m_distanceApplyTackle = this.m_timeWaitReact = this.m_speedInstantReactThreshold = this.m_distanceWaitPass = this.m_timeWaitPass = 0;
    this.m_canIABycicleKick = !1;
    this.m_gkKeepAreaWidth =
        this.m_gkShootStunSpeedMax = this.m_gkShootStunSpeedMin = this.m_gkShootStunMax = this.m_gkShootStunMin = this.m_postGap = this.m_speedCantBlock = this.m_distanceReactFly = this.m_distanceReactJump = this.m_flyRechargeTimeTotal = 0
}
IABase.prototype.setDelaySweep = function() {};
IABase.prototype.onHit = function() {};
IABase.prototype.onThrowIn = function(a, b, c) {};
IABase.prototype.onCornerKick = function(a, b) {};
IABase.prototype.onThrowInEnd = function() {};
IABase.prototype.onCornerKickEnd = function() {};
IABase.prototype.resetPosition = function() {};
IABase.prototype.canReact = function() {};
IABase.prototype.setZoneInit = function(a) {};
IABase.prototype.setZoneEnd = function(a) {};
IABase.prototype.setCoverPointX = function(a) {};
IABase.prototype.setCoverPointY = function(a) {};
IABase.prototype.setRecharge = function() {};
IABase.prototype.onLoseTheBallon = function() {};
IABase.prototype.setWaitingPass = function(a) {};
IABase.prototype.setDifficulty = function(a) {};
IABase.prototype.setReactionDelay = function() {};
IABase.prototype.update = function(a) {};
IABase.prototype.free = function() {
    this.m_team = this.m_ballon = this.m_player = this.m_world = null
};

function GoalKeeperIA(a, b) {
    IABase.call(this, a, b);
    this.m_flyRechargeTimeTotal = 500;
    this.m_distanceReactJump = 150;
    this.m_distanceReactFly = 300;
    this.m_speedCantBlock = 600;
    this.m_postGap = 50;
    this.m_gkShootStunMin = 0;
    this.m_gkShootStunMax = 200;
    this.m_gkShootStunSpeedMin = 600;
    this.m_gkShootStunSpeedMax = 1200;
    this.m_gkKeepAreaWidth = 200;
    this.m_flyRechargeTime = 0;
    this.m_validateArea = !1;
    this.m_canReact = this.m_canFly = !0;
    this.m_onSlowReaction = !1;
    this.m_onSlowReactionTime = 0;
    this.m_targetGoalX = this.m_world.limitMinX;
    this.m_team.direction ==
        Team.TEAM_RIGHT && (this.m_targetGoalX = this.m_world.limitMaxX)
}
goog.inherits(GoalKeeperIA, IABase);
GoalKeeperIA.prototype.onPlayerShoot = function(a) {
    a < this.m_gkShootStunSpeedMin || (a > this.m_gkShootStunSpeedMax && (a = this.m_gkShootStunSpeedMax), this.m_onSlowReaction = !0, this.m_onSlowReactionTime = this.m_gkShootStunMin + (a - this.m_gkShootStunSpeedMin) / (this.m_gkShootStunSpeedMax - this.m_gkShootStunSpeedMin) * (this.m_gkShootStunMax - this.m_gkShootStunMin))
};
GoalKeeperIA.prototype.canReact = function() {
    return !0
};
GoalKeeperIA.prototype.speedCantBlock = function() {
    return this.m_speedCantBlock
};
GoalKeeperIA.prototype.setReactionDelay = function() {};
GoalKeeperIA.prototype.setRecharge = function() {
    this.m_flyRechargeTime = this.m_flyRechargeTimeTotal;
    this.m_canFly = !1
};
GoalKeeperIA.prototype.onLoseTheBallon = function() {
    this.m_team.takeOffensiveStand(this.m_player);
    this.m_team.enemyTeam.updateDefensiveStand()
};
GoalKeeperIA.prototype.setDifficulty = function(a) {
    GoalKeeperIA.superClass_.setDifficulty.call(this, a);
    var b = Application.config.AIParameters;
    this.m_flyRechargeTimeTotal = b[a].gkflyRechargeTimeTotal;
    this.m_distanceReactJump = b[a].gkDistanceReactJump;
    this.m_distanceReactFly = b[a].gkDistanceReactFly;
    this.m_speedCantBlock = b[a].gkSpeedCantBlock;
    this.m_postGap = b[a].gkPostGap;
    this.m_gkShootStunMin = b[a].gkShootStunMin;
    this.m_gkShootStunMax = b[a].gkShootStunMax;
    this.m_gkShootStunSpeedMin = b[a].gkShootStunSpeedMin;
    this.m_gkShootStunSpeedMax = b[a].gkShootStunSpeedMax;
    this.m_gkKeepAreaWidth = b[a].gkKeepAreaWidth
};
GoalKeeperIA.prototype.update = function(a) {
    GoalKeeperIA.superClass_.update.call(this, a);
    if (!0 != this.m_player.isWithTheBallon() && !1 != this.m_player.canChangeState())
        if (!0 == this.m_onSlowReaction) this.m_onSlowReactionTime -= a, 0 > this.m_onSlowReactionTime && (this.m_onSlowReaction = !1);
        else if (!1 == this.m_canFly) this.m_flyRechargeTime -= a, 0 > this.m_flyRechargeTime && (this.m_canFly = !0);
    else if (Math.abs(this.m_ballon.x() - this.m_targetGoalX) < GoalKeeperIA.DISTANCE_KEEP) {
        if (this.m_team.direction != Team.TEAM_LEFT || !1 !=
            this.m_ballon.toLeft() || null !== this.m_ballon.player)
            if (this.m_team.direction != Team.TEAM_RIGHT || !0 != this.m_ballon.toLeft() || null !== this.m_ballon.player) {
                if (null !== this.m_ballon.player) {
                    if (Math.abs(this.m_ballon.x() - this.m_targetGoalX) < GoalKeeperIA.DISTANCE_FOLLOW) {
                        a = this.m_ballon.y();
                        a < this.m_world.goalMinY + this.m_postGap && (a = this.m_world.goalMinY + this.m_postGap);
                        a > this.m_world.goalMaxY - this.m_postGap && (a = this.m_world.goalMaxY - this.m_postGap + GoalKeeperIA.GAP_Y_CORRECTION);
                        var b = this.m_player.currentSpeed;
                        this.m_ballon.player.currentSpeed < b && (b = this.m_ballon.player.currentSpeed * GoalKeeperIA.FACTOR_COVER_SPEED);
                        this.m_player.gotoPosition(this.m_player.mapBaseX, a, b)
                    }!0 == this.ballonInsideArea() && (this.m_player.gotoPosition(this.m_ballon.x(), this.m_ballon.y()), Math.abs(this.m_player.x() - this.m_ballon.x()) < this.m_postGap / 2 && Math.abs(this.m_player.y() - this.m_ballon.y()) < this.m_postGap / 2 && (Global.app.playSound("dko_snd_tackle_hit"), this.m_ballon.player.onHit(), this.m_player.onCatch(), this.m_ballon.setPlayer(this.m_player)))
                }
                if (null ===
                    this.m_ballon.player) {
                    if (Math.abs(this.m_ballon.x() - this.m_player.x()) < this.m_distanceReactJump && !0 == this.m_ballon.onElevation()) this.m_player.onJump();
                    if (this.m_ballon.speed() < GoalKeeperIA.FREE_BALLON_SPEED)!0 == this.ballonInsideArea() && this.m_player.gotoPosition(this.m_ballon.x(), this.m_ballon.y());
                    else if (a = this.calculatePoint(), null !== a && Math.abs(this.m_player.y() - a.y) > GoalKeeperIA.DISTANCE_NEAR_FLY_POINT && Math.abs(this.m_ballon.x() - this.m_player.x()) < this.m_distanceReactFly) this.m_player.onFly(this.m_player.x(),
                        a.y)
                }
            }
    } else this.m_player.gotoPosition(this.m_player.mapBaseX, this.m_player.mapBaseY)
};
GoalKeeperIA.prototype.ballonInsideArea = function() {
    return this.m_ballon.y() > this.m_world.goalMinY - GoalKeeperIA.POST_GAP_NEAR && this.m_ballon.y() < this.m_world.goalMaxY + GoalKeeperIA.POST_GAP_NEAR && Math.abs(this.m_targetGoalX - this.m_ballon.xDribble()) < this.m_gkKeepAreaWidth ? !0 : !1
};
GoalKeeperIA.prototype.calculatePoint = function() {
    var a = -1 * Math.tan(this.m_ballon.angle()),
        b = -1 * Math.tan(this.m_ballon.angle()) * this.m_ballon.x() + this.m_ballon.y(),
        a = -a * (this.m_targetGoalX + this.m_team.direction * GoalKeeperIA.GOAL_OFFSET) + b;
    return a < this.m_world.goalMinY - this.m_postGap || a > this.m_world.goalMaxY + this.m_postGap ? null : new Point(0, a)
};
GoalKeeperIA.prototype.free = function() {
    GoalKeeperIA.superClass_.free.call(this)
};
GoalKeeperIA.GAP_Y_CORRECTION = 40;
GoalKeeperIA.FACTOR_COVER_SPEED = 0.8;
GoalKeeperIA.POST_GAP_NEAR = 50;
GoalKeeperIA.DISTANCE_FOLLOW = 350;
GoalKeeperIA.GOAL_OFFSET = 30;
GoalKeeperIA.DISTANCE_NEAR_FLY_POINT = 10;
GoalKeeperIA.FREE_BALLON_SPEED = 150;
GoalKeeperIA.DISTANCE_KEEP = 450;

function PlayerManager(a, b, c, d, e, f, g, h, k) {
    SCC_WorldActor.call(this, a, b, d, e);
    this.mapBaseX = this.m_x;
    this.mapBaseY = this.m_y;
    this.coverBaseX = f;
    this.coverBaseY = g;
    this.uid = h;
    this.typeIndex = this.type = -1;
    this.team = c;
    this.skin = k.skin;
    this.speed = k.speed;
    this.shortShoot = k.shortShoot;
    this.shortShootBot = k.shortShootBot;
    this.shortShootMax = k.shortShootMax;
    this.longShoot = k.longShoot;
    this.longShootMax = k.longShootMax;
    this.cornerShoot = k.cornerShoot;
    this.specialShoot = k.specialShoot;
    this.sweepSpeed = k.sweepSpeed;
    this.sweepSpeedMax =
        k.sweepSpeedMax;
    this.pass = k.pass;
    this.passMax = k.passMax;
    this.sweepDistance = k.sweepDistance;
    this.shootEffectiveness = k.shootEffectiveness;
    this.factorSpeedWithBalloon = k.factorSpeedWithBalloon;
    this.currentSpeed = this.speed;
    this.zoneEnd = this.zoneInit = 0;
    this.m_onAfterShootNoMoveSafeTime = this.m_isPaused = !1;
    this.m_afterShootNoMoveTime = 0;
    this.m_onAfterSweep = !1;
    this.m_onAfterSweepTime = 0;
    this.m_clipTargetPos = null;
    this.m_targetPos = new Point(0, 0);
    this.m_shootVarApplyElevation = !1;
    this.m_shootVarForce = -1;
    this.m_onChargeShoot =
        this.m_shootVarIsTap = !1;
    this.m_onChargeShootTime = -1;
    this.m_chargeShootSpeedMin = parseInt(Application.config.SoccerGeneral.chargeShootSpeedMin, 10);
    this.m_chargeShootSpeedMax = parseInt(Application.config.SoccerGeneral.chargeShootSpeedMax, 10);
    this.m_chargeShootTimeMin = parseInt(Application.config.SoccerGeneral.chargeShootTimeMin, 10);
    this.m_chargeShootTimeMax = parseInt(Application.config.SoccerGeneral.chargeShootTimeMax, 10);
    this.m_shootOutGapFix = parseInt(Application.config.SoccerGeneral.shootOutGapFix, 10);
    this.m_swipePercent = 0;
    this.m_gotoPositionTap = !1;
    this.m_ballon = this.m_world.ballon;
    this.m_displace = this.m_activeIA = null;
    this.m_onFly = this.m_isWithFocus = !1;
    this.m_goalkeeperTime = this.m_applyForceTime = 0;
    this.m_inModeAI = !0;
    this.m_clipDirection = this.m_clipSelected = null;
    this.m_onTurbo = !1;
    this.m_turboTime = 0;
    this.m_onCornerKick = this.m_onThrowIn = !1;
    this.m_forcePassTime = 0;
    this.m_throwInState = -1;
    this.m_throwInPositionTarget = new Point(0, 0);
    this.m_cornerState = -1;
    this.m_cornerPositionTarget = new Point(0, 0);
    this.m_swipeDistanceMin =
        parseInt(Application.config.SoccerGeneral.swipeDistanceMin, 10);
    this.m_swipeDistanceMax = parseInt(Application.config.SoccerGeneral.swipeDistanceMax, 10);
    this.m_turboTimeTotal = parseInt(Application.config.SoccerGeneral.turboTime, 10);
    this.m_turboFactor = parseFloat(Application.config.SoccerGeneral.turboFactor);
    this.m_halTimeStand = 0;
    this.m_onCelebrate = this.m_onHalfTimeStand = !1;
    this.m_walkInsideField = !0;
    this.m_displace = new Displace(this.m_x, this.m_y);
    this.m_displace.onEndDisplaceCallback = "onEndDisplace";
    this.m_displace.targetCallback =
        this;
    this.targetCallback = this.onEndDisplaceCallback = null;
    this.m_onKickOffMove = !1;
    this.m_character = new Character(this.m_x, this.m_y, a);
    this.m_character.addState(PlayerManager.ST_PLAYER_STAND, this.skin + "_Stand");
    this.m_character.addState(PlayerManager.ST_PLAYER_WALK, this.skin + "_Run");
    this.m_character.addState(PlayerManager.ST_PLAYER_SHOOT, this.skin + "_Kick", [
        ["onMidKick", 6]
    ]);
    this.m_character.addState(PlayerManager.ST_PLAYER_BYCICLE, this.skin + "_FastShoot");
    this.m_character.addState(PlayerManager.ST_PLAYER_SWEEP,
        this.skin + "_Sweep");
    this.m_character.addState(PlayerManager.ST_PLAYER_HIT, this.skin + "_Hit");
    this.m_character.addState(PlayerManager.ST_PLAYER_WIN, this.skin + "_Win");
    this.m_character.addState(PlayerManager.ST_PLAYER_WIN2, this.skin + "_Win2");
    this.m_character.addState(PlayerManager.ST_PLAYER_LOSE, this.skin + "_Defeat");
    this.m_character.addState(PlayerManager.ST_PLAYER_LOSE2, this.skin + "_Defeat2");
    this.m_character.addState(PlayerManager.ST_PLAYER_CATCH, this.skin + "_Sweep");
    this.m_character.addState(PlayerManager.ST_PLAYER_JUMP,
        this.skin + "_GrabMiddle");
    this.m_character.addState(PlayerManager.ST_PLAYER_FLY_UP, this.skin + "_GrabUp");
    this.m_character.addState(PlayerManager.ST_PLAYER_FLY_DOWN, this.skin + "_GrabDown");
    this.m_character.addState(PlayerManager.ST_THROWIN_UP, this.skin + "_ThrowinUp");
    this.m_character.addState(PlayerManager.ST_THROWIN_DOWN, this.skin + "_ThrowinDown");
    this.m_character.addState(PlayerManager.ST_CORNER_UP, this.skin + "_CornerUp");
    this.m_character.addState(PlayerManager.ST_CORNER_DOWN, this.skin + "_CornerDown");
    this.m_character.addState(PlayerManager.ST_CHARGE_KICK, this.skin + "_ChargeShoot");
    this.m_character.addState(PlayerManager.ST_STAND_GK_CATCH, this.skin + "_StandBalloon");
    this.m_character.addState(PlayerManager.ST_SHOOT_SPECIAL, this.skin + "_SpecialShoot");
    this.m_character.addState(PlayerManager.ST_PLAYER_WALK_HAPPY, this.skin + "_RunHappy");
    this.m_character.addState(PlayerManager.ST_PLAYER_WALK_SPEED, this.skin + "_RunSuperSpeed");
    this.m_character.addState(PlayerManager.ST_PLAYER_CHARGE_SUPER, this.skin + "_SpecialCharge");
    this.m_character.addState(PlayerManager.ST_PLAYER_THROWIN_UP_STAND, this.skin + "_ThrowinUpStand");
    this.m_character.addState(PlayerManager.ST_PLAYER_THROWIN_DOWN_STAND, this.skin + "_ThrowinDownStand");
    this.m_character.addState(PlayerManager.ST_PLAYER_CORNER_UP_STAND, this.skin + "_CornerUpStand");
    this.m_character.addState(PlayerManager.ST_PLAYER_CORNER_DOWN_STAND, this.skin + "_CornerDownStand");
    this.m_character.addState(PlayerManager.ST_PLAYER_WALK_BACK, this.skin + "_RunBack");
    this.m_character.addState(PlayerManager.ST_PLAYER_CENTER,
        this.skin + "_KickHigh");
    this.m_character.onEndAnimation = "onEndAnimation";
    this.m_character.worldActor = this;
    this.gotoState(PlayerManager.ST_PLAYER_STAND);
    this.m_onWaitKickOff = !0
}
goog.inherits(PlayerManager, SCC_WorldActor);
PlayerManager.prototype.isWithFocus = function() {
    return this.m_isWithFocus
};
PlayerManager.prototype.setSuperShootFx = function() {
    null !== this.m_clipSelected && this.type !== PlayerManager.TYPE_GOALKEEPER && (this.m_canvas.removeChild(this.m_clipSelected.sprite), this.m_clipSelected = null, this.m_clipSelected = Application.instance.getClip("mcSelectedFull"), this.m_clipSelected.setX(this.m_x - this.m_world.camera().x()), this.m_clipSelected.setY(this.m_y - this.m_world.camera().y()), this.m_clipSelected.sprite._depth = 1E3 * this.m_y - 10, this.m_canvas.addChild(this.m_clipSelected.sprite))
};
PlayerManager.prototype.onHalfTime = function() {
    this.m_walkInsideField = !1;
    this.m_halTimeStand = PlayerManager.HALF_TIME_STAND;
    this.m_onHalfTimeStand = !0
};
PlayerManager.prototype.setOnKickoffMove = function() {
    this.m_onKickOffMove = !0
};
PlayerManager.prototype.changeStats = function(a) {
    this.currentSpeed = this.speed = a.speed;
    this.shortShoot = a.shortShoot;
    this.shortShootBot = a.shortShootBot;
    this.shortShootMax = a.shortShootMax;
    this.longShoot = a.longShoot;
    this.longShootMax = a.longShootMax;
    this.cornerShoot = a.cornerShoot;
    this.sweepSpeed = a.sweepSpeed;
    this.sweepSpeedMax = a.sweepSpeedMax;
    this.pass = a.pass;
    this.passMax = a.passMax;
    this.sweepDistance = a.sweepDistance;
    this.shootEffectiveness = a.shootEffectiveness;
    this.factorSpeedWithBalloon = a.factorSpeedWithBalloon
};
PlayerManager.prototype.updatePlayerStats = function() {
    this.currentSpeed = this.speed *= parseFloat(Application.config.SoccerGeneral.playerSpeedFactor);
    this.shortShoot *= parseFloat(Application.config.SoccerGeneral.playerShootFactor);
    this.shortShootBot *= parseFloat(Application.config.SoccerGeneral.playerShootFactor);
    this.shortShootMax *= parseFloat(Application.config.SoccerGeneral.playerShootFactor);
    this.longShoot *= parseFloat(Application.config.SoccerGeneral.playerShootFactor);
    this.longShootMax *= parseFloat(Application.config.SoccerGeneral.playerShootFactor);
    this.cornerShoot *= parseFloat(Application.config.SoccerGeneral.playerShootFactor);
    this.sweepSpeed *= parseFloat(Application.config.SoccerGeneral.playerSweepFactor);
    this.sweepSpeedMax *= parseFloat(Application.config.SoccerGeneral.playerSweepFactor);
    this.pass *= parseFloat(Application.config.SoccerGeneral.playerPassFactor);
    this.passMax *= parseFloat(Application.config.SoccerGeneral.playerPassFactor)
};
PlayerManager.prototype.onEndTapSign = function() {
    null !== this.m_clipTargetPos && this.m_clipTargetPos.setVisible(!0)
};
PlayerManager.prototype.onMidKick = function() {
    this.type == PlayerManager.TYPE_GOALKEEPER && this.m_ballon.setVisible(!0)
};
PlayerManager.prototype.isOnThrowIn = function() {
    return this.m_onThrowIn
};
PlayerManager.prototype.setPause = function(a) {
    this.m_isPaused = a;
    !0 == this.m_isPaused && (this.m_displace.cancel(), this.gotoState(PlayerManager.ST_PLAYER_STAND))
};
PlayerManager.prototype.onHoldMove = function() {
    null === this.m_clipDirection && (this.m_clipDirection = Application.instance.getClip("mcDirection"), this.m_clipDirection.setX(this.m_x - this.m_world.camera().x()), this.m_clipDirection.setY(this.m_y - this.m_world.camera().y()), this.m_clipDirection.sprite._depth = 1E3 * this.m_y - 10, this.m_canvas.addChild(this.m_clipDirection.sprite), this.m_clipDirection.setRotation(180 * this.m_displace.angle / Math.PI))
};
PlayerManager.prototype.updateHoldMove = function() {
    null === this.m_clipDirection && (this.m_clipDirection = Application.instance.getClip("mcDirection"), this.m_clipDirection.setX(this.m_x - this.m_world.camera().x()), this.m_clipDirection.setY(this.m_y - this.m_world.camera().y()), this.m_clipDirection.sprite._depth = 1E3 * this.m_y - 10, this.m_canvas.addChild(this.m_clipDirection.sprite));
    null !== this.m_clipDirection && this.m_clipDirection.setRotation(180 * this.m_displace.angle / Math.PI)
};
PlayerManager.prototype.cancelHoldMove = function() {
    null !== this.m_clipDirection && (this.m_canvas.removeChild(this.m_clipDirection.sprite), this.m_clipDirection = null)
};
PlayerManager.prototype.onThrowIn = function(a, b, c) {
    this.m_activeIA.onThrowIn(a, b, c)
};
PlayerManager.prototype.setThrowInTarget = function(a, b) {
    this.gotoPosition(a, b);
    this.m_throwInState = PlayerManager.ST_THROWIN_GO;
    this.m_onThrowIn = !0;
    this.m_throwInPositionTarget.x = a;
    this.m_throwInPositionTarget.y = b
};
PlayerManager.prototype.onCornerKick = function(a, b) {
    this.m_activeIA.onCornerKick(a, b)
};
PlayerManager.prototype.setCornerTarget = function(a, b) {
    this.gotoPosition(a, b);
    this.m_cornerState = PlayerManager.ST_CORNER_GO;
    this.m_onCornerKick = !0;
    this.m_cornerPositionTarget.x = a;
    this.m_cornerPositionTarget.y = b
};
PlayerManager.prototype.onThrowInEnd = function() {
    this.m_activeIA.onThrowInEnd();
    this.m_onThrowIn = !1
};
PlayerManager.prototype.onCornerKickEnd = function() {
    this.m_activeIA.onCornerKickEnd();
    this.m_onCornerKick = !1
};
PlayerManager.prototype.setPositionField = function(a, b) {
    this.m_displace.resetPosition(a, b);
    this.m_displace.cancel();
    this.m_x = a;
    this.m_y = b;
    this.m_onCelebrate = !1;
    this.gotoState(PlayerManager.ST_PLAYER_STAND)
};
PlayerManager.prototype.getTurboPowerUp = function() {
    this.m_turboTime = this.m_turboTimeTotal;
    this.m_onTurbo = !0;
    this.currentSpeed = this.speed * this.m_turboFactor;
    this.isWithTheBallon() && (this.currentSpeed = this.speed * this.factorSpeedWithBalloon * this.m_turboFactor);
    this.m_displace.updateSpeed(this.currentSpeed);
    this.m_state == PlayerManager.ST_PLAYER_WALK && this.gotoState(PlayerManager.ST_PLAYER_WALK_SPEED)
};
PlayerManager.prototype.onSwipe = function(a, b, c, d) {
    if (this.canChangeState() && !(0 < this.m_applyForceTime))
        if (this.type == PlayerManager.TYPE_GOALKEEPER) {
            if (this.isWithTheBallon()) this.onGoalKick()
        } else if (!0 != this.m_onThrowIn && !0 != this.m_onCornerKick && (c < this.m_swipeDistanceMin && (c = this.m_swipeDistanceMin), c > this.m_swipeDistanceMax && (c = this.m_swipeDistanceMax), c -= this.m_swipeDistanceMin, this.m_swipePercent = c / (this.m_swipeDistanceMax - this.m_swipeDistanceMin), a = 0, b = !1, this.m_displace.gotoDirection(10, d,
            10), this.m_displace.cancel(), null !== this.m_ballon.player ? this.m_ballon.player.uid === this.uid && this.type !== PlayerManager.TYPE_GOALKEEPER ? (a = this.shortShoot + (this.shortShootMax - this.shortShoot) * this.m_swipePercent, this.team.direction == Team.TEAM_LEFT && !0 == this.m_displace.toLeft() && (b = !0), this.team.direction == Team.TEAM_RIGHT && !1 == this.m_displace.toLeft() && (b = !0), !0 == b && (d = 0 < d ? d + 2 * (Math.PI / 2 - d) : d + 2 * (-Math.PI / 2 - d), this.m_displace.gotoDirection(10, d, 10), this.m_displace.cancel()), this.onShootToGoal(!1, a /
            this.shortShoot, !1)) : !1 == this.m_world.isOnThrowIn() && this.type !== PlayerManager.TYPE_GOALKEEPER && (a = this.sweepSpeed + (this.sweepSpeedMax - this.sweepSpeed) * this.m_swipePercent, this.onSweep(a / this.sweepSpeed)) : !1 == this.m_world.isOnThrowIn() && this.type !== PlayerManager.TYPE_GOALKEEPER && (a = this.sweepSpeed + (this.sweepSpeedMax - this.sweepSpeed) * this.m_swipePercent, this.onSweep(a / this.sweepSpeed)), null === this.m_ballon.player && this.type !== PlayerManager.TYPE_GOALKEEPER && Math.abs(this.m_ballon.x() - this.m_x) < PlayerManager.DISTANCE_FAST_SHOOT_X &&
        Math.abs(this.m_ballon.y() - this.m_y) < PlayerManager.DISTANCE_FAST_SHOOT_Y)) this.onSpecialShoot()
};
PlayerManager.prototype.onTap = function(a, b, c) {
    !this.canChangeState() || 0 < this.m_applyForceTime || ((this.m_swipePercent = 0, null === this.m_ballon.player || this.m_ballon.player.uid !== this.uid || !0 != this.m_onThrowIn && !0 != this.m_onCornerKick) ? null !== this.m_ballon.player && this.m_ballon.player.uid === this.uid ? (this.m_gotoPositionTap = !0, this.gotoPosition(b, c), this.onPass(1)) : null !== a && !1 == a.team.isBotTeam && (this.focus(!1), a.focus(!0)) : b < this.m_world.limitMinX + PlayerManager.INSIDE_FIELD_GAP || b > this.m_world.limitMaxX -
        PlayerManager.INSIDE_FIELD_GAP || c < this.m_world.limitMinY + PlayerManager.INSIDE_FIELD_GAP || c > this.m_world.limitMaxY - PlayerManager.INSIDE_FIELD_GAP || (!0 == this.m_onThrowIn && (this.gotoPosition(b, c), this.onPass(1)), !0 == this.m_onCornerKick && (this.gotoPosition(b, c), this.onCenter(1))))
};
PlayerManager.prototype.state = function() {
    return this.m_state
};
PlayerManager.prototype.onAIMode = function() {
    return this.m_inModeAI
};
PlayerManager.prototype.reset = function() {
    this.m_activeIA.resetPosition();
    this.m_x = this.mapBaseX;
    this.m_y = this.mapBaseY;
    this.m_displace.resetPosition(this.m_x, this.m_y);
    this.m_displace.cancel();
    this.gotoState(PlayerManager.ST_PLAYER_STAND);
    this.focus(!1);
    this.m_onWaitKickOff = !1
};
PlayerManager.prototype.setPlayerType = function(a, b) {
    this.type = a;
    this.typeIndex = b;
    this.initActiveZone();
    this.m_activeIA = this.type == PlayerManager.TYPE_GOALKEEPER ? new GoalKeeperIA(this.m_world, this) : new SoccerIA(this.m_world, this)
};
PlayerManager.prototype.canGetTheBallon = function() {
    return this.m_world.isOnThrowIn() && !1 == this.m_onThrowIn && !1 == this.m_onCornerKick ? !1 : 0 > this.m_applyForceTime && this.m_activeIA.canReact() && (this.m_state == PlayerManager.ST_PLAYER_STAND || this.m_state == PlayerManager.ST_PLAYER_WALK || this.m_state == PlayerManager.ST_PLAYER_SWEEP || this.m_state == PlayerManager.ST_PLAYER_CATCH || this.m_state == PlayerManager.ST_PLAYER_FLY_UP || this.m_state == PlayerManager.ST_PLAYER_FLY_DOWN || PlayerManager.ST_PLAYER_JUMP) ? !0 : !1
};
PlayerManager.prototype.isRunning = function() {
    return this.m_state == PlayerManager.ST_PLAYER_WALK
};
PlayerManager.prototype.isLookingLeft = function() {
    return this.m_flipX
};
PlayerManager.prototype.isWithTheBallon = function() {
    return null == this.m_ballon.player ? !1 : this.m_ballon.player.uid == this.uid ? !0 : !1
};
PlayerManager.prototype.getActiveAI = function() {
    return this.m_activeIA
};
PlayerManager.prototype.getDisplace = function() {
    return this.m_displace
};
PlayerManager.prototype.isSelectable = function() {
    return this.m_state == PlayerManager.ST_PLAYER_HIT ? !1 : !0
};
PlayerManager.prototype.onEndDisplace = function() {
    this.m_state != PlayerManager.ST_PLAYER_FLY_UP && this.m_state != PlayerManager.ST_PLAYER_FLY_DOWN && this.m_state != PlayerManager.ST_PLAYER_JUMP && this.m_state != PlayerManager.ST_PLAYER_SHOOT && this.m_state != PlayerManager.ST_THROWIN_UP && this.m_state != PlayerManager.ST_THROWIN_DOWN && this.m_state != PlayerManager.ST_CORNER_UP && this.m_state != PlayerManager.ST_CORNER_DOWN && (!0 == this.m_onCelebrate ? this.gotoState(PlayerManager.ST_PLAYER_WIN) : this.gotoState(PlayerManager.ST_PLAYER_STAND));
    !0 == this.m_onThrowIn && this.m_throwInState == PlayerManager.ST_THROWIN_GO && (this.m_throwInState = PlayerManager.ST_THROWIN_WAIT, this.m_forcePassTime = PlayerManager.FORCE_PASS_TIME, this.m_ballon.setPlayer(this), this.setPositionField(this.m_throwInPositionTarget.x, this.m_throwInPositionTarget.y), this.gotoState(PlayerManager.ST_PLAYER_THROWIN_UP_STAND), Math.abs(this.m_y - this.m_world.limitMaxY) < PlayerManager.POLE_TARGET_DELTA && this.gotoState(PlayerManager.ST_PLAYER_THROWIN_DOWN_STAND), this.m_ballon.setVisible(!1));
    !0 == this.m_onCornerKick && this.m_cornerState == PlayerManager.ST_CORNER_GO && (this.m_cornerState = PlayerManager.ST_CORNER_WAIT, this.m_forcePassTime = PlayerManager.FORCE_PASS_TIME, this.m_ballon.setPlayer(this), this.setPositionField(this.m_cornerPositionTarget.x, this.m_cornerPositionTarget.y), this.gotoState(PlayerManager.ST_PLAYER_CORNER_UP_STAND), Math.abs(this.m_y - this.m_world.limitMaxY) < PlayerManager.POLE_TARGET_DELTA && this.gotoState(PlayerManager.ST_PLAYER_CORNER_DOWN_STAND), this.m_ballon.setVisible(!1));
    this.m_onFly && (this.m_onFly = !1, this.m_activeIA && this.m_activeIA.setRecharge());
    null !== this.m_clipTargetPos && (this.m_canvas.removeChild(this.m_clipTargetPos.sprite), this.m_clipTargetPos = null);
    if (!0 == this.m_onKickOffMove) {
        if (this.onEndDisplaceCallback && this.targetCallback) this.targetCallback[this.onEndDisplaceCallback]();
        this.m_onKickOffMove = !1
    }
};
PlayerManager.prototype.gotoState = function(a) {
    this.isWithTheBallon() && (this.m_state != PlayerManager.ST_PLAYER_STAND && this.m_state != PlayerManager.ST_PLAYER_CATCH && this.m_state != PlayerManager.ST_PLAYER_JUMP && this.m_state != PlayerManager.ST_PLAYER_FLY_UP && this.m_state != PlayerManager.ST_PLAYER_FLY_DOWN || this.m_ballon.ballonGotoState(Ballon.ST_WITH_PLAYER_STAND), this.m_state != PlayerManager.ST_PLAYER_WALK && this.m_state != PlayerManager.ST_PLAYER_SWEEP || this.m_ballon.ballonGotoState(Ballon.ST_WITH_PLAYER_MOVE));
    this.m_state == PlayerManager.ST_PLAYER_STAND && (this.setFlipX(!1), this.m_x > this.m_ballon.xDribble() && this.setFlipX(!0));
    this.type == PlayerManager.TYPE_GOALKEEPER && (this.setFlipX(!1), this.team.direction == Team.TEAM_RIGHT && this.setFlipX(!0));
    !0 == this.m_onCornerKick && (this.setFlipX(!1), Math.abs(this.m_x - this.m_world.limitMaxX) < PlayerManager.POLE_TARGET_DELTA && this.setFlipX(!0));
    !0 == this.m_onTurbo && a == PlayerManager.ST_PLAYER_WALK && this.m_state == PlayerManager.ST_PLAYER_WALK_SPEED || this.m_state == a || (this.m_onChargeShoot = !1, PlayerManager.superClass_.gotoState.call(this, a), this.setScale(0.7), this.m_state == PlayerManager.ST_PLAYER_STAND && this.type == PlayerManager.TYPE_GOALKEEPER && !0 == this.isWithTheBallon() && this.gotoState(PlayerManager.ST_STAND_GK_CATCH), this.m_state != PlayerManager.ST_PLAYER_SHOOT && this.m_state != PlayerManager.ST_PLAYER_BYCICLE && this.m_state != PlayerManager.ST_PLAYER_SWEEP && this.m_state != PlayerManager.ST_PLAYER_HIT && this.m_state != PlayerManager.ST_PLAYER_CATCH && this.m_state != PlayerManager.ST_PLAYER_JUMP ||
        this.m_character.actor().clip().setLoop(!1), this.setScaleBounds(1.5), this.updateBounds(), this.m_state == PlayerManager.ST_PLAYER_WIN && 1 == Common.random(0, 1) && this.gotoState(PlayerManager.ST_PLAYER_WIN2), this.m_state == PlayerManager.ST_PLAYER_LOSE && 1 == Common.random(0, 1) && this.gotoState(PlayerManager.ST_PLAYER_LOSE2), !0 == this.m_onTurbo && this.m_state == PlayerManager.ST_PLAYER_WALK && this.gotoState(PlayerManager.ST_PLAYER_WALK_SPEED))
};
PlayerManager.prototype.onEndAnimation = function(a) {
    switch (a) {
        case PlayerManager.ST_PLAYER_STAND:
        case PlayerManager.ST_THROWIN_UP:
        case PlayerManager.ST_THROWIN_DOWN:
        case PlayerManager.ST_CORNER_UP:
        case PlayerManager.ST_CORNER_DOWN:
        case PlayerManager.ST_PLAYER_SHOOT:
        case PlayerManager.ST_PLAYER_BYCICLE:
        case PlayerManager.ST_PLAYER_HIT:
        case PlayerManager.ST_PLAYER_CATCH:
        case PlayerManager.ST_PLAYER_JUMP:
        case PlayerManager.ST_PLAYER_FLY_UP:
        case PlayerManager.ST_PLAYER_FLY_DOWN:
        case PlayerManager.ST_PLAYER_CENTER:
            this.gotoState(PlayerManager.ST_PLAYER_STAND);
            break;
        case PlayerManager.ST_PLAYER_SWEEP:
            this.gotoState(PlayerManager.ST_PLAYER_SWEEP);
            this.m_onAfterSweepTime = PlayerManager.AFTER_SWEEP_TIME;
            this.m_onAfterSweep = !0;
            break;
        case PlayerManager.ST_CHARGE_KICK:
            this.gotoState(PlayerManager.ST_CHARGE_KICK)
    }
};
PlayerManager.prototype.update = function(a) {
    !0 != this.m_onWaitKickOff && (this.m_character.update(a), PlayerManager.superClass_.update.call(this, a), this.setDepth(1E3 * this.m_y), !0 == this.m_onHalfTimeStand && (this.m_halTimeStand -= a, 0 > this.m_halTimeStand && (this.gotoPosition(this.m_world.width() / 2, this.m_world.height() + 250), this.m_onHalfTimeStand = !1)), null !== this.m_clipTargetPos && (this.m_clipTargetPos.update(a), this.m_clipTargetPos.setX(this.m_targetPos.x - this.m_world.camera().x()), this.m_clipTargetPos.setY(this.m_targetPos.y -
        this.m_world.camera().y())), !0 == this.m_onAfterSweep && (this.m_onAfterSweepTime -= a, 0 > this.m_onAfterSweepTime && (this.m_onAfterSweep = !1)), null !== this.m_clipSelected && (this.m_clipSelected.update(a), this.m_clipSelected.setX(this.m_x - this.m_world.camera().x()), this.m_clipSelected.setY(this.m_y - this.m_world.camera().y()), this.m_clipSelected.sprite._depth = 1E3 * this.m_y - 10), null !== this.m_clipDirection && (this.m_clipDirection.update(a), this.m_clipDirection.setX(this.m_x + Math.cos(this.m_clipDirection.rotation *
        Math.PI / 180) * PlayerManager.SELECT_AXIS_X - this.m_world.camera().x()), this.m_clipDirection.setY(this.m_y + Math.sin(this.m_clipDirection.rotation * Math.PI / 180) * PlayerManager.SELECT_AXIS_Y - this.m_world.camera().y()), this.m_clipDirection.sprite._depth = 1E3 * this.m_y - 10), this.m_displace.update(a), !0 == this.m_walkInsideField && (this.m_displace.x() < this.m_world.limitMinX - PlayerManager.INSIDE_FIELD_GAP || this.m_displace.x() > this.m_world.limitMaxX + PlayerManager.INSIDE_FIELD_GAP || this.m_displace.y() < this.m_world.limitMinY -
        PlayerManager.INSIDE_FIELD_GAP || this.m_displace.y() > this.m_world.limitMaxY + PlayerManager.INSIDE_FIELD_GAP) ? this.m_displace.cancel() : (this.m_x = this.m_displace.x(), this.m_y = this.m_displace.y()), !0 != this.m_isPaused && (!0 == this.m_onChargeShoot ? (this.m_onChargeShootTime -= a, 0 > this.m_onChargeShootTime && (this.m_onChargeShoot = !1, this.doShootToGoal())) : (!0 == this.m_onTurbo && (this.m_turboTime -= a, 0 > this.m_turboTime && (this.m_onTurbo = !1, this.currentSpeed = this.speed, this.isWithTheBallon() && (this.currentSpeed = this.speed *
            this.factorSpeedWithBalloon), this.m_state == PlayerManager.ST_PLAYER_WALK_SPEED && this.gotoState(PlayerManager.ST_PLAYER_WALK))), !0 == this.m_onAfterShootNoMoveSafeTime && (this.m_afterShootNoMoveTime -= a, 0 > this.m_afterShootNoMoveTime && (this.m_onAfterShootNoMoveSafeTime = !1)), this.m_applyForceTime -= a, this.isWithTheBallon() && this.type == PlayerManager.TYPE_GOALKEEPER && (this.m_goalkeeperTime += a, this.m_goalkeeperTime > PlayerManager.GOALKEEPER_TIME && (this.onGoalKick(), this.m_goalkeeperTime = 0)), null !== this.m_ballon.player &&
        this.m_state == PlayerManager.ST_PLAYER_SWEEP && this.m_ballon.player.uid != this.uid && !0 == this.m_ballon.player.hitTestAttack(this) && (this.m_ballon.player.type !== PlayerManager.TYPE_GOALKEEPER ? (this.m_ballon.player.onHit(), this.m_ballon.setPlayer(this), Global.app.playSound("dko_snd_tackle_hit")) : (Global.app.playSound("dko_snd_tackle_hit"), this.onHit())), !0 == this.m_inModeAI && (!0 == this.m_onThrowIn && this.m_throwInState == PlayerManager.ST_THROWIN_WAIT && (this.m_forcePassTime -= a, 0 > this.m_forcePassTime && (this.gotoPosition(this.m_x,
            this.m_y - 10), Math.abs(this.m_world.limitMinY - this.m_y) < PlayerManager.ON_CENTER_GAP && this.gotoPosition(this.m_x, this.m_y + 10), this.onPass(1, 180))), !0 == this.m_onCornerKick && this.m_cornerState == PlayerManager.ST_CORNER_WAIT && (this.m_forcePassTime -= a, 0 > this.m_forcePassTime && (this.gotoPosition(this.m_x, this.m_y - 10), Math.abs(this.m_world.limitMinY - this.m_y) < PlayerManager.ON_CENTER_GAP && this.gotoPosition(this.m_x, this.m_y + 10), this.onCenter(1, 180)))), !0 == this.m_inModeAI && !1 == this.m_onThrowIn && !1 == this.m_onCornerKick &&
        this.m_activeIA.update(a))))
};
PlayerManager.prototype.onGetTheBallon = function(a) {
    this.currentSpeed = this.speed;
    !0 == a ? (this.type == PlayerManager.TYPE_GOALKEEPER && (this.m_state == PlayerManager.ST_PLAYER_STAND && this.gotoState(PlayerManager.ST_STAND_GK_CATCH), this.m_ballon.setVisible(!1)), this.focus(!0), this.team.setBallPosesion(), this.team.takeOffensiveStand(this), this.currentSpeed = this.speed * this.factorSpeedWithBalloon, this.type == PlayerManager.TYPE_GOALKEEPER && (this.m_goalkeeperTime = 0)) : (this.m_activeIA.onLoseTheBallon(), this.m_onChargeShoot = !1);
    !0 == this.m_onTurbo && (this.currentSpeed *= this.m_turboFactor, this.m_displace.updateSpeed(this.currentSpeed))
};
PlayerManager.prototype.focus = function(a) {
    this.m_isWithFocus != a && !1 == this.team.isBotTeam && (this.m_isWithFocus = a, this.m_inModeAI = !a, null !== this.m_clipSelected && (this.m_canvas.removeChild(this.m_clipSelected.sprite), this.m_clipSelected = null), !0 == this.m_isWithFocus ? (this.m_state !== PlayerManager.ST_PLAYER_SWEEP && this.m_displace.cancel(), this.m_world.setPlayer(this), this.m_clipSelected = null, !0 == this.team.haveSuperShoot() && this.type !== PlayerManager.TYPE_GOALKEEPER ? this.m_clipSelected = Application.instance.getClip("mcSelectedFull") :
        this.m_clipSelected = Application.instance.getClip("mcSelected"), this.m_clipSelected.setX(this.m_x - this.m_world.camera().x()), this.m_clipSelected.setY(this.m_y - this.m_world.camera().y()), this.m_clipSelected.sprite._depth = 1E3 * this.m_y - 10, this.m_canvas.addChild(this.m_clipSelected.sprite)) : (this.cancelHoldMove(), null !== this.m_clipTargetPos && (this.m_canvas.removeChild(this.m_clipTargetPos.sprite), this.m_clipTargetPos = null)))
};
PlayerManager.prototype.gotoPosition = function(a, b, c) {
    c = "undefined" === typeof c ? -1 : c;
    this.m_y < this.m_world.limitMinY && b < this.m_world.limitMinY - PlayerManager.OUT_FIELD_GAP || this.m_y > this.m_world.limitMaxY && b > this.m_world.limitMaxY + PlayerManager.OUT_FIELD_GAP || this.m_x < this.m_world.limitMinX && a < this.m_world.limitMinX - PlayerManager.OUT_FIELD_GAP || this.m_x > this.m_world.limitMaxX && a > this.m_world.limitMaxX - PlayerManager.OUT_FIELD_GAP || Math.abs(this.m_x - a) < PlayerManager.DISTANCE_NEAR && Math.abs(this.m_y - b) <
        PlayerManager.DISTANCE_NEAR || !0 == this.m_onAfterShootNoMoveSafeTime && !1 == this.isWithTheBallon() && b > this.m_world.goalMinY && b < this.m_world.goalMaxY && (a < this.m_world.limitMinX || a > this.m_world.limitMaxX) || (0 < c ? this.m_displace.gotoPosition(a, b, c) : this.m_displace.gotoPosition(a, b, this.currentSpeed), !0 == this.m_onCelebrate ? this.gotoState(PlayerManager.ST_PLAYER_WALK_HAPPY) : this.type == PlayerManager.TYPE_GOALKEEPER ? this.team.direction == Team.TEAM_LEFT && this.m_displace.toLeft() ? this.gotoState(PlayerManager.ST_PLAYER_WALK_BACK) :
            this.gotoState(PlayerManager.ST_PLAYER_WALK) : this.gotoState(PlayerManager.ST_PLAYER_WALK), Math.abs(this.m_x - a) > PlayerManager.SAME_X_DELTA && this.type != PlayerManager.TYPE_GOALKEEPER && (this.setFlipX(!1), !0 == this.m_displace.toLeft() && this.setFlipX(!0)), !0 == this.m_isWithFocus && this.m_state !== PlayerManager.ST_PLAYER_SWEEP && (null === this.m_clipTargetPos && (this.m_clipTargetPos = Application.instance.getClip("mcTargetDisplace"), this.m_canvas.addChild(this.m_clipTargetPos.sprite), this.m_clipTargetPos.sprite._depth =
                0), this.m_targetPos.x = a, this.m_targetPos.y = b, this.m_clipTargetPos.setX(this.m_targetPos.x - this.m_world.camera().x()), this.m_clipTargetPos.setY(this.m_targetPos.y - this.m_world.camera().y()), !0 == this.m_gotoPositionTap && this.m_clipTargetPos.setVisible(!1)), this.m_gotoPositionTap = !1)
};
PlayerManager.prototype.cancelDisplace = function() {
    this.m_displace.cancel();
    null !== this.m_clipTargetPos && (this.m_canvas.removeChild(this.m_clipTargetPos.sprite), this.m_clipTargetPos = null)
};
PlayerManager.prototype.onCatch = function() {
    this.gotoState(PlayerManager.ST_PLAYER_CATCH)
};
PlayerManager.prototype.onFly = function(a, b) {
    !this.canChangeState() || Math.abs(this.m_x - a) < PlayerManager.DISTANCE_NEAR && Math.abs(this.m_y - b) < PlayerManager.DISTANCE_NEAR || (this.m_displace.gotoPosition(a, b, this.sweepSpeed), this.gotoState(PlayerManager.ST_PLAYER_FLY_UP), this.m_y < b && this.gotoState(PlayerManager.ST_PLAYER_FLY_DOWN))
};
PlayerManager.prototype.onJump = function() {
    this.canChangeState() && this.gotoState(PlayerManager.ST_PLAYER_JUMP)
};
PlayerManager.prototype.onPass = function(a, b) {
    if (!this.canChangeState()) return !1;
    a = "undefined" === typeof a ? 1 : a;
    b = "undefined" === typeof b ? -1 : b;
    this.m_ballon.setVisible(!0);
    if (this.isWithTheBallon())
        if ((Math.abs(this.m_y - this.m_world.limitMinY) < PlayerManager.ON_CENTER_GAP || Math.abs(this.m_y - this.m_world.limitMaxY) < PlayerManager.ON_CENTER_GAP) && !0 == this.isAngleUpDown() && !1 == this.m_onThrowIn && (!0 == this.team.isBotTeam && !0 == this.m_activeIA.m_canIABycicleKick || !1 == this.team.isBotTeam)) this.onCenter();
        else {
            var c =
                null,
                c = this.type == PlayerManager.TYPE_GOALKEEPER ? this.team.findPlayerForPass(this, 700, 180) : 0 == b ? this.team.findPlayerForPass(this, 700, PlayerManager.PASS_SEARCH_ANGLE) : this.team.findPlayerForPass(this, 700, b),
                d = 0;
            if (null !== c) c.focus(!0), c.m_activeIA.setWaitingPass(!0), d = 0 == b ? this.m_displace.angle : Math.atan2(c.y() - this.m_ballon.y(), c.x() - this.m_ballon.xDribble());
            else {
                if (!0 == this.team.isBotTeam) return !1;
                d = this.m_displace.angle
            }
            this.m_displace.cancel();
            !0 == this.m_onThrowIn ? (this.m_world.onThrowInEnd(),
                this.gotoState(PlayerManager.ST_THROWIN_UP), Math.abs(this.m_y - this.m_world.limitMaxY) < PlayerManager.POLE_TARGET_DELTA && this.gotoState(PlayerManager.ST_THROWIN_DOWN), this.m_ballon.setHeightInit(PlayerManager.THROW_IN_HEIGHT)) : this.gotoState(PlayerManager.ST_PLAYER_SHOOT);
            Global.app.playSound("dko_snd_pass");
            null === c && (d = this.validateNotToGoal(d));
            this.m_ballon.applyForce(!1, this.pass * a, d, !1);
            this.team.enemyTeam.setReactionDelay();
            this.onGetTheBallon(!1);
            this.m_applyForceTime = PlayerManager.APPLY_FORCE_TIME;
            return !0
        }
};
PlayerManager.prototype.isAngleUpDown = function() {
    var a = 180 / Math.PI * this.m_displace.angle % 360;
    0 > a && (a += 360);
    return 45 < a && 135 > a || 225 < a && 315 > a ? !0 : !1
};
PlayerManager.prototype.validateNotToGoal = function(a) {
    var b = this.m_world.goalMinY + (this.m_world.goalMaxY - this.m_world.goalMinY) / 2;
    return Math.abs(this.m_x - this.m_world.limitMinX) < PlayerManager.DISTANCE_SHOOT && !0 == this.m_displace.toLeft() ? Math.atan2(b - this.m_y, this.m_world.limitMinX - this.m_x) : Math.abs(this.m_x - this.m_world.limitMaxX) < PlayerManager.DISTANCE_SHOOT && !1 == this.m_displace.toLeft() ? Math.atan2(b - this.m_y, this.m_world.limitMaxX - this.m_x) : a
};
PlayerManager.prototype.onCenter = function(a, b) {
    if (this.canChangeState() && (b = "undefined" === typeof b ? -1 : b, this.m_ballon.setVisible(!0), this.isWithTheBallon())) {
        Global.app.playSound("dko_snd_kick_shoot");
        this.team.enemyTeam.setReactionDelay();
        var c = this.m_displace.angle,
            d = this.team.findPlayerForPass(this, 700, b);
        null !== d && (c = Math.atan2(d.y() - this.m_y, d.x() - this.m_x));
        var e = this.longShoot + (this.longShootMax - this.longShoot) * this.m_swipePercent;
        !0 == this.m_onCornerKick && (e = this.cornerShoot);
        this.m_ballon.applyForce(!1,
            e, c, !0);
        null === d && (c = this.m_world.ballon.estimatePositionOnGround(), d = this.team.findPlayerNearPoint(c.x, c.y));
        this.m_applyForceTime = PlayerManager.APPLY_FORCE_TIME;
        d.m_activeIA.setWaitingPass(!0);
        this.onGetTheBallon(!1);
        this.m_displace.cancel();
        !0 == this.m_onCornerKick ? (this.m_world.onCornerKickEnd(), this.gotoState(PlayerManager.ST_CORNER_UP), Math.abs(this.m_y - this.m_world.limitMaxY) < PlayerManager.POLE_TARGET_DELTA && this.gotoState(PlayerManager.ST_CORNER_DOWN)) : this.gotoState(PlayerManager.ST_PLAYER_CENTER)
    }
};
PlayerManager.prototype.onGoalKick = function(a) {
    if (this.canChangeState() && (a = "undefined" === typeof a ? 1 : a, this.m_displace.cancel(), this.gotoState(PlayerManager.ST_PLAYER_SHOOT), Global.app.playSound("dko_snd_kick_shoot"), this.isWithTheBallon())) {
        var b = 0;
        this.team.direction == Team.TEAM_RIGHT && (b = Math.PI);
        this.m_ballon.applyForce(!1, this.longShoot * a, b, !0);
        this.onGetTheBallon(!1);
        this.team.enemyTeam.setReactionDelay();
        this.team.selectedPlayer(this.team.findPlayerNearTheBall())
    }
};
PlayerManager.prototype.onShootToGoal = function(a, b, c) {
    this.canChangeState() && this.m_state != PlayerManager.ST_CHARGE_KICK && (this.setFlipX(!1), this.team.direction == Team.TEAM_RIGHT && this.setFlipX(!0), a = "undefined" === typeof a ? !1 : a, b = "undefined" === typeof b ? 1 : b, c = "undefined" === typeof c ? !0 : c, this.isWithTheBallon() && (this.m_ballon.update(0), this.m_displace.cancel(), !0 == this.team.haveSuperShoot() ? this.gotoState(PlayerManager.ST_PLAYER_CHARGE_SUPER) : this.gotoState(PlayerManager.ST_CHARGE_KICK), this.m_shootVarApplyElevation =
        a, this.m_shootVarForce = this.shortShoot * b, this.m_shootVarIsTap = c, !0 == this.m_shootVarIsTap && (this.m_shootVarForce = this.shortShoot + (this.shortShootMax - this.shortShoot) * PlayerManager.ADJUST_TAP_SHOOT), !0 == this.team.isBotTeam && (this.m_shootVarForce = Common.random(this.shortShootBot, this.shortShootMax)), a = this.m_shootVarForce, a < this.m_chargeShootSpeedMin ? (this.m_onChargeShoot = !1, this.doShootToGoal(), Global.savedNumData[Global.INDEX_ACH_COUNTER_4]++, Global.data.checkAchievementLionKick()) : (a > this.m_chargeShootSpeedMax &&
            (a = this.m_chargeShootSpeedMax), this.m_onChargeShootTime = this.m_chargeShootTimeMin + (a - this.m_chargeShootSpeedMin) / (this.m_chargeShootSpeedMax - this.m_chargeShootSpeedMin) * (this.m_chargeShootTimeMax - this.m_chargeShootTimeMin), this.m_onChargeShoot = !0, Global.savedNumData[Global.INDEX_ACH_COUNTER_3]++, Global.data.checkAchievementSmallField()), Common.saveData(Global.KEY_NUM_DATA, Common.storageString(Global.savedNumData))))
};
PlayerManager.prototype.doShootToGoal = function() {
    if (this.isWithTheBallon()) {
        this.gotoState(PlayerManager.ST_PLAYER_SHOOT);
        this.m_afterShootNoMoveTime = PlayerManager.AFTER_SHOOT_NOMOVE_TIME;
        this.m_onAfterShootNoMoveSafeTime = !0;
        var a = 0;
        !0 == this.team.haveSuperShoot() ? (this.gotoState(PlayerManager.ST_SHOOT_SPECIAL), Global.app.playSound("dko_snd_kick_shoot_sp"), this.team.doSuperShoot(), a = this.getGoalSuperShoot(), this.m_ballon.applyForce(!1, PlayerManager.SUPERSHOOT_FORCE_MAX, a, !0), this.m_ballon.onSuperShoot(),
            null !== this.m_clipSelected && (this.m_canvas.removeChild(this.m_clipSelected.sprite), this.m_clipSelected = null, this.m_clipSelected = Application.instance.getClip("mcSelected"), this.m_clipSelected.setX(this.m_x - this.m_world.camera().x()), this.m_clipSelected.setY(this.m_y - this.m_world.camera().y()), this.m_clipSelected.sprite._depth = 1E3 * this.m_y - 10, this.m_canvas.addChild(this.m_clipSelected.sprite))) : (Global.app.playSound("dko_snd_kick_shoot"), a = this.getGoalTarget(), this.m_ballon.applyForce(!0, this.m_shootVarForce,
            a, this.m_shootVarApplyElevation));
        this.m_applyForceTime = PlayerManager.APPLY_FORCE_TIME;
        this.team.enemyTeam.setReactionDelay();
        this.onGetTheBallon(!1)
    }
};
PlayerManager.prototype.onSpecialShoot = function() {
    if (this.canChangeState() && !0 != this.isWithTheBallon()) {
        this.m_displace.cancel();
        this.gotoState(PlayerManager.ST_PLAYER_BYCICLE);
        this.m_shootVarIsTap = !0;
        var a = this.getGoalTarget();
        this.m_ballon.applyForce(!0, this.specialShoot, a, !0);
        this.m_ballon.setPlayerTouch(this);
        this.m_applyForceTime = PlayerManager.APPLY_FORCE_TIME;
        Global.app.playSound("dko_snd_kick_shoot")
    }
};
PlayerManager.prototype.getGoalSuperShoot = function() {
    var a = this.m_world.limitMaxX;
    this.team.direction == Team.TEAM_RIGHT && (a = this.m_world.limitMinX);
    return Math.atan2(this.m_world.goalMinY + (this.m_world.goalMaxY - this.m_world.goalMinY) / 2 - this.m_y, a - this.m_x)
};
PlayerManager.prototype.getGoalTarget = function() {
    var a = this.m_world.limitMaxX,
        b = this.m_x + Ballon.DRIBBLE_OFFSET;
    this.team.direction == Team.TEAM_RIGHT && (a = this.m_world.limitMinX, b = this.m_x - Ballon.DRIBBLE_OFFSET);
    a = new Point(a, this.m_world.goalMinY + PlayerManager.POLE_TARGET_DELTA);
    if (!0 == this.m_shootVarIsTap || !0 == this.team.isBotTeam) {
        var c = this.team.enemyTeam.findPlayerByType(PlayerManager.TYPE_GOALKEEPER);
        Math.abs(c.y() - this.m_world.goalMaxY) > Math.abs(c.y() - this.m_world.goalMinY) && (a.y = this.m_world.goalMaxY -
            PlayerManager.POLE_TARGET_DELTA)
    }!1 == this.m_shootVarIsTap && (c = this.calculatePoint(), a.y = c, c > this.m_world.goalMinY - this.m_shootOutGapFix && c < this.m_world.goalMinY && (a.y = this.m_world.goalMinY + PlayerManager.POLE_TARGET_DELTA), c > this.m_world.goalMaxY && c < this.m_world.goalMaxY + this.m_shootOutGapFix && (a.y = this.m_world.goalMaxY - PlayerManager.POLE_TARGET_DELTA));
    c = Common.random(-this.shootEffectiveness, this.shootEffectiveness) * (Math.PI / 180);
    return Math.atan2(a.y - this.m_y, a.x - b) + c
};
PlayerManager.prototype.calculatePoint = function() {
    var a = -1 * Math.tan(this.m_displace.angle),
        b = -1 * Math.tan(this.m_displace.angle) * this.m_ballon.x() + this.m_ballon.y(),
        c = this.m_world.limitMinX;
    this.team.direction == Team.TEAM_LEFT && (c = this.m_world.limitMaxX);
    return -a * c + b
};
PlayerManager.prototype.onSweep = function(a) {
    if (this.canChangeState() && !0 != this.m_onAfterSweep && this.m_state != PlayerManager.ST_PLAYER_SWEEP && !0 != this.m_ballon.onElevation() && (a = "undefined" === typeof a ? 1 : a, null === this.m_ballon.player || this.m_ballon.player.state() !== PlayerManager.ST_PLAYER_SWEEP)) {
        this.gotoState(PlayerManager.ST_PLAYER_SWEEP);
        this.setFlipX(!1);
        !0 == this.m_displace.toLeft() && this.setFlipX(!0);
        var b = this.m_displace.angle,
            c = 0,
            d = 0,
            e = 0,
            d = e = c = d = 0,
            d = 180 / Math.PI * this.m_displace.angle % 360;
        0 > d &&
            (d += 360);
        c = this.m_activeIA.sweepEffectiveSearchAngle();
        e = d - c;
        d += c;
        c = Math.atan2(this.m_world.ballon.y() - this.m_y, this.m_world.ballon.x() - this.m_x) * (180 / Math.PI) % 360;
        0 > c && (c += 360);
        0 > e * d && 180 < c && (c = 360 - c);
        c > e && c < d && (e = this.m_world.ballon.x() - this.m_x, d = this.m_world.ballon.y() - this.m_y, 400 > Math.sqrt(e * e + d * d) && (b = Math.PI / 180 * c));
        this.m_displace.gotoDirection(this.sweepDistance, b, this.sweepSpeed * a);
        this.team.onSweep(this);
        null !== this.m_clipTargetPos && (this.m_canvas.removeChild(this.m_clipTargetPos.sprite),
            this.m_clipTargetPos = null);
        Global.app.playSound("dko_snd_tackle")
    }
};
PlayerManager.prototype.onHit = function() {
    this.m_activeIA.onHit();
    this.m_displace.cancel();
    this.gotoState(PlayerManager.ST_PLAYER_HIT)
};
PlayerManager.prototype.canChangeState = function() {
    return this.m_state == PlayerManager.ST_PLAYER_STAND || this.m_state == PlayerManager.ST_PLAYER_WALK || this.m_state == PlayerManager.ST_PLAYER_THROWIN_UP_STAND || this.m_state == PlayerManager.ST_PLAYER_THROWIN_DOWN_STAND || this.m_state == PlayerManager.ST_PLAYER_CORNER_UP_STAND || this.m_state == PlayerManager.ST_PLAYER_CORNER_DOWN_STAND || this.m_state == PlayerManager.ST_PLAYER_WALK_SPEED || this.m_state == PlayerManager.ST_STAND_GK_CATCH ? !0 : !1
};
PlayerManager.prototype.onCelebrateGoal = function() {
    this.focus(!1);
    this.gotoState(PlayerManager.ST_PLAYER_WIN);
    this.m_onCelebrate = !0
};
PlayerManager.prototype.onReceiveGoal = function() {
    this.focus(!1);
    this.gotoState(PlayerManager.ST_PLAYER_LOSE)
};
PlayerManager.prototype.initActiveZone = function() {
    var a = this.m_world.limitMinX + (this.m_world.limitMaxX - this.m_world.limitMinX) / 2;
    switch (this.type) {
        case PlayerManager.TYPE_GOALKEEPER:
            this.zoneInit = this.m_world.limitMinX;
            this.zoneEnd = this.m_world.limitMinX + Team.COVER_AREA_WIDTH;
            break;
        case PlayerManager.TYPE_DEFENDER:
            this.zoneInit = this.m_world.limitMinX;
            this.zoneEnd = this.m_world.limitMinX + Team.COVER_AREA_WIDTH;
            break;
        case PlayerManager.TYPE_MIDDLER:
            this.zoneInit = a - Team.COVER_AREA_WIDTH * PlayerManager.FACTOR_ADJUST_AREA_MIDDLER;
            this.zoneEnd = a + Team.COVER_AREA_WIDTH * PlayerManager.FACTOR_ADJUST_AREA_MIDDLER;
            break;
        case PlayerManager.TYPE_STRIKER:
            this.zoneInit = this.m_world.limitMaxX - Team.COVER_AREA_WIDTH, this.zoneEnd = this.m_world.limitMaxX
    }
    if (this.team.direction == Team.TEAM_RIGHT) switch (this.type) {
        case PlayerManager.TYPE_GOALKEEPER:
            this.zoneInit = this.m_world.limitMaxX - Team.COVER_AREA_WIDTH;
            this.zoneEnd = this.m_world.limitMaxX;
            break;
        case PlayerManager.TYPE_DEFENDER:
            this.zoneInit = this.m_world.limitMaxX - Team.COVER_AREA_WIDTH;
            this.zoneEnd =
                this.m_world.limitMaxX;
            break;
        case PlayerManager.TYPE_MIDDLER:
            this.zoneInit = a - Team.COVER_AREA_WIDTH * PlayerManager.FACTOR_ADJUST_AREA_MIDDLER;
            this.zoneEnd = a + Team.COVER_AREA_WIDTH * PlayerManager.FACTOR_ADJUST_AREA_MIDDLER;
            break;
        case PlayerManager.TYPE_STRIKER:
            this.zoneInit = this.m_world.limitMinX, this.zoneEnd = this.m_world.limitMinX + Team.COVER_AREA_WIDTH
    }
};
PlayerManager.ST_PLAYER_STAND = "st200";
PlayerManager.ST_PLAYER_WALK = "st201";
PlayerManager.ST_PLAYER_SHOOT = "st202";
PlayerManager.ST_PLAYER_BYCICLE = "st203";
PlayerManager.ST_PLAYER_SWEEP = "st204";
PlayerManager.ST_PLAYER_HIT = "st205";
PlayerManager.ST_PLAYER_WIN = "st206";
PlayerManager.ST_PLAYER_LOSE = "st207";
PlayerManager.ST_PLAYER_CATCH = "st208";
PlayerManager.ST_PLAYER_JUMP = "st209";
PlayerManager.ST_PLAYER_FLY_UP = "st210";
PlayerManager.ST_PLAYER_FLY_DOWN = "st211";
PlayerManager.ST_THROWIN_UP = "st212";
PlayerManager.ST_THROWIN_DOWN = "st213";
PlayerManager.ST_CORNER_UP = "st214";
PlayerManager.ST_CORNER_DOWN = "st215";
PlayerManager.ST_CHARGE_KICK = "st216";
PlayerManager.ST_STAND_GK_CATCH = "st217";
PlayerManager.ST_SHOOT_SPECIAL = "st218";
PlayerManager.ST_PLAYER_WALK_HAPPY = "st219";
PlayerManager.ST_PLAYER_WIN2 = "st220";
PlayerManager.ST_PLAYER_LOSE2 = "st221";
PlayerManager.ST_PLAYER_WALK_SPEED = "st222";
PlayerManager.ST_PLAYER_CHARGE_SUPER = "st223";
PlayerManager.ST_PLAYER_THROWIN_UP_STAND = "st224";
PlayerManager.ST_PLAYER_THROWIN_DOWN_STAND = "st225";
PlayerManager.ST_PLAYER_CORNER_UP_STAND = "st226";
PlayerManager.ST_PLAYER_CORNER_DOWN_STAND = "st227";
PlayerManager.ST_PLAYER_WALK_BACK = "st228";
PlayerManager.ST_PLAYER_CENTER = "st229";
PlayerManager.ST_THROWIN_GO = 1;
PlayerManager.ST_THROWIN_WAIT = 2;
PlayerManager.ST_CORNER_GO = 1;
PlayerManager.ST_CORNER_WAIT = 2;
PlayerManager.TYPE_GOALKEEPER = 0;
PlayerManager.TYPE_DEFENDER = 1;
PlayerManager.TYPE_MIDDLER = 2;
PlayerManager.TYPE_STRIKER = 3;
PlayerManager.THROW_IN_HEIGHT = -40;
PlayerManager.INSIDE_FIELD_GAP = 10;
PlayerManager.ADJUST_TAP_SHOOT = 0.3;
PlayerManager.AFTER_SWEEP_TIME = 100;
PlayerManager.PASS_SEARCH_ANGLE = 20;
PlayerManager.AFTER_SHOOT_NOMOVE_TIME = 1E3;
PlayerManager.DISTANCE_SHOOT = 350;
PlayerManager.SAME_X_DELTA = 5;
PlayerManager.SUPERSHOOT_FORCE = 1300;
PlayerManager.SUPERSHOOT_FORCE_MAX = 1600;
PlayerManager.POLE_TARGET_DELTA = 30;
PlayerManager.DISTANCE_NEAR = 5;
PlayerManager.GOALKEEPER_TIME = 1500;
PlayerManager.FORCE_PASS_TIME = 2E3;
PlayerManager.DISTANCE_FAST_SHOOT_X = 60;
PlayerManager.DISTANCE_FAST_SHOOT_Y = 50;
PlayerManager.ON_CENTER_GAP = 80;
PlayerManager.APPLY_FORCE_TIME = 400;
PlayerManager.FACTOR_ADJUST_AREA_MIDDLER = 0.35;
PlayerManager.SELECT_AXIS_X = 25;
PlayerManager.SELECT_AXIS_Y = 10;
PlayerManager.OUT_FIELD_GAP = 10;
PlayerManager.HALF_TIME_STAND = 1500;

function SoccerIA(a, b) {
    IABase.call(this, a, b);
    this.m_timeWaitPass = 1700;
    this.m_distanceWaitPass = 50;
    this.m_speedInstantReactThreshold = 450;
    this.m_timeWaitReact = 1E3;
    this.m_distanceApplyTackle = 140;
    this.m_tryToShootGap = 225;
    this.m_timeDribble = 2500;
    this.m_rivalMinDistance = 60;
    this.m_waitTimeToCover = 500;
    this.m_waitTimeToSweep = 1800;
    this.m_sideDribble = 0;
    this.m_passEffectiveSearchAngle = 45;
    this.m_sweepEffectiveSearchAngle = 85;
    this.m_supportCoverDistance = 250;
    this.m_canIABycicleKick = !1;
    this.m_zoneInitOrg = this.m_player.zoneInit;
    this.m_zoneEndOrg = this.m_player.zoneEnd;
    this.m_zoneInit = this.m_zoneInitOrg;
    this.m_zoneEnd = this.m_zoneEndOrg;
    this.m_coverPointX = this.m_player.coverBaseX;
    this.m_coverPointY = this.m_player.coverBaseY;
    this.m_direction = this.m_player.team.direction;
    this.m_nearRival = null;
    this.m_state = this.m_timeToSweepCurrent = this.m_timeToCoverCurrent = this.m_timeWaitPassCurrent = 0;
    this.m_waitingPass = !1;
    this.m_timeToReact = 0;
    this.m_canReact = !0;
    this.m_playerSupport = null;
    this.m_needToCenter = !1;
    this.m_dribblingOrientation = this.m_chaseBalloonCooldownTime =
        this.m_supportDefenseCooldownTime = this.m_timeDribbleCurrent = 0;
    this.m_onCornerKick = this.m_onThrowIn = !1;
    this.m_throwInTime = 0;
    this.m_targetGoalX = this.m_world.limitMaxX;
    this.m_direction == Team.TEAM_RIGHT && (this.m_targetGoalX = this.m_world.limitMinX)
}
goog.inherits(SoccerIA, IABase);
SoccerIA.prototype.setDelaySweep = function() {
    this.m_timeToSweepCurrent = 0
};
SoccerIA.prototype.onHit = function() {
    this.m_timeToSweepCurrent = 0
};
SoccerIA.prototype.onThrowIn = function(a, b, c) {
    this.repositionThrowIn();
    this.m_onThrowIn = !0
};
SoccerIA.prototype.onCornerKick = function(a, b) {
    this.repositionCorner();
    this.m_onCornerKick = !0
};
SoccerIA.prototype.onThrowInEnd = function() {
    this.m_player.cancelDisplace();
    this.m_onThrowIn = !1
};
SoccerIA.prototype.onCornerKickEnd = function() {
    this.m_player.cancelDisplace();
    this.m_onCornerKick = !1
};
SoccerIA.prototype.repositionThrowIn = function() {
    if (this.m_player.type == PlayerManager.TYPE_STRIKER) {
        this.m_throwInTime = PlayerManager.FORCE_PASS_TIME;
        var a = this.m_ballon.x() + Common.random(-SoccerIA.REPOSITION_MAX, SoccerIA.REPOSITION_MAX);
        a < this.m_world.limitMinX && (a = this.m_world.limitMinX + SoccerIA.BORDER_SAFE);
        a > this.m_world.limitMaxX && (a = this.m_world.limitMaxX - SoccerIA.BORDER_SAFE);
        var b = this.m_world.limitMinY + SoccerIA.REPOSITION_OFFSET;
        Math.abs(this.m_ballon.y() - this.m_world.limitMaxY) < SoccerIA.DISTANCE_NEAR_X &&
            (b = this.m_world.limitMaxY - SoccerIA.REPOSITION_OFFSET);
        b += Common.random(-SoccerIA.REPOSITION_MAX, SoccerIA.REPOSITION_MAX);
        this.m_player.gotoPosition(a, b)
    } else this.m_player.gotoPosition(this.m_coverPointX, this.m_coverPointY)
};
SoccerIA.prototype.repositionCorner = function() {
    this.m_throwInTime = PlayerManager.FORCE_PASS_TIME;
    var a = SoccerIA.POINT_GOAL_LEFT;
    Math.abs(this.m_ballon.x() - this.m_world.limitMaxX) < SoccerIA.DISTANCE_NEAR_X && (a = SoccerIA.POINT_GOAL_RIGHT);
    var b = a.x + Common.random(-SoccerIA.REPOSITION_MAX, SoccerIA.REPOSITION_MAX),
        a = a.y + Common.random(-SoccerIA.REPOSITION_MAX, SoccerIA.REPOSITION_MAX);
    this.m_ballon.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (a += SoccerIA.REPOSITION_OFFSET_CORNER);
    this.m_ballon.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL &&
        (a -= SoccerIA.REPOSITION_OFFSET_CORNER);
    this.m_player.gotoPosition(b, a)
};
SoccerIA.prototype.canReact = function() {
    return this.m_canReact
};
SoccerIA.prototype.passEffectiveSearchAngle = function() {
    return this.m_passEffectiveSearchAngle
};
SoccerIA.prototype.sweepEffectiveSearchAngle = function() {
    return this.m_sweepEffectiveSearchAngle
};
SoccerIA.prototype.zoneInit = function() {
    return this.m_zoneInitOrg
};
SoccerIA.prototype.zoneEnd = function() {
    return this.m_zoneEndOrg
};
SoccerIA.prototype.setZoneInit = function(a) {
    SoccerIA.superClass_.setZoneInit.call(this, a);
    this.m_zoneInit = a
};
SoccerIA.prototype.setZoneEnd = function(a) {
    SoccerIA.superClass_.setZoneEnd.call(this, a);
    this.m_zoneEnd = a
};
SoccerIA.prototype.setCoverPointX = function(a) {
    SoccerIA.superClass_.setCoverPointX.call(this, a);
    this.m_coverPointX = a
};
SoccerIA.prototype.setCoverPointY = function(a) {
    SoccerIA.superClass_.setCoverPointY.call(this, a);
    this.m_coverPointY = a
};
SoccerIA.prototype.onGetTheBallon = function(a) {
    SoccerIA.superClass_.onGetTheBallon.call(this, a)
};
SoccerIA.prototype.setWaitingPass = function(a) {
    SoccerIA.superClass_.setWaitingPass.call(this, a)
};
SoccerIA.prototype.setDifficulty = function(a) {
    SoccerIA.superClass_.setDifficulty.call(this, a);
    var b = Application.config.AIParameters;
    this.m_timeWaitPass = b[a].timeWaitPass;
    this.m_distanceWaitPass = b[a].distanceWaitPass;
    this.m_speedInstantReactThreshold = b[a].speedInstantReactThreshold;
    this.m_timeWaitReact = b[a].timeWaitReact;
    this.m_distanceApplyTackle = b[a].distanceApplyTackle;
    this.m_tryToShootGap = b[a].tryToShootGap;
    this.m_timeDribbleCurrent = this.m_timeDribble = b[a].timeDribble;
    this.m_rivalMinDistance = b[a].rivalMinDistance;
    this.m_waitTimeToCover = b[a].waitTimeToCover;
    this.m_waitTimeToSweep = b[a].waitTimeToSweep;
    this.m_sideDribble = b[a].sideDribble;
    this.m_passEffectiveSearchAngle = b[a].passEffectiveSearchAngle;
    this.m_sweepEffectiveSearchAngle = b[a].sweepEffectiveSearchAngle;
    this.m_supportCoverDistance = b[a].supportCoverDistance;
    this.m_canIABycicleKick = 1 == b[a].canIABycicleKick
};
SoccerIA.prototype.update = function(a) {
    SoccerIA.superClass_.update.call(this, a);
    !1 != this.m_player.canChangeState() && (this.m_timeToCoverCurrent += a, this.m_timeToSweepCurrent += a, this.m_supportCooldownTime -= a, this.m_supportDefenseCooldownTime -= a, this.m_chaseBalloonCooldownTime -= a, !0 == this.m_waitingPass && (this.m_timeWaitPassCurrent -= a, 0 > this.m_timeWaitPassCurrent && (this.m_waitingPass = !1)), !1 == this.m_canReact && (this.m_timeToReact -= a, 0 > this.m_timeToReact && (this.m_canReact = !0)), !0 == this.m_player.isWithTheBallon() ?
        this.actionWithBallon(a) : this.actionWithoutBallon(a), this.m_player.x() <= this.m_world.limitMinX && !0 == this.m_team.isBotTeam && !0 == this.m_player.isWithTheBallon() && (this.m_direction = Team.TEAM_RIGHT))
};
SoccerIA.prototype.actionWithBallon = function(a) {
    if (!0 == this.m_needToCenter) this.m_player.gotoPosition(this.m_playerSupport.x(), this.m_player.y()), Math.abs(this.m_player.x() - this.m_playerSupport.x()) < SoccerIA.DISTANCE_NEAR_X && (this.m_player.gotoPosition(this.m_player.x(), this.m_player.y() + 10), this.m_playerSupport.y() < this.m_player.y() && this.m_player.gotoPosition(this.m_player.x(), this.m_player.y() - 10), this.m_player.onPass()), this.m_state = SoccerIA.ST_AI_CENTER;
    else {
        var b = new Point;
        b.x = this.m_player.x() +
            45 * this.m_direction;
        b.y = this.m_player.y();
        var c = !1;
        null === this.m_nearRival && (this.m_nearRival = this.m_team.findNearRival(this.m_player), c = !0);
        var d = this.m_player.x() - this.m_nearRival.x(),
            e = this.m_player.y() - this.m_nearRival.y();
        Math.sqrt(d * d + e * e) > this.m_rivalMinDistance && (this.m_nearRival = null);
        null !== this.m_nearRival ? (!0 == c && (this.m_dribblingOrientation = Common.random(0, 1), 0 == this.m_dribblingOrientation && (this.m_dribblingOrientation = -1)), this.m_player.y() < this.m_world.limitMinY + SoccerIA.BORDER_SAFE &&
            (this.m_dribblingOrientation = 1), this.m_player.y() > this.m_world.limitMaxY - SoccerIA.BORDER_SAFE && (this.m_dribblingOrientation = -1)) : this.m_dribblingOrientation = 0;
        b.y += this.m_dribblingOrientation * this.m_sideDribble;
        this.m_player.gotoPosition(b.x, b.y);
        this.m_state = SoccerIA.ST_AI_DRIBBLE;
        this.m_timeDribbleCurrent -= a;
        if (0 > this.m_timeDribbleCurrent && (this.m_timeDribbleCurrent = this.m_timeDribble, !0 == this.onPass())) return;
        Math.abs(this.m_player.x() - this.m_targetGoalX) < SoccerIA.NEAR_RIVAL_AREA && (1 < Common.random(0,
            2) || !(this.m_player.y() < this.m_world.goalMinY && this.m_world.goalMaxY - this.m_player.y() > this.m_tryToShootGap || this.m_player.y() > this.m_world.goalMaxY && this.m_player.y() - this.m_world.goalMaxY > this.m_tryToShootGap) ? (a = 10 * this.m_team.direction, this.m_player.y() > this.m_world.goalMinY && this.m_player.y() < this.m_world.goalMaxY && (this.m_player.gotoPosition(this.m_player.x() + this.m_direction, this.m_player.y()), this.m_player.onShootToGoal()), b = this.m_player.y() - Math.abs(this.m_targetGoalX - this.m_player.x()),
            b > this.m_world.goalMinY && b < this.m_world.goalMaxY && (this.m_player.gotoPosition(this.m_player.x() + a, this.m_player.y() - a), this.m_player.onShootToGoal()), b = this.m_player.y() + Math.abs(this.m_targetGoalX - this.m_player.x()), b > this.m_world.goalMinY && b < this.m_world.goalMaxY && (this.m_player.gotoPosition(this.m_player.x() + a, this.m_player.y() + a), this.m_player.onShootToGoal())) : (this.m_playerSupport = this.m_team.findNearPlayer(this.m_player), this.m_needToCenter = !0))
    }
};
SoccerIA.prototype.actionWithoutBallon = function(a) {
    var b = 0,
        c = 0;
    if (!0 == this.m_onThrowIn) this.m_throwInTime -= a, 0 > this.m_throwInTime && this.repositionThrowIn();
    else if (!0 == this.m_onCornerKick) this.m_throwInTime -= a, 0 > this.m_throwInTime && this.repositionCorner();
    else if (!0 == this.m_waitingPass) b = this.m_ballon.x() - this.m_player.x(), c = this.m_ballon.y() - this.m_player.y(), Math.sqrt(b * b + c * c) < this.m_distanceWaitPass && (!0 == this.m_team.isBotTeam ? !0 == this.m_ballon.onElevation() && b < SoccerIA.SPECIAL_SHOOT_DELTA && c <
        SoccerIA.SPECIAL_SHOOT_DELTA && (this.m_player.gotoPosition(this.m_player.x() + 10 * this.m_team.direction, this.m_player.y()), this.m_player.onSpecialShoot()) : this.m_team.selectedPlayer(this.m_team.findPlayerNearTheBall()), this.m_waitingPass = !1), this.m_state = SoccerIA.ST_AI_WAIT_PASS;
    else if (this.m_ballon.x() > this.m_zoneInit && this.m_ballon.x() < this.m_zoneEnd) {
        if (!1 != this.m_canReact)
            if (null === this.m_ballon.player) 0 > this.m_chaseBalloonCooldownTime && (this.m_chaseBalloonCooldownTime = SoccerIA.SUPPORT_COOLDOWN_TIME,
                this.m_player.gotoPosition(this.m_ballon.x(), this.m_ballon.y())), this.m_state = SoccerIA.ST_AI_CHASE_BALLON;
            else if (a = this.m_ballon.player, a.type != PlayerManager.TYPE_GOALKEEPER)
            if (a.team.name == this.m_team.name) this.gotoSupportAttackPosition();
            else if (b = new Point, this.m_team.findPlayerNearTheBall().uid == this.m_player.uid) {
            if (this.m_state = SoccerIA.ST_AI_DEFEND, this.m_timeToCoverCurrent >= this.m_waitTimeToCover && (this.m_timeToCoverCurrent = 0, b = this.pointCoverOpponent(a, SoccerIA.DISTANCE_COVER), this.m_player.gotoPosition(b.x,
                b.y)), this.m_timeToSweepCurrent >= this.m_waitTimeToSweep && (this.m_timeToSweepCurrent = 0, b = this.m_world.ballon.x() - this.m_player.x(), c = this.m_world.ballon.x() - this.m_player.x(), Math.sqrt(b * b + c * c) <= this.m_distanceApplyTackle && (this.m_player.gotoPosition(this.m_ballon.x(), this.m_ballon.y()), !0 == this.m_team.isBotTeam))) this.m_player.onSweep()
        } else a = this.m_team.findNearRival(this.m_player, this.m_ballon.player), a.x() > this.m_zoneInit && a.x() < this.m_zoneEnd ? (0 > this.m_supportDefenseCooldownTime && (this.m_supportDefenseCooldownTime =
            SoccerIA.SUPPORT_COOLDOWN_TIME, b = this.pointCoverOpponent(a, SoccerIA.DISTANCE_COVER_SUPPORT), this.m_player.gotoPosition(b.x, b.y)), this.m_state = SoccerIA.ST_AI_SUPPORT_DEFENSE) : (this.m_player.gotoPosition(this.m_coverPointX, this.m_coverPointY), this.m_state = SoccerIA.ST_AI_RETURN_ZONE);
        else a.team.name != this.m_team.name ? this.m_player.gotoPosition(this.m_coverPointX + -240 * this.m_team.direction, this.m_coverPointY) : this.m_player.gotoPosition(this.m_coverPointX + 240 * this.m_team.direction, this.m_coverPointY)
    } else null ==
        this.m_ballon.player && this.m_ballon.x() > this.m_zoneInitOrg && this.m_ballon.x() < this.m_zoneEndOrg && (this.m_zoneInit = this.m_zoneInitOrg, this.m_zoneEnd = this.m_zoneEndOrg), null !== this.m_ballon.player && this.m_ballon.player.team.name == this.m_team.name && this.m_player.type == PlayerManager.TYPE_DEFENDER && (0 > this.m_supportDefenseCooldownTime && (this.m_supportDefenseCooldownTime = SoccerIA.SUPPORT_COOLDOWN_TIME, this.m_coverPointY = this.m_world.camera().y() + this.m_world.camera().height / 2), this.m_player.gotoPosition(this.m_coverPointX,
            this.m_coverPointY), this.m_state = SoccerIA.ST_AI_RETURN_ZONE), null !== this.m_ballon.player && this.m_ballon.player.team.name == this.m_team.name && this.m_player.type == PlayerManager.TYPE_MIDDLER && (0 > this.m_supportDefenseCooldownTime && (this.m_supportDefenseCooldownTime = SoccerIA.SUPPORT_COOLDOWN_TIME, this.m_coverPointY = this.m_world.camera().y() + this.m_world.camera().height / 2), this.m_player.gotoPosition(this.m_coverPointX, this.m_coverPointY), this.m_state = SoccerIA.ST_AI_RETURN_ZONE), this.m_player.gotoPosition(this.m_coverPointX,
            this.m_coverPointY)
};
SoccerIA.prototype.gotoSupportAttackPosition = function() {
    var a = this.m_ballon.player;
    this.m_state = SoccerIA.ST_AI_SUPPORT_ATTACK;
    if (!(0 < this.m_supportCooldownTime)) {
        this.m_supportCooldownTime = SoccerIA.SUPPORT_COOLDOWN_TIME;
        var b = new Point,
            c = 0;
        this.m_team.direction == Team.TEAM_LEFT && (a.type == PlayerManager.TYPE_DEFENDER && (this.m_player.type == PlayerManager.TYPE_MIDDLER && 1 == this.m_player.typeIndex && (a.y() < SoccerIA.SUPPORT_MARKER_UP_HORIZONTAL && (c = 355 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_UP_HORIZONTAL && a.y() <
            SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 315 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && a.y() < SoccerIA.SUPPORT_MARKER_DOWN_HORIZONTAL && (c = 25 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_DOWN_HORIZONTAL && (c = 350 * Math.PI / 180)), this.m_player.type == PlayerManager.TYPE_MIDDLER && 2 == this.m_player.typeIndex && (c = a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL ? 105 * Math.PI / 180 : 255 * Math.PI / 180), this.m_player.type == PlayerManager.TYPE_STRIKER && (a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 55 * Math.PI /
            180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 315 * Math.PI / 180), a.y() < this.m_world.limitMinY + PlayerManager.ON_CENTER_GAP && (c = 95 * Math.PI / 180), a.y() > this.m_world.limitMaxY - PlayerManager.ON_CENTER_GAP && (c = 275 * Math.PI / 180))), a.type == PlayerManager.TYPE_MIDDLER && (this.m_player.type == PlayerManager.TYPE_DEFENDER && (c = a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL ? 225 * Math.PI / 180 : 135 * Math.PI / 180), this.m_player.type == PlayerManager.TYPE_MIDDLER && (a.y() < SoccerIA.SUPPORT_MARKER_UP_HORIZONTAL && (c = 10 * Math.PI /
            180), a.y() > SoccerIA.SUPPORT_MARKER_UP_HORIZONTAL && a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 25 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && a.y() < SoccerIA.SUPPORT_MARKER_DOWN_HORIZONTAL && (c = 335 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_DOWN_HORIZONTAL && (c = 350 * Math.PI / 180)), this.m_player.type == PlayerManager.TYPE_STRIKER && (a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 55 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 315 * Math.PI / 180), Math.abs(a.x() - this.m_targetGoalX) <
            SoccerIA.NEAR_GOAL_DISTANCE && (a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 125 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 225 * Math.PI / 180)), a.y() < this.m_world.limitMinY + PlayerManager.ON_CENTER_GAP && (c = 95 * Math.PI / 180), a.y() > this.m_world.limitMaxY - PlayerManager.ON_CENTER_GAP && (c = 275 * Math.PI / 180))), a.type == PlayerManager.TYPE_STRIKER && (a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 135 * Math.PI / 180), this.m_player.type == PlayerManager.TYPE_DEFENDER && a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL &&
            (c = 225 * Math.PI / 180), this.m_player.type == PlayerManager.TYPE_MIDDLER && 1 == this.m_player.typeIndex && (a.y() < SoccerIA.SUPPORT_MARKER_UP_HORIZONTAL && (c = 10 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_UP_HORIZONTAL && a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 25 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && a.y() < SoccerIA.SUPPORT_MARKER_DOWN_HORIZONTAL && (c = 335 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_DOWN_HORIZONTAL && (c = 350 * Math.PI / 180)), this.m_player.type == PlayerManager.TYPE_MIDDLER && 2 ==
            this.m_player.typeIndex && (a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 55 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 315 * Math.PI / 180), Math.abs(a.x() - this.m_targetGoalX) < SoccerIA.NEAR_GOAL_DISTANCE && (a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 125 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 225 * Math.PI / 180)), a.y() < this.m_world.limitMinY + PlayerManager.ON_CENTER_GAP && (c = 95 * Math.PI / 180), a.y() > this.m_world.limitMaxY - PlayerManager.ON_CENTER_GAP && (c = 275 * Math.PI /
                180))));
        this.m_team.direction == Team.TEAM_RIGHT && (a.type == PlayerManager.TYPE_DEFENDER && (this.m_player.type == PlayerManager.TYPE_MIDDLER && 1 == this.m_player.typeIndex && (a.y() < SoccerIA.SUPPORT_MARKER_UP_HORIZONTAL && (c = 185 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_UP_HORIZONTAL && a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 225 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && a.y() < SoccerIA.SUPPORT_MARKER_DOWN_HORIZONTAL && (c = 155 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_DOWN_HORIZONTAL && (c =
            190 * Math.PI / 180)), this.m_player.type == PlayerManager.TYPE_MIDDLER && 2 == this.m_player.typeIndex && (c = a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL ? 75 * Math.PI / 180 : 285 * Math.PI / 180), this.m_player.type == PlayerManager.TYPE_STRIKER && (a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 125 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 225 * Math.PI / 180), a.y() < this.m_world.limitMinY + PlayerManager.ON_CENTER_GAP && (c = 85 * Math.PI / 180), a.y() > this.m_world.limitMaxY - PlayerManager.ON_CENTER_GAP && (c = 265 * Math.PI /
            180))), a.type == PlayerManager.TYPE_MIDDLER && (this.m_player.type == PlayerManager.TYPE_DEFENDER && (c = a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL ? 315 * Math.PI / 180 : 45 * Math.PI / 180), this.m_player.type == PlayerManager.TYPE_MIDDLER && (a.y() < SoccerIA.SUPPORT_MARKER_UP_HORIZONTAL && (c = 170 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_UP_HORIZONTAL && a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 155 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && a.y() < SoccerIA.SUPPORT_MARKER_DOWN_HORIZONTAL && (c = 205 * Math.PI /
            180), a.y() > SoccerIA.SUPPORT_MARKER_DOWN_HORIZONTAL && (c = 190 * Math.PI / 180)), this.m_player.type == PlayerManager.TYPE_STRIKER && (a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 125 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 225 * Math.PI / 180), Math.abs(a.x() - this.m_targetGoalX) < SoccerIA.NEAR_GOAL_DISTANCE && (a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 55 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 315 * Math.PI / 180)), a.y() < this.m_world.limitMinY + PlayerManager.ON_CENTER_GAP &&
            (c = 85 * Math.PI / 180), a.y() > this.m_world.limitMaxY - PlayerManager.ON_CENTER_GAP && (c = 265 * Math.PI / 180))), a.type == PlayerManager.TYPE_STRIKER && (a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 45 * Math.PI / 180), this.m_player.type == PlayerManager.TYPE_DEFENDER && a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 315 * Math.PI / 180), this.m_player.type == PlayerManager.TYPE_MIDDLER && 1 == this.m_player.typeIndex && (a.y() < SoccerIA.SUPPORT_MARKER_UP_HORIZONTAL && (c = 170 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_UP_HORIZONTAL &&
            a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 155 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && a.y() < SoccerIA.SUPPORT_MARKER_DOWN_HORIZONTAL && (c = 205 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_DOWN_HORIZONTAL && (c = 190 * Math.PI / 180)), this.m_player.type == PlayerManager.TYPE_MIDDLER && 2 == this.m_player.typeIndex && (a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 125 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 225 * Math.PI / 180), Math.abs(a.x() - this.m_targetGoalX) < SoccerIA.NEAR_GOAL_DISTANCE &&
            (a.y() < SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 55 * Math.PI / 180), a.y() > SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL && (c = 315 * Math.PI / 180)), a.y() < this.m_world.limitMinY + PlayerManager.ON_CENTER_GAP && (c = 85 * Math.PI / 180), a.y() > this.m_world.limitMaxY - PlayerManager.ON_CENTER_GAP && (c = 265 * Math.PI / 180))));
        b.x = a.x() + Math.cos(c) * this.m_supportCoverDistance;
        b.y = a.y() + Math.sin(c) * this.m_supportCoverDistance;
        b.y < this.m_world.limitMinY + SoccerIA.BORDER_SAFE && (b.y = this.m_world.limitMinY + SoccerIA.BORDER_SAFE);
        b.y > this.m_world.limitMaxY -
            SoccerIA.BORDER_SAFE && (b.y = this.m_world.limitMinY - SoccerIA.BORDER_SAFE);
        this.m_player.gotoPosition(b.x, b.y)
    }
};
SoccerIA.prototype.setWaitingPass = function(a) {
    this.m_waitingPass = a;
    !0 == this.m_waitingPass && (this.m_player.cancelDisplace(), this.m_timeWaitPassCurrent = this.m_timeWaitPass, this.m_canReact = !0)
};
SoccerIA.prototype.setReactionDelay = function() {
    this.m_ballon.speed() >= this.m_speedInstantReactThreshold && (this.m_timeToReact = this.m_timeWaitReact, this.m_canReact = !1)
};
SoccerIA.prototype.ballInZone = function() {
    return this.m_ballon.x() > this.m_zoneInit && this.m_ballon.x() < this.m_zoneEnd ? !0 : !1
};
SoccerIA.prototype.onLoseTheBallon = function() {
    this.m_direction = this.m_team.direction;
    this.m_needToCenter = !1;
    this.m_nearRival = null
};
SoccerIA.prototype.resetPosition = function() {
    this.m_coverPointX = this.m_player.coverBaseX;
    this.m_coverPointY = this.m_player.coverBaseY;
    this.m_zoneInit = this.m_zoneInitOrg;
    this.m_zoneEnd = this.m_zoneEndOrg;
    this.m_canReact = !0
};
SoccerIA.prototype.pointCoverOpponent = function(a, b) {
    var c = 1;
    !0 == a.flipX() && (c = -1);
    var c = a.x() - Common.random(Math.floor(0.25 * b), b) * c,
        d = a.y() + Common.random(-b, b);
    d < this.m_world.limitMinY && (d = this.m_world.limitMinY + 2 * SoccerIA.BORDER_SAFE + Common.random(-SoccerIA.BORDER_SAFE, SoccerIA.BORDER_SAFE));
    d > this.m_world.limitMaxY && (d = this.m_world.limitMaxY - 2 * SoccerIA.BORDER_SAFE + Common.random(-SoccerIA.BORDER_SAFE, SoccerIA.BORDER_SAFE));
    return new Point(c, d)
};
SoccerIA.prototype.onPass = function() {
    this.m_playerSupport = this.m_team.findNearPlayer(this.m_player);
    if (Math.abs(this.m_player.x() - this.m_playerSupport.x()) < SoccerIA.PASS_AXIS_DELTA) {
        if (this.m_playerSupport.y() < this.m_player.y()) return this.m_player.gotoPosition(this.m_player.x(), this.m_player.y() - 10), this.m_player.onPass();
        if (this.m_playerSupport.y() > this.m_player.y()) return this.m_player.gotoPosition(this.m_player.x(), this.m_player.y() + 10), this.m_player.onPass()
    }
    if (Math.abs(this.m_player.y() - this.m_playerSupport.y()) <
        SoccerIA.PASS_AXIS_DELTA) {
        if (this.m_playerSupport.x() < this.m_player.x()) return this.m_player.gotoPosition(this.m_player.x() - 10, this.m_player.y()), this.m_player.onPass();
        if (this.m_playerSupport.x() > this.m_player.x()) return this.m_player.gotoPosition(this.m_player.x() + 10, this.m_player.y()), this.m_player.onPass()
    }
    if (this.m_playerSupport.y() < this.m_player.y()) {
        if (this.m_playerSupport.x() < this.m_player.x()) return this.m_player.gotoPosition(this.m_player.x() - 10, this.m_player.y() - 10), this.m_player.onPass(), !0;
        if (this.m_playerSupport.x() > this.m_player.x()) return this.m_player.gotoPosition(this.m_player.x() + 10, this.m_player.y() - 10), this.m_player.onPass()
    }
    if (this.m_playerSupport.y() < this.m_player.y()) {
        if (this.m_playerSupport.x() < this.m_player.x()) return this.m_player.gotoPosition(this.m_player.x() - 10, this.m_player.y() + 10), this.m_player.onPass();
        if (this.m_playerSupport.x() > this.m_player.x()) return this.m_player.gotoPosition(this.m_player.x() + 10, this.m_player.y() + 10), this.m_player.onPass()
    }
    return !1
};
SoccerIA.prototype.free = function() {
    SoccerIA.superClass_.free.call(this)
};
SoccerIA.NEAR_GOAL_DISTANCE = 380;
SoccerIA.SPECIAL_SHOOT_DELTA = 5;
SoccerIA.BORDER_SAFE = 25;
SoccerIA.PASS_AXIS_DELTA = 25;
SoccerIA.DISTANCE_NEAR_X = 80;
SoccerIA.ON_CENTER_GAP = 70;
SoccerIA.SUPPORT_MARKER_MID_HORIZONTAL = 380;
SoccerIA.SUPPORT_MARKER_UP_HORIZONTAL = 290;
SoccerIA.SUPPORT_MARKER_DOWN_HORIZONTAL = 470;
SoccerIA.SUPPORT_MARKER_MID_VERTICAL = 825;
SoccerIA.SUPPORT_MARKER_FRONT_VERTICAL = 1250;
SoccerIA.SUPPORT_COOLDOWN_TIME = 500;
SoccerIA.NEAR_RIVAL_AREA = 400;
SoccerIA.DISTANCE_COVER = 50;
SoccerIA.DISTANCE_COVER_SUPPORT = 100;
SoccerIA.THROW_IN_TIME = 1E3;
SoccerIA.REPOSITION_MAX = 50;
SoccerIA.REPOSITION_OFFSET = 175;
SoccerIA.REPOSITION_OFFSET_CORNER = 100;
SoccerIA.POINT_GOAL_LEFT = new Point(220, 380);
SoccerIA.POINT_GOAL_RIGHT = new Point(1460, 380);
SoccerIA.TYPE_DEFENSE = 11;
SoccerIA.TYPE_MID = 12;
SoccerIA.TYPE_OFFENSE = 13;
SoccerIA.ST_AI_RETURN_ZONE = 1;
SoccerIA.ST_AI_CHASE_BALLON = 2;
SoccerIA.ST_AI_DEFEND = 3;
SoccerIA.ST_AI_DRIBBLE = 4;
SoccerIA.ST_AI_RECEIVE_BALL = 5;
SoccerIA.ST_AI_SUPPORT_ATTACK = 6;
SoccerIA.ST_AI_SUPPORT_DEFENSE = 7;
SoccerIA.ST_AI_WAIT_PASS = 8;
SoccerIA.ST_AI_CENTER = 9;

function Team(a, b, c) {
    this.players = [];
    this.offensePlayer = this.midPlayerDown = this.midPlayerUp = this.defensePlayer = this.goalKeeper = null;
    this.name = c;
    this.direction = b;
    this.currentPlayer = null;
    this.isBotTeam = !1;
    this.numGols = 0;
    this.enemyTeam = null;
    this.m_ballPosesion = this.iskickOffTeam = !1;
    this.m_difficultyLevel = 0;
    this.m_oldPlayer = null;
    this.m_defenseZone = -1;
    this.m_world = a;
    this.m_kickoffCount = this.m_supershootCount = 0;
    a = [];
    b = [];
    a.push(Team.POSITION_MAP_LEFT_1);
    a.push(Team.POSITION_MAP_LEFT_2);
    a.push(Team.POSITION_MAP_LEFT_4);
    a.push(Team.POSITION_MAP_LEFT_5);
    a.push(Team.POSITION_MAP_LEFT_6);
    b.push(Team.POSITION_COVER_LEFT_1);
    b.push(Team.POSITION_COVER_LEFT_2);
    b.push(Team.POSITION_COVER_LEFT_4);
    b.push(Team.POSITION_COVER_LEFT_5);
    b.push(Team.POSITION_COVER_LEFT_6);
    this.direction == Team.TEAM_RIGHT && (a = [], b = [], a.push(Team.POSITION_MAP_RIGHT_1), a.push(Team.POSITION_MAP_RIGHT_2), a.push(Team.POSITION_MAP_RIGHT_4), a.push(Team.POSITION_MAP_RIGHT_5), a.push(Team.POSITION_MAP_RIGHT_6), b.push(Team.POSITION_COVER_RIGHT_1), b.push(Team.POSITION_COVER_RIGHT_2),
        b.push(Team.POSITION_COVER_RIGHT_4), b.push(Team.POSITION_COVER_RIGHT_5), b.push(Team.POSITION_COVER_RIGHT_6));
    c = 0;
    this.direction == Team.TEAM_RIGHT && (c = Team.TOTAL_PLAYERS);
    for (var d = [], e = null, f = Application.config.teams, g = 0; g < Team.TOTAL_PLAYERS; ++g) {
        for (e = 0; e < f.length; ++e) f[e].team == this.name && f[e].idPlayer == g && (d = f[e]);
        e = this.m_world.actorManager().addPlayer(this, a[g].x, a[g].y, b[g].x, b[g].y, g + c, d);
        switch (g) {
            case 0:
                e.setPlayerType(PlayerManager.TYPE_GOALKEEPER, 1);
                this.goalKeeper = e;
                break;
            case 1:
                e.setPlayerType(PlayerManager.TYPE_DEFENDER,
                    1);
                this.defensePlayer = e;
                break;
            case 2:
                e.setPlayerType(PlayerManager.TYPE_MIDDLER, 1);
                this.midPlayerUp = e;
                break;
            case 3:
                e.setPlayerType(PlayerManager.TYPE_MIDDLER, 2);
                this.midPlayerDown = e;
                break;
            case 4:
                e.setPlayerType(PlayerManager.TYPE_STRIKER, 1), this.offensePlayer = e
        }
        this.players.push(e)
    }
    this.targetCallback = this.onEndkickOffMove = null
}
Team.prototype.onHalfTime = function() {
    for (var a = 0; a < this.players.length; ++a) this.players[a].onHalfTime()
};
Team.prototype.kickOffMove = function() {
    var a = 0;
    !1 === this.iskickOffTeam && (a = 200 * -this.direction);
    this.midPlayerUp.setPositionField(this.midPlayerUp.mapBaseX + -150 * this.direction + a, this.midPlayerUp.mapBaseY + 200);
    this.midPlayerUp.gotoPosition(this.midPlayerUp.mapBaseX + a, this.midPlayerUp.mapBaseY);
    this.midPlayerUp.setOnKickoffMove();
    this.midPlayerUp.onEndDisplaceCallback = "onPlayerEndDisplace";
    this.midPlayerUp.targetCallback = this;
    this.midPlayerDown.setPositionField(this.midPlayerDown.mapBaseX + -200 * this.direction +
        a, this.midPlayerDown.mapBaseY + 100);
    this.midPlayerDown.gotoPosition(this.midPlayerDown.mapBaseX + a, this.midPlayerDown.mapBaseY);
    this.midPlayerDown.setOnKickoffMove();
    this.midPlayerDown.onEndDisplaceCallback = "onPlayerEndDisplace";
    this.midPlayerDown.targetCallback = this;
    this.offensePlayer.setPositionField(this.offensePlayer.mapBaseX + -50 * this.direction + a, this.offensePlayer.mapBaseY + 250);
    this.offensePlayer.gotoPosition(this.offensePlayer.mapBaseX + a, this.offensePlayer.mapBaseY);
    this.offensePlayer.setOnKickoffMove();
    this.offensePlayer.onEndDisplaceCallback = "onPlayerEndDisplace";
    this.offensePlayer.targetCallback = this
};
Team.prototype.onRunToCelebrate = function() {
    this.defensePlayer.gotoPosition(700, 300);
    this.midPlayerUp.gotoPosition(720, 470);
    this.midPlayerDown.gotoPosition(950, 320);
    this.offensePlayer.gotoPosition(930, 480)
};
Team.prototype.onPlayerEndDisplace = function() {
    this.m_kickoffCount++;
    if (this.m_kickoffCount >= Team.PLAYER_KICKOFF && this.onEndkickOffMove && this.targetCallback) this.targetCallback[this.onEndkickOffMove]()
};
Team.prototype.changeStats = function(a) {
    for (var b = null, c = Application.config.teams, d = 0; d < this.players.length; ++d) {
        for (var e = 0; e < c.length; ++e) c[e].team == a && c[e].idPlayer == d && (b = c[e]);
        this.players[d].changeStats(b)
    }
};
Team.prototype.updatePlayerStats = function() {
    for (var a = 0; a < this.players.length; ++a) this.players[a].updatePlayerStats()
};
Team.prototype.onEndTapSign = function() {
    for (var a = 0; a < this.players.length; ++a) this.players[a].onEndTapSign()
};
Team.prototype.setPause = function(a) {
    for (var b = 0; b < this.players.length; ++b) this.players[b].setPause(a)
};
Team.prototype.onSweep = function(a) {
    for (var b = 0; b < this.players.length; ++b) a.uid != this.players[b].uid && this.players[b].getActiveAI().setDelaySweep()
};
Team.prototype.onThrowIn = function(a, b, c) {
    for (var d = 0; d < this.players.length; ++d) this.players[d].onThrowIn(a, b, c)
};
Team.prototype.onCornerKick = function(a, b) {
    for (var c = 0; c < this.players.length; ++c) this.players[c].onCornerKick(a, b)
};
Team.prototype.onThrowInEnd = function() {
    for (var a = 0; a < this.players.length; ++a) this.players[a].onThrowInEnd()
};
Team.prototype.onCornerKickEnd = function() {
    for (var a = 0; a < this.players.length; ++a) this.players[a].onCornerKickEnd()
};
Team.prototype.haveSuperShoot = function() {
    return this.m_supershootCount >= Team.SUPERSHOT_TOTAL
};
Team.prototype.doSuperShoot = function() {
    1 === Global.extraMickeyShot ? Global.extraMickeyShot = 0 : (this.m_supershootCount = 0, Global.mickeyShots = 0);
    HudSoccer.instance.onRefreshEars(this.m_supershootCount)
};
Team.prototype.getSuperShotPowerUp = function(a) {
    if (!0 != this.isBotTeam) {
        if (!0 == ("undefined" === typeof a ? !0 : a) && this.m_supershootCount == Team.SUPERSHOT_TOTAL - 1)
            for (Global.app.playSound("dko_snd_power_ready"), HudSoccer.instance.showFxShoot(), a = 0; a < this.players.length; ++a) this.players[a].setSuperShootFx();
        this.m_supershootCount++;
        this.m_supershootCount > Team.SUPERSHOT_TOTAL && (this.m_supershootCount = Team.SUPERSHOT_TOTAL, Global.mickeyShots = Team.SUPERSHOT_TOTAL);
        HudSoccer.instance.onRefreshEars(this.m_supershootCount)
    }
};
Team.prototype.setBallPosesion = function() {
    this.m_ballPosesion = !0;
    this.enemyTeam.m_ballPosesion = !1
};
Team.prototype.selectedPlayer = function(a) {
    if (!0 != this.isBotTeam && this.currentPlayer !== a) {
        for (var b = 0; b < this.players.length; ++b) this.players[b].focus(!1);
        this.m_oldPlayer = this.currentPlayer;
        this.currentPlayer = a;
        this.currentPlayer.focus(!0);
        this.m_world.setPlayer(this.currentPlayer)
    }
};
Team.prototype.resetPosition = function() {
    this.m_ballPosesion = !1;
    this.m_oldPlayer = this.currentPlayer = null;
    var a = 0;
    !1 === this.iskickOffTeam && (a = 200 * this.direction);
    for (var b = 0; b < this.players.length; b++) this.players[b].reset(), this.players[b].type != PlayerManager.TYPE_GOALKEEPER ? this.players[b].setPositionField(this.players[b].mapBaseX - a, this.players[b].mapBaseY) : this.players[b].setPositionField(this.players[b].mapBaseX, this.players[b].mapBaseY)
};
Team.prototype.findPlayerForPass = function(a, b, c) {
    c = "undefined" === typeof c ? -1 : c;
    for (var d = 0, e = 0, f = d = 0, g = f = 0, h = 0, k = null, d = a.getDisplace().angle * (180 / Math.PI); 0 > d;) d += 360;
    d %= 360;
    f = 45;
    f = c;
    0 > f && (f = a.getActiveAI().passEffectiveSearchAngle());
    e = d - f;
    d += f;
    for (c = 0; c < this.players.length; ++c)
        if (this.players[c].uid != a.uid && this.players[c].type != PlayerManager.TYPE_GOALKEEPER) {
            f = Math.atan2(this.players[c].y() - a.y(), this.players[c].x() - a.x()) * (180 / Math.PI);
            if (0 < e * d) {
                for (; 0 > f;) f += 360;
                f %= 360
            }
            f > e && f < d && (f = this.players[c].x() -
                a.x(), g = this.players[c].y() - a.y(), (h = Math.sqrt(f * f + g * g)) < b && (null == k ? k = this.players[c] : (f = k.x() - a.x(), g = k.y() - a.y(), h < Math.sqrt(f * f + g * g) && (k = this.players[c]))))
        }
    return k
};
Team.prototype.findPlayerNearPoint = function(a, b) {
    for (var c = 0, d = 9E3, e = null, f = c = 0, g = 0; g < this.players.length; ++g) this.players[g].type != PlayerManager.TYPE_GOALKEEPER && (c = this.players[g].x() - a, f = this.players[g].y() - b, c = Math.sqrt(c * c + f * f), c < d && (d = c, e = this.players[g]));
    return e
};
Team.prototype.findNearRival = function(a, b) {
    b = "undefined" === typeof b ? null : b;
    for (var c = this.enemyTeam.players, d = 0, e = 9E3, f = null, g = d = 0, h = 0; h < c.length; ++h) c[h].type == PlayerManager.TYPE_GOALKEEPER || null !== b && c[h].uid == b.uid || (d = c[h].x() - a.x(), g = c[h].y() - a.y(), d = Math.sqrt(d * d + g * g), d < e && (e = d, f = c[h]));
    return f
};
Team.prototype.findNearPlayer = function(a) {
    for (var b, c = 9E3, d = null, e = b = 0, f = 0; f < this.players.length; ++f) a.uid != this.players[f].uid && this.players[f].type != PlayerManager.TYPE_GOALKEEPER && (b = this.players[f].x() - a.x(), e = this.players[f].y() - a.y(), b = Math.sqrt(b * b + e * e), b < c && (c = b, d = this.players[f]));
    return d
};
Team.prototype.findPlayerNearTheBall = function(a) {
    a = "undefined" === typeof a ? -1 : a;
    for (var b = 0, c = 9E3, d = null, e = b = 0, f = 0; f < this.players.length; ++f) this.players[f].type == PlayerManager.TYPE_GOALKEEPER || !this.players[f].isSelectable() || this.direction == Team.TEAM_LEFT && -1 != a && this.players[f].x() > a + 150 || this.direction == Team.TEAM_RIGHT && -1 != a && this.players[f].x() < a - 150 || (b = this.players[f].x() - this.m_world.ballon.x(), e = this.players[f].y() - this.m_world.ballon.y(), b = Math.sqrt(b * b + e * e), b < c && (c = b, d = this.players[f]));
    return d
};
Team.prototype.findPlayerByType = function(a) {
    for (var b = 0; b < this.players.length; ++b)
        if (this.players[b].type == a) return this.players[b];
    return null
};
Team.prototype.setReactionDelay = function() {
    for (var a = 0; a < this.players.length; ++a) this.players[a].getActiveAI().setReactionDelay()
};
Team.prototype.updateDefensiveStand = function() {
    !0 != this.m_ballPosesion && (this.m_defenseZone != Team.DEFENSE_BACK && this.m_world.ballon.x() > this.defensePlayer.zoneInit && this.m_world.ballon.x() < this.defensePlayer.zoneEnd && (this.m_defenseZone = Team.DEFENSE_BACK, this.defensePlayer.getActiveAI().resetPosition(), this.midPlayerDown.getActiveAI().setZoneInit(this.defensePlayer.zoneInit), this.midPlayerDown.getActiveAI().setZoneEnd(this.defensePlayer.zoneEnd), this.midPlayerDown.getActiveAI().setCoverPointX(this.defensePlayer.coverBaseX),
        this.midPlayerDown.getActiveAI().setCoverPointY(this.defensePlayer.coverBaseY), this.defensePlayer.getActiveAI().setCoverPointX(this.defensePlayer.coverBaseX - this.direction * Team.OFFENSE_OFFSET), this.midPlayerUp.getActiveAI().setCoverPointX(this.midPlayerUp.coverBaseX - this.direction * Team.OFFENSE_OFFSET), this.midPlayerDown.getActiveAI().setCoverPointX(this.midPlayerDown.coverBaseX - this.direction * Team.OFFENSE_OFFSET), this.offensePlayer.getActiveAI().setCoverPointX(this.offensePlayer.coverBaseX - this.direction *
            Team.OFFENSE_OFFSET)), this.m_defenseZone != Team.DEFENSE_MID && this.m_world.ballon.x() > this.midPlayerDown.zoneInit && this.m_world.ballon.x() < this.midPlayerDown.zoneEnd && (this.m_defenseZone = Team.DEFENSE_MID, this.defensePlayer.getActiveAI().resetPosition(), this.midPlayerUp.getActiveAI().resetPosition(), this.midPlayerDown.getActiveAI().resetPosition(), this.defensePlayer.getActiveAI().setCoverPointX(this.defensePlayer.coverBaseX - this.direction * Team.OFFENSE_OFFSET), this.midPlayerUp.getActiveAI().setCoverPointX(this.midPlayerUp.coverBaseX -
        this.direction * Team.OFFENSE_OFFSET), this.midPlayerDown.getActiveAI().setCoverPointX(this.midPlayerDown.coverBaseX - this.direction * Team.OFFENSE_OFFSET), this.offensePlayer.getActiveAI().setCoverPointX(this.offensePlayer.coverBaseX - this.direction * Team.OFFENSE_OFFSET)), this.m_defenseZone != Team.DEFENSE_FRONT && this.m_world.ballon.x() > this.offensePlayer.zoneInit && this.m_world.ballon.x() < this.offensePlayer.zoneEnd && (this.m_defenseZone = Team.DEFENSE_FRONT, this.defensePlayer.getActiveAI().resetPosition(), this.midPlayerUp.getActiveAI().resetPosition(),
        this.midPlayerDown.getActiveAI().resetPosition(), this.offensePlayer.getActiveAI().resetPosition(), this.defensePlayer.getActiveAI().setCoverPointX(this.defensePlayer.coverBaseX - this.direction * Team.OFFENSE_OFFSET), this.midPlayerUp.getActiveAI().setCoverPointX(this.midPlayerUp.coverBaseX - this.direction * Team.OFFENSE_OFFSET), this.midPlayerDown.getActiveAI().setCoverPointX(this.midPlayerDown.coverBaseX - this.direction * Team.OFFENSE_OFFSET), this.offensePlayer.getActiveAI().setCoverPointX(this.offensePlayer.coverBaseX -
            this.direction * Team.OFFENSE_OFFSET)))
};
Team.prototype.takeOffensiveStand = function(a) {
    if (a.type == PlayerManager.TYPE_GOALKEEPER || a.type == PlayerManager.TYPE_DEFENDER) this.defensePlayer.getActiveAI().resetPosition(), this.midPlayerUp.getActiveAI().resetPosition(), this.midPlayerDown.getActiveAI().resetPosition(), this.offensePlayer.getActiveAI().resetPosition(), this.defensePlayer.getActiveAI().setCoverPointX(this.defensePlayer.coverBaseX + this.direction * Team.OFFENSE_OFFSET), this.midPlayerUp.getActiveAI().setCoverPointX(this.midPlayerUp.coverBaseX + this.direction *
        Team.OFFENSE_OFFSET), this.midPlayerDown.getActiveAI().setCoverPointX(this.midPlayerDown.coverBaseX + this.direction * Team.OFFENSE_OFFSET);
    a.type == PlayerManager.TYPE_MIDDLER && (this.midPlayerUp.getActiveAI().resetPosition(), this.midPlayerDown.getActiveAI().resetPosition(), this.offensePlayer.getActiveAI().resetPosition(), this.defensePlayer.getActiveAI().setCoverPointX(this.defensePlayer.coverBaseX + this.direction * Team.OFFENSE_OFFSET), this.midPlayerUp.getActiveAI().setCoverPointX(this.midPlayerUp.coverBaseX +
        this.direction * Team.OFFENSE_OFFSET), this.midPlayerDown.getActiveAI().setCoverPointX(this.midPlayerDown.coverBaseX + this.direction * Team.OFFENSE_OFFSET));
    a.type == PlayerManager.TYPE_STRIKER && (this.midPlayerDown.getActiveAI().setZoneInit(this.offensePlayer.zoneInit), this.midPlayerDown.getActiveAI().setZoneEnd(this.offensePlayer.zoneEnd), this.midPlayerDown.getActiveAI().setCoverPointX(this.offensePlayer.coverBaseX), this.midPlayerDown.getActiveAI().setCoverPointY(this.offensePlayer.coverBaseY), this.offensePlayer.getActiveAI().resetPosition(),
        this.defensePlayer.getActiveAI().setCoverPointX(this.defensePlayer.coverBaseX + this.direction * Team.OFFENSE_OFFSET), this.midPlayerUp.getActiveAI().setCoverPointX(this.midPlayerUp.coverBaseX + this.direction * Team.OFFENSE_OFFSET))
};
Team.prototype.onReceiveGoal = function() {
    this.iskickOffTeam = !0;
    for (var a = 0; a < this.players.length; a++) this.players[a].onReceiveGoal();
    this.updateIADifficulty()
};
Team.prototype.onAddGoal = function() {
    this.iskickOffTeam = !1;
    for (var a = 0; a < this.players.length; a++) this.players[a].onCelebrateGoal();
    this.numGols++;
    this.updateIADifficulty()
};
Team.prototype.updateIADifficulty = function() {
    var a = 0,
        b = 0,
        c = this.enemyTeam.numGols - this.numGols,
        d = Application.config.AIParameters;
    c <= d[0].difference && (b = 0);
    for (a = 1; a < d.length - 1; ++a) d[a].difference == c && (b = a);
    c >= d[d.length - 1].difference && (b = d.length - 1);
    !1 == this.isBotTeam && (b = d.length - 1);
    for (a = 0; a < this.players.length; ++a) this.players[a].getActiveAI().setDifficulty(b)
};
Team.prototype.setPositionOffset = function(a, b) {
    for (var c = 0; c < this.players.length; ++c) this.players[c].type != PlayerManager.TYPE_GOALKEEPER && this.players[c].setPosition(this.players[c].mapBaseX + a, this.players[c].mapBaseY + b)
};
Team.prototype.free = function() {
    for (var a = 0; a < this.players.length; ++a) this.players[a].free()
};
Team.PLAYER_KICKOFF = 3;
Team.OFFENSE_OFFSET = 240;
Team.TEAM_LEFT = 1;
Team.TEAM_RIGHT = -1;
Team.DEFENSE_BACK = 0;
Team.DEFENSE_MID = 1;
Team.DEFENSE_FRONT = 2;
Team.COVER_AREA_WIDTH = 600;
Team.TOTAL_PLAYERS = 5;
Team.SUPERSHOT_TOTAL = 3;
Team.POSITION_MAP_LEFT_1 = new Point(100, 390);
Team.POSITION_MAP_LEFT_2 = new Point(350, 370);
Team.POSITION_MAP_LEFT_4 = new Point(550, 220);
Team.POSITION_MAP_LEFT_5 = new Point(600, 475);
Team.POSITION_MAP_LEFT_6 = new Point(795, 375);
Team.POSITION_MAP_RIGHT_1 = new Point(1600, 370);
Team.POSITION_MAP_RIGHT_2 = new Point(1350, 370);
Team.POSITION_MAP_RIGHT_4 = new Point(1050, 220);
Team.POSITION_MAP_RIGHT_5 = new Point(1035, 520);
Team.POSITION_MAP_RIGHT_6 = new Point(845, 375);
Team.POSITION_COVER_LEFT_1 = new Point(100, 390);
Team.POSITION_COVER_LEFT_2 = new Point(345, 305);
Team.POSITION_COVER_LEFT_4 = new Point(690, 255);
Team.POSITION_COVER_LEFT_5 = new Point(770, 520);
Team.POSITION_COVER_LEFT_6 = new Point(1330, 365);
Team.POSITION_COVER_RIGHT_1 = new Point(1600, 390);
Team.POSITION_COVER_RIGHT_2 = new Point(1300, 305);
Team.POSITION_COVER_RIGHT_4 = new Point(940, 255);
Team.POSITION_COVER_RIGHT_5 = new Point(900, 520);
Team.POSITION_COVER_RIGHT_6 = new Point(345, 365);

function GameM2(a) {
    SGame.call(this, a);
    this.m_canvas._sorted = !0;
    this.inTransition = this.playerWin = this.isPaused = this.win = !1;
    this.m_gameHandler = null;
    this.m_reset = !1;
    this.m_world = null;
    this.m_finish = !1;
    this.m_data = Application.config.minigame2;
    this.m_mapData = Application.config.minigame2map;
    this.m_config = Application.config.configMinigames;
    this.m_maxLives = this.m_lives = this.m_config.livesMinigame2;
    this.m_totalTime = 1E3 * this.m_config.timeMinigame2;
    this.m_score = 0;
    GameM2.instance = this;
    this.m_timeElapsed = 0;
    ControlTouch.instance.setMultitouchGame(!1);
    this.reset();
    this.m_livesClips = [];
    this.m_lives_initx = 50;
    this.m_lives_offsetX = 10;
    this.m_lives_inity = 50;
    this.m_waveScoreMultiplier = this.m_config.minigame2WaveScore;
    this.m_lifeScoreMultiplier = this.m_config.minigame2LifeScore;
    this.m_laneScoreMultiplier = this.m_config.minigame2LaneScore;
    this.m_sodaScoreMultiplier = this.m_config.minigame2SodaScore;
    this.m_laneChanges = this.m_sodaCounter = this.m_waveCounter = 0;
    this.m_gameFinished = this.m_isSkip = !1;
    Global.app.stopAllSounds();
    Global.app.playSound("dko_mus_minigame")
}
goog.inherits(GameM2, SGame);
GameM2.MAX_DELTA = 50;
GameM2.CROWD = 0;
GameM2.PLAYER = 1;
GameM2.BASE = 2;
GameM2.FACTOR = 3;
GameM2.WAVES = 4;
GameM2.WAVE1 = 5;
GameM2.WAVE2 = 6;
GameM2.WAVE3 = 7;
GameM2.GRUMPY_ACTOR = 8;
GameM2.HAPPY_ACTOR = 9;
GameM2.instance = null;
GameM2.prototype.initLives = function() {
    for (var a = 0; a < this.m_lives; a++) this.m_livesClips.push(Application.instance.getClip("mcLifeGreenMushroom"));
    for (a = 0; a < this.m_livesClips.length; a++) this.m_livesClips[a].setX(this.m_lives_initx + this.m_livesClips[a].width * a + this.m_lives_offsetX), this.m_livesClips[a].setY(this.m_lives_inity), this.m_livesClips[a].setVisible(!0), this.m_canvas.addChild(this.m_livesClips[a].sprite)
};
GameM2.prototype.world = function() {
    return this.m_world
};
GameM2.prototype.init = function() {
    this.m_hud = new HudM2
};
GameM2.prototype.timeElapsed = function() {
    return this.m_timeElapsed
};
GameM2.prototype.addScore = function(a) {
    this.m_score += a;
    0 > this.m_score && (this.m_score = 0);
    this.m_hud.setScore(this.m_score)
};
GameM2.prototype.setScore = function(a) {};
GameM2.prototype.removeLife = function() {};
GameM2.prototype.addLife = function(a) {
    this.m_lives += a;
    HudM2.instance.onRefreshLives();
    0 > a ? 1 > this.m_lives ? (this.win = !0, this.onGameEnd(!1)) : HudM2.instance.setLives(this.m_lives) : HudM2.instance.setLives(this.m_lives)
};
GameM2.prototype.addPeopleTouched = function(a) {
    this.m_waveCounter += a
};
GameM2.prototype.addSpecialPeopleTouched = function(a) {
    this.m_sodaCounter += a
};
GameM2.prototype.addLaneChange = function(a) {
    this.m_laneChanges += a
};
GameM2.prototype.onGameEnd = function(a) {
    var b = a;
    this.m_gameFinished = a = !0;
    !0 === this.m_isSkip ? (this.m_gameHandler.onGameEnd(!1), HudM2.instance.callback = "onEndGameCallback", HudM2.instance.targetCallback = this, HudM2.instance.doMsg("", Application.config.configMinigames.minigame2EndTime)) : (this.m_gameHandler.onGameEnd(a), HudM2.instance.callback = "onEndGameCallback", HudM2.instance.targetCallback = this, a = b ? Application.strings.STR_MINIGAME2_GOOD_JOB : Application.strings.STR_MINIGAME2_GOOD_ENOUGH, HudM2.instance.doMsg(a,
        1.5 * Application.config.configMinigames.minigame2EndTime), this.m_score += this.m_sodaScoreMultiplier * this.m_sodaCounter, this.m_score += this.m_lifeScoreMultiplier * this.m_lives, this.m_score += this.m_laneScoreMultiplier * this.m_laneChanges, this.m_score += this.m_waveScoreMultiplier * this.m_waveCounter, Global.minigameScore = this.m_score, Global.mickeyEarned = 0, this.m_score >= this.m_config.minigameHighThreshold ? (Global.mickeyEarned = 3, 3 <= Global.mickeyShots ? Global.extraMickeyShot = 1 : (Global.mickeyEarned = 3 - Global.mickeyShots,
        Global.mickeyShots = 3), Global.extraTime = this.m_config.minigameHighPrizeTime) : this.m_score >= this.m_config.minigameMidThreshold ? (3 === Global.mickeyShots ? Global.boostOn = 1 : (Global.mickeyEarned = 1, Global.mickeyShots++), Global.extraTime = this.m_config.minigameMidPrizeTime) : this.m_score >= this.m_config.minigameLowThreshold && (Global.boostOn = 1, Global.extraTime = this.m_config.minigameLowPrizeTime))
};
GameM2.prototype.reset = function() {
    this.m_world && (this.m_world.free(), this.m_world = null);
    this.m_world = new WorldM2(this.m_canvas, this, this.m_data);
    this.m_reset = !1;
    this.m_gameHandler = new GameHandler(this.m_world)
};
GameM2.prototype.onEndGameCallback = function() {
    !1 === this.m_isSkip && GuiGame.instance.addPopup(GuiPopupMinigameReward, 0, 0);
    this.m_finish = !0
};
GameM2.prototype.update = function(a) {
    this.m_reset ? this.reset() : this.m_finish ? GuiGame.instance && (Global.level = 1, GuiManager.instance.gotoScreen(GuiManager.SC_GAME)) : (a > GameM2.MAX_DELTA && (a = GameM2.MAX_DELTA), GameM2.superClass_.update.call(this, a), this.m_world.update(a), this.m_gameHandler.update(a), this.m_timeElapsed += a, this.m_timeElapsed > this.m_totalTime && !1 === this.m_gameFinished && (this.win = !0, this.onGameEnd(!0)))
};
GameM2.prototype.onKeyDown = function(a) {
    GameM2.superClass_.onKeyDown.call(this, a);
    a == Common.KEY_1 ? Global.game_mode !== Global.mode_tournament && (this.onGameEnd(!0), Global.level = 2, GuiManager.instance.gotoScreen(GuiManager.SC_GAME)) : a == Common.KEY_2 ? Global.game_mode !== Global.mode_tournament && (this.onGameEnd(!0), Global.level = 3, GuiManager.instance.gotoScreen(GuiManager.SC_GAME)) : a == Common.KEY_3 && Global.game_mode !== Global.mode_tournament && (this.onGameEnd(!0), Global.level = 4, GuiManager.instance.gotoScreen(GuiManager.SC_GAME));
    if (!1 == this.m_finish) this.m_world.onKeyDown(a)
};
GameM2.prototype.onKeyUp = function(a) {
    GameM2.superClass_.onKeyUp.call(this, a);
    this.m_world.onKeyUp(a)
};
GameM2.prototype.onMouseMove = function(a) {
    GameM2.superClass_.onMouseMove.call(this, a);
    this.m_gameHandler.onMouseMove(a)
};
GameM2.prototype.onMouseDown = function(a) {
    GameM2.superClass_.onMouseDown.call(this, a);
    this.m_gameHandler.onMouseDown(a)
};
GameM2.prototype.onMouseUp = function(a) {
    GameM2.superClass_.onMouseUp.call(this, a);
    this.m_gameHandler.onMouseUp(a)
};
GameM2.prototype.getLives = function() {
    return this.m_lives
};
GameM2.prototype.setLives = function(a) {
    this.m_lives = a
};
GameM2.prototype.getMaxLives = function() {
    return this.m_maxLives
};
GameM2.prototype.onSkipMinigame = function() {
    !1 === this.m_gameFinished && (this.m_isSkip = !0, this.onGameEnd(!1))
};
GameM2.prototype.hasGameFinished = function() {
    return this.m_gameFinished
};

function WorldM2(a, b, c) {
    this.m_canvas = a;
    this.m_data = c;
    a = Application.instance.getClip("mcBgMinigame2");
    this.m_canvas.addChild(a.sprite);
    this.m_actors = [];
    this.m_actorManager = null;
    this.m_width = Application.APP_WIDTH;
    this.m_height = Application.APP_HEIGHT;
    this.playerRow = this.m_data[GameM2.PLAYER].initRow;
    this.playerCol = this.m_data[GameM2.PLAYER].initCol;
    this.m_actorLeader = this.m_ddr_grade = null;
    this.m_stopWave = !1;
    this.initActors();
    this.m_moveFlag = !1;
    GuiPopupHelpMinigame.minigame_select = GuiPopupHelpMinigame.MINIGAME_2;
    GuiGame.instance.addPopup(GuiPopupHelpMinigame, 0, 0)
}
WorldM2.prototype.free = function() {
    this.m_data = this.m_canvas = null
};
WorldM2.prototype.update = function(a) {
    this.m_actorManager.update(a);
    this.m_ddr_grade.update(a);
    this.m_actorLeader.update(a)
};
WorldM2.prototype.getActorLeader = function() {
    return this.m_actorLeader
};
WorldM2.prototype.getActorManager = function() {
    return this.m_actorManager
};
WorldM2.prototype.initActors = function() {
    this.m_actorManager = new ActorManagerM2(this.m_canvas, this, this.m_data, 0, 100);
    this.m_ddr_grade = new ActorDDRGradeM2(this.m_canvas, this, 100, 500);
    this.m_actorLeader = new ActorLeader(this.m_canvas, this, -200, 400)
};
WorldM2.prototype.onGameEnd = function(a) {
    this.m_actorLeader.onGameEnd(a)
};
WorldM2.prototype.addActor = function(a) {
    null !== a && this.m_actors.push(a);
    return a
};
WorldM2.prototype.onKeyDown = function(a) {
    a === Common.KEY_C ? this.m_actorManager.showActorsCollisions(!0) : a === Common.KEY_V && this.m_actorManager.showActorsCollisions(!1)
};
WorldM2.prototype.onKeyUp = function(a) {};
WorldM2.prototype.onMouseMove = function(a) {
    !0 == this.m_moveFlag && this.checkForActor(a.offsetX, a.offsetY)
};
WorldM2.prototype.checkForActor = function(a, b) {
    for (var c = 0; c < this.m_actorManager.m_actors.length; c++)!0 == this.m_actorManager.m_actors[c].hitTestPoint(a, b) && this.m_actorManager.m_actors[c].m_state != SpectatorM2.ST_DOING_WAVE && this.m_actorManager.m_actors[c].gotoState(SpectatorM2.ST_DOING_WAVE)
};
WorldM2.prototype.onMouseDown = function(a) {
    this.m_moveFlag = !0;
    this.checkForActor(a.offsetX, a.offsetY)
};
WorldM2.prototype.onMouseUp = function(a) {
    this.m_moveFlag = !1
};
WorldM2.prototype.onTouchStart = function(a, b, c) {
    this.m_moveFlag = !0
};
WorldM2.prototype.onTouchEnd = function(a, b, c) {
    this.m_moveFlag = !1
};
WorldM2.PLAYER_INIT_X = 300;
WorldM2.PLAYER_INIT_Y = 300;

function ActorManagerM2(a, b, c, d, e) {
    this.m_canvas = a;
    this.m_world = b;
    this.m_data = c;
    this.m_x = d;
    this.m_y = e;
    this.m_actors = [];
    this.m_numCols = this.m_numRows = 0;
    this.m_numRows = this.m_data[GameM2.CROWD].numRows;
    this.m_numCols = this.m_data[GameM2.CROWD].numColumns;
    this.m_actorScaleX = this.m_data[GameM2.CROWD].actorScaleX;
    this.m_actorScaleY = this.m_data[GameM2.CROWD].actorScaleY;
    this.m_margin_top = this.m_data[GameM2.CROWD].marginTop;
    this.m_margin_left = this.m_data[GameM2.CROWD].marginLeft;
    this.m_xSpacing = this.m_data[GameM2.CROWD].xSpacing;
    this.m_ySpacing = this.m_data[GameM2.CROWD].ySpacing;
    this.m_crowdGrid = [];
    this.m_skinsGrid = [];
    this.m_maxWaves = this.m_data[GameM2.WAVES].numOfWaves;
    this.m_currentMapData = null;
    this.initCrowd()
}
ActorManagerM2.prototype.getNumOfWaves = function() {
    return this.m_maxWaves
};
ActorManagerM2.prototype.refreshMatrixData = function(a) {
    a = (a - 1) % this.m_maxWaves + 1;
    a > this.m_maxWaves && (a = this.m_maxWaves);
    this.parseMatrixData(a);
    for (a = 0; a < this.m_numRows; a++)
        for (var b = 0; b < this.m_numCols; b++) this.m_actors[a * this.m_numCols + b].setActorType(this.m_crowdGrid[a][b]), this.m_actors[a * this.m_numCols + b].refreshState()
};
ActorManagerM2.prototype.parseMatrixData = function(a) {
    1 > a ? a = 1 : a > this.m_maxWaves && (a = this.m_maxWaves);
    this.m_currentMapData = Application.config["waveMatrix" + a];
    a = Application.config.waveCrowd;
    this.m_crowdGrid = [];
    for (var b = 0; b < this.m_numRows; b++) {
        for (var c = this.m_currentMapData[b], d = a[b], e = [], f = [], g = 0; g < this.m_numCols; g++) {
            var h = d["col" + g];
            e.push(c["col" + g]);
            f.push(h)
        }
        this.m_crowdGrid.push(e);
        this.m_skinsGrid.push(f)
    }
};
ActorManagerM2.prototype.getGridData = function() {
    return this.m_crowdGrid
};
ActorManagerM2.prototype.free = function() {
    for (this.m_data = this.m_world = this.m_canvas = null; 0 < this.m_actors.length;) this.m_actors.pop();
    this.m_actors = null
};
ActorManagerM2.prototype.update = function(a) {
    if (null != this.m_actors)
        for (var b = 0; b < this.m_actors.length; b++) this.m_actors[b].update(a)
};
ActorManagerM2.prototype.showActorsCollisions = function(a) {
    for (var b = 0; b < this.m_actors.length; b++) this.m_actors[b].showCollisions(a)
};
ActorManagerM2.prototype.initCrowd = function() {
    this.parseMatrixData(1);
    this.createActors()
};
ActorManagerM2.prototype.createActors = function() {
    for (var a = null, b = 0; b < this.m_numRows; b++)
        for (var c = 0; c < this.m_numCols; c++) a = this.m_world.addActor(new SpectatorM2(this.m_canvas, this.m_world, this.m_margin_left + c * this.m_xSpacing, this.m_data[GameM2.CROWD]["deltaMargin" + (b + 1)] + b * this.m_ySpacing, this.m_actorScaleX, this.m_actorScaleY, this.m_crowdGrid[b][c], b, c, {
            npcSkinID: this.m_skinsGrid[b][c]
        })), this.m_actors.push(a)
};
ActorManagerM2.prototype.getActors = function() {
    return this.m_actors
};
ActorManagerM2.prototype.makeActorsCelebrate = function() {
    for (var a = 0; a < this.m_actors.length; a++) this.m_actors[a].gotoState(SpectatorM2.ST_DOING_WAVE)
};
ActorManagerM2.prototype.makeActorsBlame = function() {
    for (var a = 0; a < this.m_actors.length; a++) this.m_actors[a].gotoState(SpectatorM2.ST_BLAMING)
};

function ActorM2(a, b, c, d) {
    this.m_canvas = a;
    this.m_world = b;
    this.m_character = null;
    this.m_x = c;
    this.m_y = d;
    this.m_tempPosX = c;
    this.m_tempPosY = d;
    this.m_state = -1;
    this.m_clip = null;
    this.m_isAwaitingDelete = !1;
    this.m_bounds = new Rectangle;
    this.m_boundsScaleY = this.m_boundsScaleX = 1
}
ActorM2.prototype.setBoundsScale = function(a, b) {
    this.m_boundsScaleX = a;
    this.m_boundsScaleY = b
};
ActorM2.prototype.free = function() {
    this.m_bounds = this.m_world = this.m_canvas = null;
    null !== this.m_character && (this.m_character.free(), this.m_character = null);
    this.m_clip = null
};
ActorM2.prototype.update = function(a) {
    null !== this.m_clip && (this.m_clip.setX(this.m_x), this.m_clip.setY(this.m_y), this.m_character.update(a))
};
ActorM2.prototype.reset = function(a, b, c, d) {
    this.m_canvas = a;
    this.m_world = b;
    this.m_character = null;
    this.m_x = c;
    this.m_y = d;
    this.m_state = -1;
    this.m_clip = null;
    this.m_isAwaitingDelete = !1;
    this.m_bounds = new Rectangle
};
ActorM2.prototype.clip = function() {
    return this.m_clip
};
ActorM2.prototype.getBounds = function() {
    return null !== this.m_clip ? (this.m_bounds.x = this.m_x - this.m_clip.cx, this.m_bounds.y = this.m_y - this.m_clip.cy, this.m_bounds.w = this.m_clip.width, this.m_bounds.h = this.m_clip.height, this.m_bounds.x += (1 - this.m_boundsScaleX) / 2 * this.m_bounds.w, this.m_bounds.y += (1 - this.m_boundsScaleY) / 2 * this.m_bounds.h, this.m_bounds.w *= this.m_boundsScaleX, this.m_bounds.h *= this.m_boundsScaleY, this.m_bounds) : null
};
ActorM2.prototype.hitTestPoint = function(a, b) {
    var c = this.getBounds();
    return null != c ? c.intersectPoint(a, b) : !1
};
ActorM2.prototype.characterGoToState = function(a) {
    a !== this.m_state && (null !== this.m_clip && (this.m_tempPosX = this.m_clip.x, this.m_tempPosY = this.m_clip.y), this.m_character.gotoState(a), this.m_clip = this.m_character.actor().clip(), this.m_clip.setScaleX(this.m_flipX ? -this.m_scaleX : this.m_scaleX), this.m_clip.setScaleY(this.m_scaleY), this.m_clip.setX(this.m_tempPosX), this.m_clip.setY(this.m_tempPosY))
};
ActorM2.prototype.gotoState = function(a) {
    this.m_state != a && (this.characterGoToState(a), this.m_state = a)
};
ActorM2.prototype.x = function() {
    return this.m_x
};
ActorM2.prototype.y = function() {
    return this.m_y
};
ActorM2.prototype.setX = function(a) {
    this.m_x = a
};
ActorM2.prototype.setY = function(a) {
    this.m_y = a
};
ActorM2.prototype.isAwaitingDelete = function() {
    return this.m_isAwaitingDelete
};
ActorM2.prototype.setAwaitingDelete = function(a) {
    this.m_isAwaitingDelete = a
};

function SpectatorM2(a, b, c, d, e, f, g, h, k, l, m, n) {
    ActorM2.call(this, a, b, c, d);
    this.m_debugCanvas = GuiGame.instance.canvasMessage;
    this.m_actorType = g;
    "undefined" === typeof this.m_actorType && (this.m_actorType = 0);
    this.m_scaleX = void 0 == typeof e ? 1 : e;
    this.m_scaleY = void 0 == typeof f ? 1 : f;
    "undefined" !== typeof m || "undefined" !== typeof n ? (this.m_boundsScaleX = m, this.m_boundsScaleY = n) : "number" === typeof this.m_actorType && (1 === this.m_actorType ? this.m_boundsScaleY = this.m_boundsScaleX = 0.5 : (this.m_boundsScaleX = 0.45, this.m_boundsScaleY =
        0.7));
    this.m_character = new Character(c, d, a);
    this.m_character.addState(SpectatorM2.ST_DOING_NOTHING, "mcNpc0" + l.npcSkinID + "Idle");
    this.m_character.addState(SpectatorM2.ST_DOING_NOTHING_GRUMPY, "mcNpc0" + l.npcSkinID + "Angry2");
    this.m_character.addState(SpectatorM2.ST_DOING_NOTHING_ANNOYED, "mcNpc0" + l.npcSkinID + "Angry2Hit");
    this.m_character.addState(SpectatorM2.ST_DOING_NOTHING_WITH_SODA, "mcNpc0" + l.npcSkinID + "DrinkGreen");
    this.m_character.addState(SpectatorM2.ST_PREPARING_FOR_WAVE, "mcNpc0" + l.npcSkinID + "Stand");
    this.m_character.addState(SpectatorM2.ST_DOING_WAVE, "mcNpc0" + l.npcSkinID + "Celebrate");
    this.m_character.addState(SpectatorM2.ST_BLAMING, "mcNpc0" + l.npcSkinID + "Angry");
    this.m_character.onEndAnimation = "onEndAnimation";
    this.m_character.worldActor = this;
    0 == this.m_actorType ? this.gotoState(SpectatorM2.ST_DOING_NOTHING) : 1 == this.m_actorType ? this.gotoState(SpectatorM2.ST_DOING_NOTHING_GRUMPY) : this.gotoState(SpectatorM2.ST_DOING_NOTHING_WITH_SODA);
    this.m_posInGrid = [h, k];
    this.m_collisionDisplay = new SNode;
    this.m_showCollisions = !1;
    this.showCollisions(!1);
    this.m_gameFinished = !1
}
goog.inherits(SpectatorM2, ActorM2);
SpectatorM2.ST_DOING_NOTHING = 1;
SpectatorM2.ST_DOING_NOTHING_GRUMPY = 2;
SpectatorM2.ST_PREPARING_FOR_WAVE = 3;
SpectatorM2.ST_DOING_WAVE = 4;
SpectatorM2.ST_BLAMING = 5;
SpectatorM2.ST_DOING_NOTHING_WITH_SODA = 6;
SpectatorM2.ST_DOING_NOTHING_ANNOYED = 7;
SpectatorM2.TYPE_HAPPY = 0;
SpectatorM2.TYPE_GRUMPY = 1;
SpectatorM2.TYPE_DRINKING_HAPPY = 2;
SpectatorM2.prototype.getActorType = function() {
    return this.m_actorType
};
SpectatorM2.prototype.refreshState = function() {
    1 === this.m_actorType ? this.gotoState(SpectatorM2.ST_DOING_NOTHING_GRUMPY) : 0 === this.m_actorType ? this.gotoState(SpectatorM2.ST_DOING_NOTHING) : this.gotoState(SpectatorM2.ST_DOING_NOTHING_WITH_SODA)
};
SpectatorM2.prototype.showCollisions = function(a) {
    (this.m_showCollisions = a) ? (null === this.m_collisionDisplay && (this.m_collisionDisplay = new SNode), this.m_debugCanvas.addChild(this.m_collisionDisplay), this.m_collisionDisplay.addDrawListener(this, "onDraw")) : null !== this.m_collisionDisplay && this.m_debugCanvas.removeChild(this.m_collisionDisplay)
};
SpectatorM2.prototype.onDraw = function(a) {
    if (null !== this.m_bounds) {
        var b = Common.COLOR_BLUE;
        1 === this.m_actorType && (b = Common.COLOR_RED);
        SGraphics.drawRectangle(a, this.m_bounds.x, this.m_bounds.y, this.m_bounds.w, this.m_bounds.h, 2, b, Common.COLOR_NONE)
    }
};
SpectatorM2.prototype.free = function() {
    SpectatorM2.superClass_.free.call(this)
};
SpectatorM2.prototype.getPosInGrid = function() {
    return this.m_posInGrid
};
SpectatorM2.prototype.gotoState = function(a) {
    SpectatorM2.superClass_.gotoState.call(this, a);
    this.m_clip.setScaleX(this.m_scaleX);
    this.m_clip.setScaleY(this.m_scaleY);
    this.m_bounds = this.getBounds()
};
SpectatorM2.prototype.setDepth = function(a) {
    null !== this.m_character && this.m_character.setDepth(a)
};
SpectatorM2.prototype.getDepth = function() {
    return this.m_character.depth
};
SpectatorM2.prototype.update = function(a) {
    SpectatorM2.superClass_.update.call(this, a);
    this.setDepth(10 * this.m_y)
};
SpectatorM2.prototype.onEndAnimation = function(a) {
    a == SpectatorM2.ST_DOING_WAVE ? !1 === this.m_gameFinished && this.gotoState(SpectatorM2.ST_DOING_NOTHING) : a === SpectatorM2.ST_DOING_NOTHING_ANNOYED && this.gotoState(SpectatorM2.ST_DOING_NOTHING_GRUMPY)
};
SpectatorM2.prototype.setActorType = function(a) {
    this.m_actorType = a;
    this.m_actorType === SpectatorM2.TYPE_HAPPY ? (this.m_boundsScaleX = Application.config.minigame2[GameM2.HAPPY_ACTOR].boundsScaleX, this.m_boundsScaleY = Application.config.minigame2[GameM2.HAPPY_ACTOR].boundsScaleY) : this.m_actorType === SpectatorM2.TYPE_GRUMPY ? (this.m_boundsScaleX = Application.config.minigame2[GameM2.GRUMPY_ACTOR].boundsScaleX, this.m_boundsScaleY = Application.config.minigame2[GameM2.GRUMPY_ACTOR].boundsScaleY) : this.m_actorType ===
        SpectatorM2.TYPE_DRINKING_HAPPY && (this.m_boundsScaleX = Application.config.minigame2[GameM2.HAPPY_ACTOR].boundsScaleX, this.m_boundsScaleY = Application.config.minigame2[GameM2.HAPPY_ACTOR].boundsScaleY)
};
SpectatorM2.prototype.getBounds = function() {
    return SpectatorM2.superClass_.getBounds.call(this)
};
SpectatorM2.prototype.hitTestPoint = function(a, b) {
    var c = this.getBounds();
    return null != c ? c.intersectPoint(a, b) : !1
};
SpectatorM2.prototype.onGameEnd = function() {
    this.m_gameFinished = !0
};

function HudM2(a, b) {
    SScreen.call(this, a, b);
    HudM2.instance = this;
    this.m_currentTime = 0;
    this.txtPlayerLive = $(".ui_hud_lifes");
    this.m_txtScore = $(".ui_hud_score");
    this.m_txtTime = $(".ui_general_time.t1");
    this.m_txtTime2 = $(".ui_general_time.t3");
    this.m_txtStatusMessage = $(".ui_hud_status_message");
    this.m_txtStatusTime = $(".ui_hud_status_time");
    this.m_txtWaveCounter = $(".ui_hud_counter");
    this.m_maxLives = 3;
    this.m_lifeBaseName = ".ui_general_lifes.l";
    this.m_lifeElements = [];
    for (var c = 0; c < this.m_maxLives; c++) this.m_lifeElements.push(this.m_lifeBaseName +
        (c + 1));
    this.initLives();
    this.m_state = HudM2.STATE_NORMAL;
    this.m_timeInState = 0;
    this.m_hasMsgFinished = !0;
    this.m_txtMessage = $(".ui_hud_messagetext");
    this.m_txtMessageShadow = $(".ui_hud_messagebase");
    this.m_msgTime = 0;
    this.m_maxAlpha = 1;
    this.m_minAlpha = 0.1;
    this.m_currentAlpha = this.m_maxAlpha;
    this.m_alphaStep = 0;
    this.targetCallback = this.callback = null;
    this.m_showingMessage = !1;
    this.m_messageTime = 0;
    this.m_message = ""
}
goog.inherits(HudM2, SScreen);
HudM2.instance = null;
HudM2.MsgTime = 2E3;
HudM2.STATE_NORMAL = 0;
HudM2.STATE_SHOWING_MESSAGE = 1;
HudM2.ACTION_GOTO_NORMAL = 10;
HudM2.ACTION_DO_MESSAGE = 11;
HudM2.prototype.setGuiHTML = function() {
    this.css = " .ui_general_screen_bg {  top:0;  left:0;  width: 750px;  height: 500px;  background:url(media/images/ui_images/hud/gui_mini1.png); } .ui_hud_counter {  position: absolute;  left: 54px;  top: 42px;  width: 70px;  height: 30px;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 26px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always; } .ui_general_time.t1 {  width: 47px;  height: 27px;  text-align: right; } .ui_general_time.t3 {  left: 163px;  top: 25px;  width: 47px;  height: 27px;  text-align: left; } .ui_hud_counter {  position: absolute;  left: 13px;  top: 49px;  width: 96px;  height: 30px;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 26px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always; } .ui_hud_wave {  position: absolute;  left: 13px;  top: 40px;  width: 96px;  height: 19px;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 12px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always; } .ui_hud_messagetext {  position: absolute;  left: 110px;  top: 197px;  width: 566px;  height: 51px;  color: #005189;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 38px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always; } .ui_hud_messagebase {  position: absolute;  pointer-events: none;  width: 565px;  height: 208px;  left: 94px;  top: 119px;  background: url(media/images/ui_images/popups/gui_popups_message1.png); } .ui_hud_messagetext02 {  position: absolute;  left: 110px;  top: 197px;  width: 566px;  height: 51px;  color: #005189;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 38px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always; } .ui_hud_messagebase02 {  position: absolute;  pointer-events: none;  width: 565px;  height: 208px;  left: 94px;  top: 119px;  background: url(media/images/ui_images/popups/gui_popups_message1.png); } .ui_hud_messagetext03 {  position: absolute;  left: 110px;  top: 197px;  width: 566px;  height: 51px;  color: #ef0000;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 38px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  } .ui_hud_messagebase03 {  position: absolute;  pointer-events: none;  width: 565px;  height: 208px;  left: 94px;  top: 119px;  background: url(media/images/ui_images/popups/gui_popups_message1.png); }";
    this.html =
        "   <div class='ui_general_button_skip b1' id='btn_skip'></div>   <div class='ui_general_support'></div>   <div class='ui_general_lifes l1'></div>   <div class='ui_general_lifes l2'></div>   <div class='ui_general_lifes l3'></div>   <div class='ui_hud_wave'>WAVE</div>        <div class='ui_hud_counter'>00</div>   <div class='ui_hud_counter'>00</div>       <div class='ui_general_time t1'>00</div>       <div class='ui_general_time t2'>:</div>   <div class='ui_general_time t3'>00</div>   <div class='ui_hud_messagebase'></div>   <div class='ui_hud_messagetext'>GREAT</div>   <div class='ui_hud_messagebase02'></div>   <div class='ui_hud_messagetext02'>GOOD</div>   <div class='ui_hud_messagebase03'></div>   <div class='ui_hud_messagetext03'>MISS</div> </div>";
    HudM2.superClass_.setGuiHTML.call(this)
};
HudM2.prototype.free = function() {
    this.m_timeElapse = null;
    HudM2.superClass_.free.call(this)
};
HudM2.prototype.setScore = function(a) {
    this.m_txtScore.html("Score: " + a)
};
HudM2.prototype.setLives = function(a) {};
HudM2.prototype.onDraw = function(a) {};
HudM2.prototype.init = function() {
    HudM2.superClass_.init.call(this);
    $(".ui_hud_baseplayer").css("pointer-events", "none");
    $(".ui_enemybase").css("pointer-events", "none");
    $(".ui_hud_messagebase").css("pointer-events", "none");
    $(".ui_hud_messagebase02").css("pointer-events", "none");
    $(".ui_hud_messagebase03").css("pointer-events", "none");
    $(".ui_hud_combobase").css("pointer-events", "none");
    this.addClickListener("btn_skip");
    $(".ui_hud_messagetext").css("display", "none");
    $(".ui_hud_messagetext02").css("display",
        "none");
    $(".ui_hud_messagetext03").css("display", "none");
    $(".ui_hud_messagebase").css("display", "none");
    $(".ui_hud_messagebase02").css("display", "none");
    $(".ui_hud_messagebase03").css("display", "none");
    $(".ui_general_time.t2").html(Application.strings.STR_HUD_TIMER)
};
HudM2.prototype.onClick = function(a) {
    switch (a.id) {
        case "btn_pause":
            GuiGame.instance.addPopup(GuiPopupPause, 0, 0);
            break;
        case "btn_skip":
            GameM2.instance.onSkipMinigame()
    }
};
HudM2.prototype.doMsg = function(a, b) {
    this.m_message = a;
    this.m_hasMsgFinished = !1;
    this.m_txtMessage.html(a);
    this.m_msgTime = b;
    this.m_alphaStep = (this.m_maxAlpha - this.m_minAlpha) / this.m_msgTime;
    this.transition(HudM2.ACTION_DO_MESSAGE)
};
HudM2.prototype.transition = function(a) {
    switch (this.m_state) {
        case HudM2.STATE_NORMAL:
            a === HudM2.ACTION_DO_MESSAGE && (this.m_timeInState = 0, this.m_hasMsgFinished = !1, this.m_state = HudM2.STATE_SHOWING_MESSAGE, "" !== this.m_message ? (this.m_txtMessage.css("display", "block"), this.m_txtMessageShadow.css("display", "block")) : (this.m_txtMessage.css("display", "none"), this.m_txtMessageShadow.css("display", "none")), this.m_txtMessage.css("opacity", "1"), this.m_txtMessageShadow.css("opacity", "1"));
            break;
        case HudM2.STATE_SHOWING_MESSAGE:
            a ===
                HudM2.ACTION_GOTO_NORMAL && (this.m_timeInState = 0, this.m_state = HudM2.STATE_NORMAL, this.m_txtMessage.css("display", "none"), this.m_txtMessageShadow.css("display", "none"))
    }
};
HudM2.prototype.setStatusMessage = function(a) {
    this.m_txtStatusMessage.html("State: " + a)
};
HudM2.prototype.setStatusTime = function(a) {
    this.m_txtStatusTime.html("TimeInState: " + a)
};
HudM2.prototype.update = function(a) {
    HudM2.superClass_.update.call(this, a);
    !0 == this.m_showingMessage && (this.m_messageTime -= a, 0 > this.m_messageTime && ($(".ui_hud_messagebase02").css("display", "none"), $(".ui_hud_messagetext02").css("display", "none"), $(".ui_hud_messagebase03").css("display", "none"), $(".ui_hud_messagetext03").css("display", "none"), $(".ui_hud_messagebase").css("display", "none"), $(".ui_hud_messagetext").css("display", "none"), this.m_showingMessage = !1));
    this.m_timeInState += a / 1E3;
    switch (this.m_state) {
        case HudM2.STATE_NORMAL:
            a =
                Math.floor(GameM2.instance.m_totalTime - GameM2.instance.m_timeElapsed);
            var b = 0 > a ? 0 : a;
            a = parseInt(b / 6E4, 10);
            a = 10 > a ? "0" + a : "" + a;
            b = parseInt(b % 6E4, 10);
            b = parseInt(b / 1E3, 10);
            b = 10 > b ? "0" + b : "" + b;
            this.m_txtTime.html(a);
            this.m_txtTime2.html(b);
            break;
        case HudM2.STATE_SHOWING_MESSAGE:
            if (this.m_currentAlpha = this.m_maxAlpha - this.m_alphaStep * this.m_timeInState, 0.8 < this.m_currentAlpha && (this.m_currentAlpha = this.m_maxAlpha), this.m_currentAlpha < this.m_minAlpha && (this.m_currentAlpha = this.m_minAlpha), this.m_timeInState >
                this.m_msgTime && (this.m_hasMsgFinished = !0, this.transition(HudM2.ACTION_GOTO_NORMAL), this.callback && this.targetCallback)) this.targetCallback[this.callback]()
    }
};
HudM2.prototype.onKeyDown = function(a) {
    HudM2.superClass_.onKeyDown.call(this, a);
    if (SGame.instance) SGame.instance.onKeyDown(a)
};
HudM2.prototype.onKeyUp = function(a) {
    HudM2.superClass_.onKeyUp.call(this, a);
    if (SGame.instance) SGame.instance.onKeyUp(a)
};
HudM2.prototype.onMouseUp = function(a) {
    HudM2.superClass_.onMouseUp.call(this, a);
    if (SGame.instance) SGame.instance.onMouseUp(a)
};
HudM2.prototype.onMouseDown = function(a) {
    HudM2.superClass_.onMouseDown.call(this, a);
    if (SGame.instance) SGame.instance.onMouseDown(a)
};
HudM2.prototype.onMouseMove = function(a) {
    HudM2.superClass_.onMouseMove.call(this, a);
    if (SGame.instance) SGame.instance.onMouseMove(a)
};
HudM2.prototype.initLives = function() {
    for (var a = 0; a < this.m_maxLives; a++) this.setElementVisibility(this.m_lifeElements[a], !0)
};
HudM2.prototype.setElementVisibility = function(a, b) {
    !0 === b ? $(a).css("display", "block") : $(a).css("display", "none")
};
HudM2.prototype.onRefreshLives = function() {
    var a = GameM2.instance.getLives() - 1;
    if (0 <= a)
        for (var b = 0; b < this.m_maxLives; b++) b <= a ? this.setElementVisibility(this.m_lifeElements[b], !0) : this.setElementVisibility(this.m_lifeElements[b], !1);
    else
        for (b = 0; b < this.m_maxLives; b++) this.setElementVisibility(this.m_lifeElements[b], !1)
};
HudM2.prototype.setWaveCounter = function(a) {
    var b = "" + a;
    10 > a && (b = "0" + b);
    this.m_txtWaveCounter.html(b)
};
HudM2.MESSAGE_TIME = 1500;

function ActorDDRGradeM2(a, b, c, d) {
    ActorM2.call(this, a, b, c, d);
    this.m_character = new Character(c, d, a);
    this.m_character.addState(ActorDDRGradeM2.ST_PERFECT, "perfect");
    this.m_character.addState(ActorDDRGradeM2.ST_GREAT, "great");
    this.m_character.addState(ActorDDRGradeM2.ST_EARLY, "early");
    this.m_character.addState(ActorDDRGradeM2.ST_LATE, "late");
    this.m_character.addState(ActorDDRGradeM2.ST_MISS, "miss");
    this.m_character.onEndAnimation = "onEndAnimation";
    this.m_character.worldActor = this;
    this.gotoState(ActorDDRGradeM2.ST_NONE)
}
goog.inherits(ActorDDRGradeM2, ActorM2);
ActorDDRGradeM2.ST_PERFECT = 1;
ActorDDRGradeM2.ST_GREAT = 2;
ActorDDRGradeM2.ST_EARLY = 3;
ActorDDRGradeM2.ST_LATE = 4;
ActorDDRGradeM2.ST_MISS = 5;
ActorDDRGradeM2.ST_NONE = 6;
ActorDDRGradeM2.prototype.free = function() {
    ActorDDRGradeM2.superClass_.free.call(this)
};
ActorDDRGradeM2.prototype.gotoState = function(a) {
    ActorDDRGradeM2.superClass_.gotoState.call(this, a)
};
ActorDDRGradeM2.prototype.update = function(a) {
    this.m_character.update(a);
    ActorDDRGradeM2.superClass_.update.call(this, a)
};
ActorDDRGradeM2.prototype.onEndAnimation = function(a) {
    this.gotoState(ActorDDRGradeM2.ST_NONE)
};

function ActorLeader(a, b, c, d) {
    ActorM2.call(this, a, b, c, d);
    this.m_character = new Character(c, d, a);
    this.m_character.addState(ActorLeader.STATE_AWAY_FROM_SCREEN, "mcPlayer0" + Global.selectedTeam + "Stand");
    this.m_character.addState(ActorLeader.STATE_RUNNING, "mcPlayer0" + Global.selectedTeam + "Run");
    this.m_character.addState(ActorLeader.STATE_GETTING_OUT_SCREEN, "mcPlayer0" + Global.selectedTeam + "Run2");
    this.m_character.addState(ActorLeader.STATE_WIN, "mcPlayer0" + Global.selectedTeam + "Celebration");
    this.m_character.addState(ActorLeader.STATE_LOSE,
        "mcPlayer0" + Global.selectedTeam + "Sad");
    this.m_character.onEndAnimation = "onEndAnimation";
    this.m_character.worldActor = this;
    this.gotoState(ActorLeader.STATE_AWAY_FROM_SCREEN);
    this.m_vy = this.m_vx = 0;
    this.m_direction = 1;
    this.m_yBase = this.m_y;
    this.m_clip.setX(c);
    this.m_clip.setY(d)
}
goog.inherits(ActorLeader, ActorM2);
ActorLeader.STATE_AWAY_FROM_SCREEN = 10;
ActorLeader.STATE_RUNNING = 11;
ActorLeader.STATE_GETTING_OUT_SCREEN = 12;
ActorLeader.STATE_WIN = 13;
ActorLeader.STATE_LOSE = 14;
ActorLeader.GET_OUT_SCREEN_VY = 200;
ActorLeader.THRESHOLD_X = 150;
ActorLeader.THRESHOLD_Y = 120;
ActorLeader.prototype.onGameEnd = function(a) {
    a ? this.gotoState(ActorLeader.STATE_WIN) : this.gotoState(ActorLeader.STATE_LOSE)
};
ActorLeader.prototype.checkBoundaries = function() {
    if (this.m_x > Application.APP_WIDTH + ActorLeader.THRESHOLD_X || 0 > this.m_x + ActorLeader.THRESHOLD_X || this.m_y > Application.APP_HEIGHT + ActorLeader.THRESHOLD_Y) this.gotoState(ActorLeader.STATE_AWAY_FROM_SCREEN), this.m_vy = this.m_vx = 0
};
ActorLeader.prototype.stop = function() {
    this.m_state == ActorLeader.STATE_RUNNING && this.gotoState(ActorLeader.STATE_GETTING_OUT_SCREEN)
};
ActorLeader.prototype.start = function(a, b) {
    this.m_vx = (Application.APP_WIDTH + 2 * ActorLeader.THRESHOLD_X) / a * b;
    0 < this.m_vx ? this.m_clip.setScaleX(1) : this.m_clip.setScaleX(-1);
    this.m_y = this.m_yBase;
    this.m_x = 0 < b ? -ActorLeader.THRESHOLD_X : Application.APP_WIDTH + ActorLeader.THRESHOLD_X;
    this.gotoState(ActorLeader.STATE_RUNNING)
};
ActorLeader.prototype.getOutTheScreen = function() {
    this.m_vy = ActorLeader.GET_OUT_SCREEN_VY;
    this.m_vx = 0;
    this.gotoState(ActorLeader.STATE_GETTING_OUT_SCREEN)
};
ActorLeader.prototype.gotoState = function(a) {
    ActorLeader.superClass_.gotoState.call(this, a)
};
ActorLeader.prototype.setSpeed = function(a, b) {
    this.m_vx = a;
    this.m_vy = b
};
ActorLeader.prototype.setPosition = function(a, b) {
    this.m_x = a;
    this.m_y = b
};
ActorLeader.prototype.update = function(a) {
    ActorLeader.superClass_.update.call(this, a);
    if (null !== this.m_clip) switch (this.m_clip.setX(this.m_x), this.m_clip.setY(this.m_y), 0 < this.m_vx ? this.m_clip.setScaleX(1) : this.m_clip.setScaleX(-1), this.m_state) {
        case ActorLeader.STATE_RUNNING:
            this.m_x += a / 1E3 * this.m_vx;
            this.checkBoundaries();
            break;
        case ActorLeader.STATE_GETTING_OUT_SCREEN:
            this.m_y += a / 1E3 * ActorLeader.GET_OUT_SCREEN_VY, this.checkBoundaries()
    }
};
ActorLeader.prototype.onEndAnimation = function(a) {};

function GameHandler(a) {
    this.m_playerIsActing = !1;
    this.m_world = a;
    this.m_canvas = GuiGame.instance.canvasMessage;
    this.m_actorsRef = this.m_world.getActorManager().getActors();
    this.m_actorManagerRef = this.m_world.getActorManager();
    this.m_actorLeaderRef = this.m_world.getActorLeader();
    this.m_arrowIndicator = Application.instance.getClip("mcArrow");
    this.m_arrowIndicator.setX(Application.APP_WIDTH / 2);
    this.m_arrowIndicator.setY(Application.APP_HEIGHT / 2 + 100);
    this.m_canvas.addChild(this.m_arrowIndicator.sprite);
    this.m_arrowIndicator.setVisible(!1);
    this.m_state = GameHandler.STATE_DOING_NOTHING;
    this.m_requestedAction = GameHandler.ACTION_DO_NOTHING;
    this.m_currentLinker = null;
    this.m_timeInState = 0;
    this.m_idleTime = 1;
    this.m_linkingTime = 4;
    this.m_goalCheckingTime = 0.5;
    this.m_loseTime = this.m_winTime = 1;
    this.m_blameTime = this.m_waveTime = 0.5;
    this.m_waveDirection = 1;
    this.m_playerFinishedEarly = this.m_playerPerformedOK = !1;
    this.m_map = this.m_world.getActorManager().getGridData();
    this.m_currentNode = [0, 0];
    this.m_tempPos = [0, 0];
    this.m_path = [];
    this.m_actorsPath = [];
    this.m_pathScore =
        0;
    this.m_baseScore = 10;
    this.m_baseScoreSoda = 50;
    this.m_isItTheFirstTime = !1;
    this.m_wavesGotRight = this.m_waveCount = 0;
    this.m_maxNumOfWaves = this.m_actorManagerRef.getNumOfWaves();
    this.m_maxTime = Application.config.minigame2[GameM2.BASE].maxTime;
    this.m_minTime = Application.config.minigame2[GameM2.BASE].minTime;
    this.m_timeChange = Application.config.minigame2[GameM2.FACTOR].timeChange;
    this.m_linkingTime = this.m_maxTime;
    this.m_linksPath = [];
    this.m_currentPoint = [0, 0];
    this.m_lastPoint = [0, 0];
    this.m_pointsInSteps = [];
    this.m_pointsInWave = [];
    this.m_mousePoints = [];
    this.m_movementDisplay = new SNode;
    this.m_showMovement = !1;
    this.showMovement(this.m_showMovement);
    this.m_mouseDownFlag = !1
}
GameHandler.STATE_DOING_NOTHING = 1;
GameHandler.STATE_LINKING_WAVE = 2;
GameHandler.STATE_GOAL_CHECKING = 3;
GameHandler.STATE_LINKED_OK = 4;
GameHandler.STATE_LINKED_WRONG = 5;
GameHandler.STATE_DOING_WAVE = 6;
GameHandler.STATE_BLAMIMG_PLAYER = 7;
GameHandler.STATE_RESPAWN_LEADER = 8;
GameHandler.ACTION_DO_NOTHING = 10;
GameHandler.ACTION_LINK_WAVE = 11;
GameHandler.ACTION_GOAL_CHECKING = 12;
GameHandler.ACTION_LINKED_OK = 13;
GameHandler.ACTION_LINKED_WRONG = 14;
GameHandler.ACTION_DO_WAVE = 15;
GameHandler.ACTION_BLAME_PLAYER = 16;
GameHandler.ACTION_RESPAWN_LEADER = 17;
GameHandler.COLLISION_STEP = 10;
GameHandler.prototype.showMovement = function(a) {
    (this.m_showMovement = a) ? (null === this.m_movementDisplay && (this.m_movementDisplay = new SNode), this.m_canvas.addChild(this.m_movementDisplay), this.m_movementDisplay.addDrawListener(this, "onDrawMovement")) : null !== this.m_movementDisplay && this.m_canvas.removeChild(this.m_movementDisplay)
};
GameHandler.prototype.onDrawMovement = function(a) {
    if (this.m_showMovement) {
        for (var b = 0; b < this.m_pointsInWave.length; b++) {
            var c = this.m_pointsInWave[b][0],
                d = this.m_pointsInWave[b][1];
            SGraphics.drawCircle(a, c, d, 2)
        }
        for (b = 0; b < this.m_mousePoints.length; b++) c = this.m_mousePoints[b][0], d = this.m_mousePoints[b][1], SGraphics.drawCircle(a, c, d, 4, Common.COLOR_RED)
    }
};
GameHandler.prototype.update = function(a) {
    if (!1 === GameM2.instance.hasGameFinished() && (this.m_timeInState += a / 1E3, this.m_arrowIndicator.update(a), this.gameLogic(), this.transition(), 0 < this.m_linksPath.length))
        for (var b = 0; b < this.m_linksPath.length; b++) this.m_linksPath[b].update(a)
};
GameHandler.prototype.resetThePath = function() {
    this.m_actorsPath = [];
    this.m_path = [];
    this.m_playerIsActing = this.m_isItTheFirstTime = !1;
    this.m_tempPos = [0, 0];
    this.m_currentNode = [-1E3, -1E3];
    this.m_pathScore = 0;
    this.m_pointsInWave = [];
    this.m_pointsInSteps = [];
    this.m_mousePoints = [];
    this.m_currentLinker = null
};
GameHandler.prototype.freeLinks = function() {
    if (0 < this.m_linksPath.length)
        for (var a = 0; a < this.m_linksPath.length; a++) this.m_linksPath[a].free();
    this.m_linksPath = []
};
GameHandler.prototype.getNextWave = function() {
    if (3 < this.m_waveCount) {
        var a = 3 + Math.floor((this.m_maxNumOfWaves - 3) * Math.random() + 1);
        this.m_actorManagerRef.refreshMatrixData(a)
    } else this.m_actorManagerRef.refreshMatrixData(this.m_waveCount + 1);
    this.m_linkingTime -= Math.abs(this.m_timeChange);
    this.m_linkingTime = this.m_linkingTime < this.m_minTime ? this.m_minTime : this.m_linkingTime
};
GameHandler.prototype.gameLogic = function() {
    HudM2.instance.setStatusTime(this.m_timeInState.toFixed(1));
    switch (this.m_state) {
        case GameHandler.STATE_DOING_NOTHING:
            HudM2.instance.setStatusMessage("doing nothing");
            this.m_arrowIndicator.setVisible(!0);
            0 < this.m_waveDirection ? this.m_arrowIndicator.setX(100) : this.m_arrowIndicator.setX(Application.APP_WIDTH - 100);
            this.m_timeInState > this.m_idleTime && (this.m_arrowIndicator.setVisible(!1), this.resetThePath(), this.m_requestedAction = GameHandler.ACTION_LINK_WAVE,
                this.m_actorLeaderRef.start(this.m_linkingTime, this.m_waveDirection));
            break;
        case GameHandler.STATE_LINKING_WAVE:
            HudM2.instance.setStatusMessage("linking wave " + this.m_waveDirection);
            !1 == this.checkGameSoFar() && (this.m_playerFinishedEarly = !0);
            this.m_timeInState > this.m_linkingTime ? (this.m_requestedAction = GameHandler.ACTION_GOAL_CHECKING, this.m_actorLeaderRef.getOutTheScreen()) : !0 == this.m_playerFinishedEarly && (this.m_actorLeaderRef.getOutTheScreen(), this.m_requestedAction = GameHandler.ACTION_GOAL_CHECKING,
                this.m_playerFinishedEarly = !1);
            break;
        case GameHandler.STATE_GOAL_CHECKING:
            HudM2.instance.setStatusMessage("Goal checking");
            this.m_timeInState > this.m_goalCheckingTime && (this.freeLinks(), this.checkGame(), !0 == this.m_playerPerformedOK ? (this.m_wavesGotRight += 1, this.showMessageDone(), HudM2.instance.setWaveCounter(this.m_wavesGotRight), this.m_requestedAction = GameHandler.ACTION_LINKED_OK, Global.app.playSound("dko_snd_crowd_cheer")) : (this.showMessageMiss(), this.m_requestedAction = GameHandler.ACTION_LINKED_WRONG));
            break;
        case GameHandler.STATE_LINKED_OK:
            HudM2.instance.setStatusMessage("linked ok");
            this.m_timeInState > this.m_winTime && (HudM2.instance.setScore(this.m_pathScore), this.m_requestedAction = GameHandler.ACTION_DO_WAVE, this.m_actorManagerRef.makeActorsCelebrate());
            break;
        case GameHandler.STATE_LINKED_WRONG:
            HudM2.instance.setStatusMessage("linked wrong");
            this.m_timeInState > this.m_loseTime && (GameM2.instance.addLife(-1), 1 > GameM2.instance.getLives() ? (HudM2.instance.setScore(this.m_pathScore), this.m_requestedAction =
                GameHandler.ACTION_DO_WAVE, this.m_actorManagerRef.makeActorsCelebrate()) : (HudM2.instance.setScore(this.m_pathScore), this.m_requestedAction = GameHandler.ACTION_BLAME_PLAYER, this.m_actorManagerRef.makeActorsBlame()));
            break;
        case GameHandler.STATE_DOING_WAVE:
            HudM2.instance.setStatusMessage("doing wave");
            this.m_timeInState > this.m_waveTime && (this.m_waveDirection = 0.5 <= Math.random() ? 1 : -1, this.m_waveCount += 1, this.m_arrowIndicator.setScaleX(this.m_waveDirection), this.getNextWave(), this.m_requestedAction = GameHandler.ACTION_DO_NOTHING);
            break;
        case GameHandler.STATE_BLAMIMG_PLAYER:
            HudM2.instance.setStatusMessage("blaming player"), this.m_timeInState > this.m_blameTime && (this.m_waveDirection = 0.5 <= Math.random() ? 1 : -1, this.m_waveCount += 1, this.m_arrowIndicator.setScaleX(this.m_waveDirection), this.getNextWave(), this.m_requestedAction = GameHandler.ACTION_DO_NOTHING, this.m_arrowIndicator.setVisible(!0))
    }
};
GameHandler.prototype.reset = function() {
    this.m_timeInState = 0
};
GameHandler.prototype.transition = function() {
    switch (this.m_state) {
        case GameHandler.STATE_DOING_NOTHING:
            this.m_requestedAction === GameHandler.ACTION_LINK_WAVE && (this.m_state = GameHandler.STATE_LINKING_WAVE, this.m_timeInState = 0);
            break;
        case GameHandler.STATE_LINKING_WAVE:
            this.m_requestedAction === GameHandler.ACTION_GOAL_CHECKING && (this.m_state = GameHandler.STATE_GOAL_CHECKING, this.m_timeInState = 0);
            break;
        case GameHandler.STATE_GOAL_CHECKING:
            this.m_requestedAction === GameHandler.ACTION_LINKED_OK ? (this.m_state =
                GameHandler.STATE_LINKED_OK, this.m_timeInState = 0) : this.m_requestedAction === GameHandler.ACTION_LINKED_WRONG && (this.m_state = GameHandler.STATE_LINKED_WRONG, this.m_timeInState = 0);
            break;
        case GameHandler.STATE_LINKED_OK:
            this.m_requestedAction === GameHandler.ACTION_DO_WAVE && (this.m_state = GameHandler.STATE_DOING_WAVE, this.m_timeInState = 0);
            break;
        case GameHandler.STATE_LINKED_WRONG:
            this.m_requestedAction === GameHandler.ACTION_BLAME_PLAYER && (this.m_state = GameHandler.STATE_BLAMIMG_PLAYER, this.m_timeInState = 0);
            break;
        case GameHandler.STATE_DOING_WAVE:
            this.m_requestedAction === GameHandler.ACTION_DO_NOTHING && (this.m_state = GameHandler.STATE_DOING_NOTHING, this.m_timeInState = 0);
            break;
        case GameHandler.STATE_BLAMIMG_PLAYER:
            this.m_requestedAction === GameHandler.ACTION_DO_NOTHING && (this.m_state = GameHandler.STATE_DOING_NOTHING, this.m_timeInState = 0)
    }
};
GameHandler.prototype.checkGameSoFar = function() {
    var a = 0 < this.m_waveDirection ? 0 : 8,
        b = 0 < this.m_waveDirection ? 8 : 0;
    if (!0 == this.m_playerIsActing)
        if (0 < this.m_path.length) {
            if (this.m_path[0][1] !== a) return !1;
            if (1 < this.m_path.length) {
                for (a = 0; a < this.m_path.length - 1; a++) {
                    if (!1 == this.areNodesAdjacent(this.m_path[a], this.m_path[a + 1])) return !1;
                    if (this.m_path[a + 1][1] === b) {
                        this.m_playerFinishedEarly = !0;
                        break
                    }
                }
                return !0
            }
        } else return !0
};
GameHandler.prototype.checkGame = function() {
    if (0 < this.m_path.length) {
        var a = 0 < this.m_waveDirection ? 8 : 0;
        this.m_path[0][1] == (0 < this.m_waveDirection ? 0 : 8) && this.m_path[this.m_path.length - 1][1] == a && !0 === this.isPathOk() ? this.m_playerPerformedOK = !0 : this.m_playerPerformedOK = !1
    } else this.m_playerPerformedOK = !1
};
GameHandler.prototype.onMouseDown = function(a) {
    this.m_state == GameHandler.STATE_LINKING_WAVE && (this.m_isItTheFirstTime = this.m_playerIsActing = !0, this.m_currentPoint[0] = a.offsetX, this.m_currentPoint[1] = a.offsetY, this.m_pointsInWave.push([a.offsetX, a.offsetY]), this.m_mousePoints.push([a.offsetX, a.offsetY]), this.m_pointsInSteps.push([a.offsetX, a.offsetY]), this.m_mouseDownFlag = !0, !0 == this.checkForActor(a.offsetX, a.offsetY) && (a = new Linker(this.m_canvas, this.m_world, a.offsetX, a.offsetY), this.m_linksPath.push(a),
        this.m_currentLinker = a))
};
GameHandler.prototype.calculateStepPoints = function(a, b, c, d) {
    for (var e = c - a, f = d - b, g = Math.sqrt(e * e + f * f), h = GameHandler.COLLISION_STEP, k = Math.floor(g / h), l = [], m = 0; m < k; m++) l.push([a + e / g * m * h, b + f / g * m * h]);
    l.push([c, d]);
    return l
};
GameHandler.prototype.onMouseMove = function(a) {
    if (this.m_state == GameHandler.STATE_LINKING_WAVE && !0 == this.m_playerIsActing) {
        this.m_lastPoint[0] = this.m_currentPoint[0];
        this.m_lastPoint[1] = this.m_currentPoint[1];
        this.m_currentPoint[0] = a.offsetX;
        this.m_currentPoint[1] = a.offsetY;
        this.m_pointsInSteps = this.calculateStepPoints(this.m_lastPoint[0], this.m_lastPoint[1], this.m_currentPoint[0], this.m_currentPoint[1]);
        for (var b = 0; b < this.m_pointsInSteps.length; b++) this.m_pointsInWave.push([this.m_pointsInSteps[b][0],
            this.m_pointsInSteps[b][1]
        ]);
        this.m_pointsInWave.push([this.m_currentPoint[0], this.m_currentPoint[1]]);
        this.m_mousePoints.push([this.m_currentPoint[0], this.m_currentPoint[1]]);
        null !== this.m_currentLinker && this.m_currentLinker.setEndPoint(a.offsetX, a.offsetY);
        for (a = 0; a < this.m_pointsInSteps.length; a++) b = [this.m_pointsInSteps[a][0], this.m_pointsInSteps[a][1]], !0 == this.checkForActor(b[0], b[1]) && (null !== this.m_currentLinker && this.m_currentLinker.drop(), b = new Linker(this.m_canvas, this.m_world, b[0], b[1]),
            this.m_linksPath.push(b), this.m_currentLinker = b, Global.app.playSound("dko_snd_power1"))
    }
};
GameHandler.prototype.onMouseUp = function(a) {
    this.m_state == GameHandler.STATE_LINKING_WAVE && 0 < this.m_path.length && (this.m_playerFinishedEarly = !0, null !== this.m_currentLinker && this.m_currentLinker.drop());
    this.m_isItTheFirstTime = this.m_playerIsActing = !1
};
GameHandler.prototype.checkForNewNode = function(a) {
    var b = !0,
        c = a[1] == this.m_currentNode[1];
    a[0] == this.m_currentNode[0] && c ? b = !1 : c ? b = !1 : 0 < this.m_waveDirection ? -1E3 !== this.m_currentNode[1] && a[1] < this.m_currentNode[1] && (b = !1) : 0 > this.m_waveDirection && -1E3 !== this.m_currentNode[1] && a[1] > this.m_currentNode[1] && (b = !1);
    !0 === b && (this.m_path.push(a), this.m_currentNode = a);
    return b
};
GameHandler.prototype.checkForActor = function(a, b) {
    for (var c = 0; c < this.m_actorsRef.length; c++)
        if (!0 == this.m_actorsRef[c].hitTestPoint(a, b)) {
            var d = this.m_actorsRef[c].getPosInGrid();
            if (this.m_actorsRef[c].m_actorType === SpectatorM2.TYPE_GRUMPY) {
                this.m_playerFinishedEarly = !0;
                this.m_actorsRef[c].gotoState(SpectatorM2.ST_DOING_NOTHING_ANNOYED);
                Global.app.playSound("dko_minigame_error");
                break
            }
            if (!0 == this.m_isItTheFirstTime) return this.m_isItTheFirstTime = !1, this.m_actorsRef[c].gotoState(SpectatorM2.ST_DOING_WAVE),
            this.m_actorsPath.push(c), !0;
            if (this.checkForNewNode(d)) return this.m_actorsRef[c].gotoState(SpectatorM2.ST_DOING_WAVE), this.m_actorsPath.push(c), !0
        }
    return !1
};
GameHandler.prototype.checkIfTouchedActor = function(a, b, c) {
    b = a.m_x - b;
    a = a.m_y - c;
    return 20 > Math.sqrt(b * b + a * a) ? !0 : !1
};
GameHandler.prototype.debug_makeActorsWave = function() {
    for (var a = 0; a < this.m_actorsPath.length; a++) this.m_actorsRef[this.m_actorsPath[a]].gotoState(SpectatorM2.ST_DOING_WAVE)
};
GameHandler.prototype.debug_makeActorsDizzy = function() {
    for (var a = 0; a < this.m_actorsRef.length; a++) this.m_actorsRef[a].gotoState(SpectatorM2.ST_BLAMING)
};
GameHandler.prototype.debug_makeActorsDoNothing = function() {
    for (var a = 0; a < this.m_actorsRef.length; a++) this.m_actorsRef[a].gotoState(SpectatorM2.ST_DOING_NOTHING)
};
GameHandler.prototype.manhattanDistance = function(a, b) {
    return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1])
};
GameHandler.prototype.areNodesAdjacent = function(a, b) {
    var c = Math.abs(a[0] - b[0]),
        d = Math.abs(a[1] - b[1]);
    return 2 > c && 2 > d ? !0 : !1
};
GameHandler.prototype.hasChangedLane = function(a, b) {
    return 0 < Math.abs(a[1] - b[1])
};
GameHandler.prototype.isPathOk = function() {
    for (var a = 0, b = 0, c = 0, d = 0; d < this.m_path.length - 1; d++) {
        if (!1 == this.areNodesAdjacent(this.m_path[d], this.m_path[d + 1])) return this.m_pathScore = 0, !1;
        a++;
        this.m_pathScore += this.m_baseScore * Math.pow(this.manhattanDistance(this.m_path[d], this.m_path[d + 1]), 3);
        this.m_actorsRef[this.m_actorsPath[d]].getActorType() === SpectatorM2.TYPE_DRINKING_HAPPY && (this.m_pathScore += this.m_baseScoreSoda, b++);
        this.hasChangedLane(this.m_path[d], this.m_path[d + 1]) && c++
    }
    GameM2.instance.addPeopleTouched(a);
    GameM2.instance.addSpecialPeopleTouched(b);
    GameM2.instance.addLaneChange(c);
    return !0
};
GameHandler.prototype.onGameEnd = function(a) {
    this.freeLinks();
    this.m_arrowIndicator.setVisible(!1);
    for (var b = 0; b < this.m_actorsRef.length; b++) this.m_actorsRef[b].onGameEnd();
    this.m_actorManagerRef.makeActorsCelebrate();
    this.m_actorLeaderRef.onGameEnd(a)
};
GameHandler.prototype.showMessageDone = function() {
    HudM2.instance.callback = "onEndMessageDone";
    HudM2.instance.targetCallback = this;
    HudM2.instance.doMsg(Application.strings.STR_MINIGAME2_GREAT, 1)
};
GameHandler.prototype.showMessageMiss = function() {
    HudM2.instance.callback = "onEndMessageMiss";
    HudM2.instance.targetCallback = this;
    HudM2.instance.doMsg(Application.strings.STR_MINIGAME2_MISS, 1)
};
GameHandler.prototype.onEndMessageDone = function() {};
GameHandler.prototype.onEndMessageMiss = function() {};

function Linker(a, b, c, d) {
    ActorM2.call(this, a, b, c, d);
    this.m_character = this.m_clip = null;
    this.m_endY = this.m_endX = this.m_startY = this.m_startX = 0;
    this.m_linkBaseWidth = 100;
    this.m_currentScale = 0.1;
    this.m_angle = 0;
    this.m_isLinkActive = !1;
    this.initLink(c, d, a)
}
goog.inherits(Linker, ActorM2);
Linker.ST_NORMAL = 1;
Linker.prototype.initLink = function(a, b, c) {
    this.m_character = new Character(a, b, c);
    this.m_character.addState(Linker.ST_NORMAL, "mcLine");
    this.m_character.onEndAnimation = "onEndAnimation";
    this.m_character.worldActor = this;
    this.gotoState(Linker.ST_NORMAL);
    this.m_startX = this.m_endX = a;
    this.m_startY = this.m_endY = b;
    this.m_currentScale = 0.1;
    this.m_clip.setScaleX(this.m_currentScale);
    this.m_isLinkActive = !0;
    this.m_angle = 0;
    this.m_linkBaseWidth = this.m_clip.width
};
Linker.prototype.update = function(a) {
    Linker.superClass_.update.call(this, a);
    !0 == this.m_isLinkActive && (this.recalculateDimensions(), this.applyNewDimensions())
};
Linker.prototype.setDropPosition = function() {
    !1 === this.m_isLinkActive && (this.recalculateDimensions(), this.applyNewDimensions(), this.update(0))
};
Linker.prototype.applyNewDimensions = function() {
    null !== this.m_clip && (this.m_clip.setRotation(this.m_angle), this.m_clip.setScaleX(this.m_currentScale))
};
Linker.prototype.setEndPoint = function(a, b) {
    this.m_endX = a;
    this.m_endY = b
};
Linker.prototype.setStartPoint = function(a, b) {
    this.m_startX = a;
    this.m_startY = b
};
Linker.prototype.recalculateDimensions = function() {
    var a = this.polar(this.m_startX, this.m_startY, this.m_endX, this.m_endY),
        b = a[1];
    this.m_currentScale = a[0] / this.m_linkBaseWidth;
    this.m_angle = b
};
Linker.prototype.polar = function(a, b, c, d) {
    a = c - a;
    d -= b;
    b = Math.sqrt(a * a + d * d);
    d = 180 * Math.atan2(d, a) / Math.PI;
    return [b, d]
};
Linker.prototype.drop = function() {
    this.m_isLinkActive = !1;
    this.setDropPosition()
};
Linker.prototype.onEndAnimation = function(a) {};

function GameRunner(a, b) {
    SGame.call(this, a);
    this.inTransition = this.playerWin = this.isPaused = !1;
    this.m_canvas._sorted = !0;
    this.m_reset = !1;
    this.m_world = null;
    this.m_collisionVisible = this.m_finish = !1;
    this.m_dataGeneral = b;
    this.m_usePerpective = !1;
    var c = Application.config.minigameRunner[10].usePerspective;
    "number" === typeof c && (this.m_usePerpective = 1 === c ? !0 : !1);
    this.m_config = Application.config.configMinigames;
    this.m_maxLives = this.m_lives = this.m_config.livesMinigame3;
    this.m_totalTime = 1E3 * this.m_config.timeMinigame3;
    this.m_sodaLifeCounter = this.m_sodaCounter = this.m_score = 0;
    GameRunner.instance = this;
    ControlTouch.instance.setMultitouchGame(!1);
    this.reset();
    this.m_extraLifeThreshold = 3;
    this.m_sodaScoreMultiplier = this.m_config.minigame3SodaScore;
    this.m_timeScoreMultiplier = this.m_config.minigame3TimeScore;
    this.m_lifeScoreMultiplier = this.m_config.minigame3LifeScore;
    this.m_minigameLowThreshold = this.m_config.minigameLowThreshold;
    this.m_minigameMidThreshold = this.m_config.minigameMidThreshold;
    this.m_minigameHighThreshold =
        this.m_config.minigameHighThreshold;
    this.m_gameFinished = this.m_isSkip = !1;
    Global.app.stopAllSounds();
    Global.app.playSound("dko_mus_minigame")
}
goog.inherits(GameRunner, SGame);
GameRunner.MAX_DELTA = 50;
GameRunner.instance = null;
GameRunner.prototype.onGetSoda = function() {
    this.m_sodaCounter += 1;
    this.m_sodaLifeCounter += 1;
    this.m_score += this.m_sodaScoreMultiplier
};
GameRunner.prototype.getExtraLifeThreshold = function(a) {
    return this.m_extraLifeThreshold
};
GameRunner.prototype.isUssingPerspective = function() {
    return this.m_usePerpective
};
GameRunner.prototype.setScore = function(a) {
    this.m_score = a
};
GameRunner.prototype.getScore = function() {
    return this.m_score
};
GameRunner.prototype.setSodaCounter = function(a) {
    this.m_sodaCounter = a
};
GameRunner.prototype.getSodaCounter = function() {
    return this.m_sodaCounter
};
GameRunner.prototype.addLife = function(a) {
    this.m_lives += a;
    HudRunner.instance.onRefreshLives();
    if (0 > a)
        if (1 > this.m_lives) this.onGameEnd(!1);
        else HudRunner.instance.setLives(this.m_lives);
        else HudRunner.instance.setLives(this.m_lives)
};
GameRunner.prototype.free = function() {
    GameRunner.superClass_.free.call(this)
};
GameRunner.prototype.init = function() {
    this.m_hud = new HudRunner(0, 0)
};
GameRunner.prototype.lives = function() {
    return this.m_lives
};
GameRunner.prototype.onKeyDown = function(a) {
    GameRunner.superClass_.onKeyDown.call(this, a);
    a == Common.KEY_1 ? Global.game_mode !== Global.mode_tournament && (this.onGameEnd(!0), Global.level = 2, GuiManager.instance.gotoScreen(GuiManager.SC_GAME)) : a == Common.KEY_2 ? Global.game_mode !== Global.mode_tournament && (this.onGameEnd(!0), Global.level = 3, GuiManager.instance.gotoScreen(GuiManager.SC_GAME)) : a == Common.KEY_3 && Global.game_mode !== Global.mode_tournament && (this.onGameEnd(!0), Global.level = 4, GuiManager.instance.gotoScreen(GuiManager.SC_GAME));
    if (!1 == this.m_finish) this.m_world.onKeyDown(a)
};
GameRunner.prototype.onMouseDown = function(a) {
    GameRunner.superClass_.onMouseDown.call(this, a);
    this.m_world.onMouseDown(a)
};
GameRunner.prototype.onGameEnd = function(a) {
    var b = a;
    this.m_gameFinished = a = !0;
    !0 === this.m_isSkip ? (this.m_world.player().onGameEnd(!1), HudRunner.instance.callback = "onEndGameCallback", HudRunner.instance.targetCallback = this, HudRunner.instance.doMsg("", Application.config.configMinigames.minigame3EndTime)) : (this.m_world.player().onGameEnd(a), HudRunner.instance.callback = "onEndGameCallback", HudRunner.instance.targetCallback = this, a = b ? Application.strings.STR_MINIGAME3_GOOD_JOB : Application.strings.STR_MINIGAME3_GOOD_ENOUGH,
        HudRunner.instance.doMsg(a, 1.5 * Application.config.configMinigames.minigame3EndTime), this.m_score += this.m_lives * this.m_lifeScoreMultiplier, this.m_score += Math.floor(HudRunner.instance.timeElapsed() * this.m_timeScoreMultiplier / 1E3), Global.minigameScore = this.m_score, Global.mickeyEarned = 0, this.m_score >= this.m_config.minigameHighThreshold ? (Global.mickeyEarned = 3, 3 <= Global.mickeyShots ? Global.extraMickeyShot = 1 : (Global.mickeyEarned = 3 - Global.mickeyShots, Global.mickeyShots = 3), Global.extraTime = this.m_config.minigameHighPrizeTime) :
        this.m_score >= this.m_config.minigameMidThreshold ? (3 === Global.mickeyShots ? Global.boostOn = 1 : (Global.mickeyEarned = 1, Global.mickeyShots++), Global.extraTime = this.m_config.minigameMidPrizeTime) : this.m_score >= this.m_config.minigameLowThreshold && (Global.boostOn = 1, Global.extraTime = this.m_config.minigameLowPrizeTime))
};
GameRunner.prototype.onMouseMove = function(a) {
    GameRunner.superClass_.onMouseMove.call(this, a);
    this.m_world.onMouseMove(a)
};
GameRunner.prototype.onMouseUp = function(a) {
    GameRunner.superClass_.onMouseUp.call(this, a);
    this.m_world.onMouseUp(a)
};
GameRunner.prototype.onMouseOutWindow = function(a) {
    GameRunner.superClass_.onMouseOutWindow.call(this, a);
    this.m_world.onMouseOutWindow(a)
};
GameRunner.prototype.reset = function() {
    this.m_world && (this.m_world.free(), this.m_world = null);
    this.m_world = new WorldRunner(this.m_canvas, this);
    this.m_world.loadData(this.m_dataGeneral);
    this.m_reset = !1;
    HudRunner.instance.setLives(this.m_lives)
};
GameRunner.prototype.totalTime = function() {
    return this.m_totalTime
};
GameRunner.prototype.onEndGameCallback = function() {
    !1 === this.m_isSkip && GuiGame.instance.addPopup(GuiPopupMinigameReward, 0, 0);
    this.m_finish = !0
};
GameRunner.prototype.update = function(a) {
    this.m_reset ? (this.reset(), ControlTouch.instance.resetTouchControl()) : this.m_finish ? GuiGame.instance && (ControlTouch.instance.resetTouchControl(), Global.level = 1, GuiManager.instance.gotoScreen(GuiManager.SC_GAME)) : (a > GameRunner.MAX_DELTA && (a = GameRunner.MAX_DELTA), this.m_sodaLifeCounter >= this.m_extraLifeThreshold && (this.m_lives < this.m_maxLives && (this.addLife(1), HudRunner.instance.onRefreshLives(!0)), this.m_sodaLifeCounter = 0), GameRunner.superClass_.update.call(this,
        a), this.m_world.update(a))
};
GameRunner.prototype.world = function() {
    return this.m_world
};
GameRunner.prototype.getLives = function() {
    return this.m_lives
};
GameRunner.prototype.setLives = function(a) {
    this.m_lives = a
};
GameRunner.prototype.getMaxLives = function() {
    return this.m_maxLives
};
GameRunner.prototype.onSkipMinigame = function() {
    !1 === this.m_gameFinished && (this.m_isSkip = !0, this.onGameEnd(!1))
};

function WorldRunner(a, b) {
    this.playerInitY = this.playerInitX = 0;
    this.useEmbeddedAssets = !1;
    this.m_rangeTilesBelow = 0;
    this.m_game = b;
    this.m_objectsCanvas = [];
    this.m_player = null;
    this.m_pointY = this.m_pointX = this.m_height = this.m_widht = 0;
    this.m_effectManager = this.m_worldData = this.m_collectableManager = this.m_actorManager = this.m_camera = null;
    this.m_actorManagerUpdateFlag = !1;
    this.m_actorManagerUpdateTimer = 2E3;
    this.m_amountEnemies3 = this.m_amountEnemies2 = this.m_amountEnemies1 = 0;
    this.canvas = a;
    this.m_tempNpc = null;
    var c =
        Application.instance.getClip("mcBgMinigame3");
    this.canvas.addChild(c.sprite);
    this.initLayers();
    this.m_focusX = 375;
    this.m_focusY = -500;
    GuiPopupHelpMinigame.minigame_select = GuiPopupHelpMinigame.MINIGAME_3;
    GuiGame.instance.addPopup(GuiPopupHelpMinigame, 0, 0)
}
WorldRunner.TIME_CYCLE = 1E3;
WorldRunner.MAX_DELTA_TIME = 50;
WorldRunner.prototype.getActorManager = function() {
    return this.m_actorManager
};
WorldRunner.prototype.getFocus = function() {
    return [this.m_focusX, this.m_focusY]
};
WorldRunner.prototype.camera = function() {
    return this.m_camera
};
WorldRunner.prototype.free = function() {
    this.m_camera.free();
    this.m_effectManager = this.m_worldData = this.m_camera = null;
    null !== this.m_player && (this.m_player.free(), this.m_player = null);
    this.m_actorManager.free();
    this.m_actorManager = null;
    this.m_playerCanvas != this.m_objectsCanvas[0] && (this.canvas.removeChild(this.m_playerCanvas), this.m_playerCanvas = null);
    for (var a = 0; a < this.m_objectsCanvas.length; a++) this.canvas.removeChild(this.m_objectsCanvas[a]);
    this.m_objectsCanvas = null
};
WorldRunner.prototype.getData = function(a, b) {
    return null === a ? null : null === b ? null : a[b] ? a[b] : null
};
WorldRunner.prototype.height = function() {
    return this.m_height
};
WorldRunner.prototype.init = function() {
    WorldRunner.superClass_.init.call(this);
    this.m_camera.gotoState(CameraRunner.ST_CAMERA_FREE);
    this.m_camera.setX(0);
    this.m_camera.setY(0)
};
WorldRunner.prototype.initLayers = function() {
    var a = Application.instance.addDisplayContainer();
    a._sorted = !0;
    this.canvas.addChild(a);
    this.m_objectsCanvas.push(a);
    this.m_objectsCanvas.push(this.canvas);
    this.m_playerCanvas = Application.instance.addDisplayContainer();
    this.canvas.addChild(this.m_playerCanvas)
};
WorldRunner.prototype.loadData = function(a) {
    this.m_worldData = window[a];
    a = this.m_worldData.properties;
    this.m_width = this.getData(a, "width");
    this.m_height = this.getData(a, "height");
    this.useEmbeddedAssets = this.getData(a, "useEmbeddedAssets");
    this.m_worldData = Application.config.minigameRunner;
    this.m_amountEnemies1 = this.m_worldData[2].amount;
    this.m_amountEnemies2 = this.m_worldData[4].amount;
    this.m_amountEnemies3 = this.m_worldData[6].amount;
    this.playerInitX = this.m_worldData[0].initX;
    this.playerInitY = this.m_worldData[0].initY;
    this.m_player = new PlayerRunner(this.objectCanvas(), this, this.playerInitX, this.playerInitY, this.m_worldData);
    this.cameraWidth = Application.APP_WIDTH;
    this.cameraHeight = Application.APP_HEIGHT;
    this.m_camera = new CameraRunner(this, this.cameraWidth, this.cameraHeight, 0, 0, 0, 0);
    this.m_actorManager = new ActorManagerRunner(this);
    this.m_actorManager.init(this.m_player);
    this.m_actorManager.setUpdateableObject(this.m_player);
    this.m_collectableManager = new CollectablesManager(this)
};
WorldRunner.prototype.objectCanvas = function() {
    return this.m_objectsCanvas[0]
};
WorldRunner.prototype.onKeyDown = function(a) {};
WorldRunner.prototype.onMouseDown = function(a) {
    if (this.m_player) this.m_player.onClick(a)
};
WorldRunner.prototype.onGameEnd = function(a) {
    this.m_player.onGameEnd(a)
};
WorldRunner.prototype.onMouseMove = function(a) {
    if (this.m_player) this.m_player.onMove(a)
};
WorldRunner.prototype.onMouseUp = function(a) {
    if (this.m_player) this.m_player.onRelease(a)
};
WorldRunner.prototype.onMouseOutWindow = function(a) {
    if (this.m_player) this.m_player.onRelease(a)
};
WorldRunner.prototype.player = function() {
    return this.m_player
};
WorldRunner.prototype.setScale = function(a) {};
WorldRunner.prototype.update = function(a) {
    a > WorldRunner.MAX_DELTA_TIME && (a = WorldRunner.MAX_DELTA_TIME);
    this.m_actorManagerUpdateFlag || (this.m_actorManagerUpdateTimer -= a, this.m_actorManagerUpdateFlag = 0 >= this.m_actorManagerUpdateTimer);
    this.m_actorManager && this.m_actorManagerUpdateFlag && this.m_actorManager.update(a);
    this.m_collectableManager && this.m_collectableManager.update(a);
    this.m_player && (this.m_player.update(a), this.m_player.showInCamera(this.m_camera), this.m_camera.update(a))
};
WorldRunner.prototype.width = function() {
    return this.m_width
};

function CameraRunner(a, b, c, d, e, f, g) {
    this.m_x = "undefined" !== typeof f ? f : 0;
    this.m_y = "undefined" !== typeof g ? g : 0;
    this.m_world = a;
    this.width = b;
    this.height = c;
    this.screenX = "undefined" !== typeof d ? d : 0;
    this.screenY = "undefined" !== typeof e ? e : 0;
    this.parallaxX = this.m_world.width() > this.width;
    this.parallaxY = this.m_world.height() > this.height;
    this.gotoState(CameraRunner.ST_CAMERA_FREE)
}
CameraRunner.ST_CAMERA_FREE = 1;
CameraRunner.prototype.update = function(a) {};
SCC_Camera.prototype.free = function() {
    this.m_world = null
};
CameraRunner.prototype.x = function() {
    return this.m_x
};
CameraRunner.prototype.y = function() {
    return this.m_y
};
CameraRunner.prototype.gotoState = function(a) {
    this.m_state != a && (this.m_state = a)
};

function ActorManagerRunner(a) {
    this.m_maxIndex = this.m_minIndex = this.m_maxX = this.m_minX = 0;
    this.m_updateableObject = this.m_player = null;
    this.m_world = a;
    this.m_height = this.m_width = 0;
    this.m_buffer = [];
    this.m_actors = [];
    this.visibleWidth = 750;
    this.visibleHeight = 500;
    this.m_numOfWaves = this.m_activeSounds = this.m_currentSound = this.enemy3Increase = this.enemy3Counter = this.enemy2Increase = this.enemy2Counter = this.enemy1Increase = this.enemy1Counter = 0;
    this.m_waves = [];
    this.m_deadline = this.m_currentTime = this.m_currentWave =
        0;
    this.readConfigData();
    this.m_waveOfActors = []
}
ActorManagerRunner.ACTORS_OFFSET_Y = 20;
ActorManagerRunner.prototype.readConfigData = function() {
    var a = Application.config.wavesRunner;
    this.m_numOfWaves = a.length;
    for (var b = 0; b < this.m_numOfWaves; b++) {
        for (var c = {}, d = a[b].numOfEnemies, e = a[b].timeToAppear, f = [], g = 1; g <= d; g++) {
            var h = {};
            h.type = a[b]["typeEnemy" + g];
            f.push(h)
        }
        c.enemies = f;
        c.enemiesInWave = d;
        c.timeForWave = e;
        this.m_waves.push(c)
    }
    this.m_waves.sort(function(a, b) {
        return a.timeForWave - b.timeForWave
    });
    this.m_deadline = this.m_waves[this.m_currentWave].timeForWave;
    this.initWavesOfActors()
};
ActorManagerRunner.prototype.initWavesOfActors = function() {
    for (var a = 0; a < this.m_waves.length; a++)
        for (var b = [0, 0, 0, 0, 0, 0], c = 0; c < this.m_waves[a].enemies.length; c++) {
            var d = this.getNextLane(b);
            b[d] += 1;
            switch (this.m_waves[a].enemies[c].type) {
                case "simple":
                    this.addEnemy(2, d, a, b[d] * ActorManagerRunner.ACTORS_OFFSET_Y);
                    break;
                case "laneChange":
                    this.addEnemy(4, d, a, b[d] * ActorManagerRunner.ACTORS_OFFSET_Y);
                    break;
                case "stalker":
                    this.addEnemy(6, d, a, b[d] * ActorManagerRunner.ACTORS_OFFSET_Y)
            }
        }
};
ActorManagerRunner.prototype.add = function(a) {
    a.setManager(this);
    this.m_actors.push(a);
    return a
};
ActorManagerRunner.prototype.addEnemy = function(a, b, c, d) {
    this.add(new EnemyRunner(this.m_world.objectCanvas(), this.m_world, 100, 1E3, a, "minigameRunner", b, c, d))
};
ActorManagerRunner.prototype.free = function() {
    for (var a = 0; a < this.m_actors.length; a++) this.m_actors[a].free(), this.m_actors[a] = null;
    this.m_laneOffset = this.m_laneSlope = this.m_horizontalLaneTop = this.m_horizontalLaneBot = this.m_updateableObject = this.m_player = this.m_world = this.m_actors = null
};
ActorManagerRunner.prototype.getActors = function() {
    return this.m_actors
};
ActorManagerRunner.prototype.getUpdateableObject = function() {
    return this.m_updateableObject
};
ActorManagerRunner.prototype.init = function(a) {
    this.m_player = a
};
ActorManagerRunner.prototype.removeActorFromWave = function(a) {
    for (var b = 0; b < this.m_waveOfActors.length; b++) a == this.m_waveOfActors[b] && this.m_waveOfActors.splice(this.m_waveOfActors.indexOf(a), 1);
    this.m_activeSounds -= 1;
    0 > this.m_activeSounds && (this.m_activeSounds = 0)
};
ActorManagerRunner.prototype.actorSound = function() {
    if (!(this.m_activeSounds > ActorManagerRunner.MAX_SOUNDS)) return this.m_activeSounds += 1, this.m_currentSound += 1, this.m_currentSound > ActorManagerRunner.MAX_SOUNDS && (this.m_currentSound = 1), this.m_currentSound
};
ActorManagerRunner.prototype.getCurrentWaveOfActors = function() {
    return this.m_waveOfActors
};
ActorManagerRunner.prototype.reset = function() {
    for (var a = 0; a < this.m_actors.length; a++) this.m_actors[a].free(), this.m_actors[a] = null;
    this.m_actors = null;
    this.m_actors = []
};
ActorManagerRunner.prototype.setUpdateableObject = function(a) {
    this.m_updateableObject = a
};
ActorManagerRunner.prototype.getActorFromPool = function(a, b) {
    for (var c = 0; c < this.m_actors.length; c++)
        if (this.m_actors[c].getID() == a && this.m_actors[c].getWaveIBelongTo() == b) return this.m_actors.splice(c, 1)[0];
    return null
};
ActorManagerRunner.prototype.getNextLane = function(a) {
    for (var b = a[0], c = 1; c < a.length; c++) b = b > a[c] ? a[c] : b;
    for (var c = [], d = 0; d < a.length; d++) a[d] === b && c.push(d);
    return Common.getRandomFromArray(c)
};
ActorManagerRunner.prototype.getNextWaveOfActors = function(a) {
    for (var b = 0; b < a.enemiesInWave; b++) {
        var c = null;
        switch (a.enemies[b].type) {
            case "simple":
                c = this.getActorFromPool(2, this.m_currentWave);
                break;
            case "laneChange":
                c = this.getActorFromPool(4, this.m_currentWave);
                break;
            case "stalker":
                c = this.getActorFromPool(6, this.m_currentWave)
        }
        null !== c && this.m_waveOfActors.push(c)
    }
};
ActorManagerRunner.prototype.update = function(a) {
    this.m_currentTime += a / 1E3;
    this.m_currentTime > this.m_deadline && (this.getNextWaveOfActors(this.m_waves[this.m_currentWave]), this.m_currentWave = (this.m_currentWave + 1) % this.m_waves.length, this.m_deadline = this.m_waves[this.m_currentWave].timeForWave);
    if (0 < this.m_waveOfActors.length)
        for (var b = 0; b < this.m_waveOfActors.length; b++) null !== this.m_waveOfActors[b] && "undefined" !== typeof this.m_waveOfActors[b] && void 0 !== this.m_waveOfActors[b] && this.m_waveOfActors[b].update(a),
    null !== this.m_waveOfActors[b] && "undefined" !== typeof this.m_waveOfActors[b] && void 0 !== this.m_waveOfActors[b] && this.m_waveOfActors[b].showInCamera(this.m_world.camera())
};
ActorManagerRunner.MAX_SOUNDS = 3;

function ActorRunner(a, b, c, d, e, f) {
    this.m_state = 0;
    e = b.getFocus();
    this.m_focusX = e[0];
    this.m_focusY = e[1];
    this.m_minScale = this.m_currentScale = 0.5;
    this.m_tempPosY = this.m_tempPosX = this.m_oldY = this.m_oldX = this.m_y = this.m_x = 0;
    this.m_scaleY = this.m_scaleX = this.m_scale = 1;
    this.m_maxTolerance = this.m_timeToDisplace = this.m_speedY = this.m_speedX = null;
    this.m_bounds = new Rectangle;
    this.m_boundsScaleY = this.m_boundsScaleX = 1;
    this.m_manager = this.m_character = this.m_clip = null;
    this.m_canvas = a;
    this.m_world = b;
    this.m_limitRight =
        this.m_limitLeft = this.m_isAwaitingDelete = this.m_flipX = this.m_limitUp = this.m_limitBottom = !1;
    this.setActorClip(f);
    this.setPosition(c, d);
    this.m_className = "";
    this.m_showBounds = !1;
    this.m_boundsDisplay = new SNode;
    this.showActorBounds(!1)
}
ActorRunner.prototype.setBoundsScale = function(a, b) {
    this.m_boundsScaleX = a;
    this.m_boundsScaleY = b
};
ActorRunner.prototype.bounds = function() {
    return this.m_bounds
};
ActorRunner.prototype.canvas = function() {
    return this.m_canvas
};
ActorRunner.prototype.characterGotoState = function(a) {
    a !== this.m_state && (null !== this.m_clip && (this.m_tempPosX = this.m_clip.x, this.m_tempPosY = this.m_clip.y), this.m_character.gotoState(a), this.m_clip = this.m_character.actor().clip(), this.m_clip.setScaleX(this.m_flipX ? -this.m_scaleX : this.m_scaleX), this.m_clip.setScaleY(this.m_scaleY), this.m_clip.setX(this.m_tempPosX), this.m_clip.setY(this.m_tempPosY))
};
ActorRunner.prototype.free = function() {
    null !== this.m_character && (this.m_character.free(), this.m_clip = this.m_character = null);
    null !== this.m_clip && (this.m_clip.parent.removeChild(this.m_clip.sprite), this.m_clip.free(), this.m_clip = null);
    this.m_manager = this.m_world = this.m_canvas = this.m_bounds = null
};
ActorRunner.prototype.getBounds = function() {
    return null !== this.m_clip ? (this.m_bounds.x = this.m_x - this.m_clip.cx, this.m_bounds.y = this.m_y - this.m_clip.cy, this.m_bounds.w = this.m_clip.width, this.m_bounds.h = this.m_clip.height, this.m_bounds.x += (1 - this.m_boundsScaleX) / 2 * this.m_bounds.w, this.m_bounds.y += (1 - this.m_boundsScaleY) / 2 * this.m_bounds.h, this.m_bounds.w *= this.m_boundsScaleX, this.m_bounds.h *= this.m_boundsScaleY, this.m_bounds) : null
};
ActorRunner.prototype.gotoState = function(a) {
    a != this.m_state && (this.characterGotoState(a), this.m_state = a)
};
ActorRunner.prototype.hitTest = function(a) {
    if (null !== this.m_bounds) {
        var b = new Rectangle(this.m_bounds.x, this.m_bounds.y, this.m_bounds.w, this.m_bounds.h);
        if (null !== a.getBounds()) return b.intersectRect(a.getBounds())
    }
    return !1
};
ActorRunner.prototype.isAwaitingDelete = function() {
    return this.m_isAwaitingDelete
};
ActorRunner.prototype.setActorClip = function(a) {
    a = "undefined" === typeof a ? null : a;
    null !== a && (this.m_clip = Application.instance.getClip(a), this.m_canvas.addChild(this.m_clip.sprite), this.m_clip.parent = this.m_canvas)
};
ActorRunner.prototype.setAwaitingDelete = function(a) {
    this.m_isAwaitingDelete = a
};
ActorRunner.prototype.setManager = function(a) {
    this.m_manager = a
};
ActorRunner.prototype.showInCamera = function(a) {
    this.m_character.setX(this.m_x - a.x());
    this.m_character.setY(this.m_y - a.y())
};
ActorRunner.prototype.calculateDistance = function(a, b) {
    return Math.sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]))
};
ActorRunner.prototype.setDepth = function(a) {
    null !== this.m_character && this.m_character.setDepth(a)
};
ActorRunner.prototype.getDepth = function() {
    return this.m_character.depth
};
ActorRunner.prototype.update = function(a) {
    var b = this.m_x - this.m_world.camera().x(),
        c = this.m_y - this.m_world.camera().y();
    !0 === GameRunner.instance.isUssingPerspective() && (this.m_currentScale = this.calculateDistance([b, c], [this.m_focusX, this.m_focusY]) / 500 * this.m_minScale, this.m_clip.setScaleX(this.m_currentScale), this.m_clip.setScaleY(this.m_currentScale));
    this.updateBounds();
    this.m_clip.setX(b);
    this.m_clip.setY(c);
    this.m_character.update(a);
    this.setDepth(10 * this.m_y)
};
ActorRunner.prototype.updateBounds = function() {
    this.m_bounds = new Rectangle(this.m_x - this.m_clip.cx, this.m_y - this.m_clip.cy, this.m_clip.width, this.m_clip.height)
};
ActorRunner.prototype.setPosition = function(a, b) {
    this.m_oldX = this.m_x = a;
    this.m_oldY = this.m_y = b
};
ActorRunner.prototype.showActorBounds = function(a) {
    (this.m_showBounds = a) ? (null === this.m_boundsDisplay && (this.m_boundsDisplay = new SNode), this.m_canvas.addChild(this.m_boundsDisplay), this.m_boundsDisplay.addDrawListener(this, "onDrawBounds")) : null !== this.m_boundsDisplay && this.m_canvas.removeChild(this.m_boundsDisplay)
};
ActorRunner.prototype.onDrawBounds = function(a) {
    !0 === this.m_showBounds && null !== this.m_bounds && "undefined" !== typeof this.m_bounds && (SGraphics.drawRect(a, this.m_bounds), a.font = "30px Arial", a.strokeText("d: " + Math.floor(this.getDepth()), this.m_x, this.m_y))
};

function HudRunner(a, b) {
    SScreen.call(this, a, b);
    HudRunner.instance = this;
    this.m_timeElapse = 0;
    this.m_txtScore = $(".ui_hud_score");
    this.m_txtTime = $(".ui_general_time.t1");
    this.m_txtTime2 = $(".ui_general_time.t3");
    this.m_txtSodaCounter = $(".ui_hud_counter");
    this.m_maxLives = 3;
    this.m_lifeBaseName = ".ui_general_lifes.l";
    this.m_lifeElements = [];
    for (var c = 0; c < this.m_maxLives; c++) this.m_lifeElements.push(this.m_lifeBaseName + (c + 1));
    this.initLives();
    this.m_state = HudRunner.STATE_NORMAL;
    this.m_timeInState = 0;
    this.m_hasMsgFinished = !0;
    this.m_txtMessage = $(".ui_hud_messagetext");
    this.m_txtMessageShadow = $(".ui_hud_messagebase");
    this.m_msgTime = 0;
    this.m_maxAlpha = 1;
    this.m_minAlpha = 0.1;
    this.m_currentAlpha = this.m_maxAlpha;
    this.m_alphaStep = 0;
    this.targetCallback = this.callback = null;
    this.m_onFxLife = !1;
    this.m_fxTime = 0;
    this.opacity = 1;
    this.change = -0.08;
    this.m_message = ""
}
goog.inherits(HudRunner, SScreen);
HudRunner.instance = null;
HudRunner.MsgTime = 2E3;
HudRunner.STATE_NORMAL = 0;
HudRunner.STATE_SHOWING_MESSAGE = 1;
HudRunner.ACTION_GOTO_NORMAL = 10;
HudRunner.ACTION_DO_MESSAGE = 11;
HudRunner.prototype.setGuiHTML = function() {
    this.css = " .ui_general_screen_bg {  top:0;  left:0;  width: 750px;  height: 500px;  background:url(media/images/ui_images/hud/gui_mini1.png); } .ui_hud_support_soda {  position: absolute;  pointer-events: none;  width: 20px;  height: 35px;  left: 18px;  top: 38px;  background: url(media/images/ui_images/hud/gui_hud_minigame_collect.png); } .ui_hud_lifes {  position: absolute;  pointer-events: none;  width: 87px;  height: 87px;  top: -28px;  background: url(media/images/ui_images/hud/gui_hud_minigame_lifefx.png) no-repeat right top; } .ui_general_time.t1 {  width: 47px;  height: 27px;  text-align: right; } .ui_general_time.t3 {  left: 163px;  top: 25px;  width: 47px;  height: 27px;  text-align: left; } .ui_hud_lifes.f1 {  left: -17px; } .ui_hud_lifes.f2 {  left: 17px; } .ui_hud_lifes.f3 {  left: 49px; } .ui_hud_messagetext {  position: absolute;  left: 110px;  top: 197px;  width: 566px;  height: 51px;  color: #005189;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 38px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always; } .ui_hud_messagebase {  position: absolute;  pointer-events: none;  width: 565px;  height: 208px;  left: 94px;  top: 119px;  background: url(media/images/ui_images/popups/gui_popups_message1.png); } .ui_hud_counter {  position: absolute;  left: 54px;  top: 42px;  width: 70px;  height: 30px;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 26px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always; }";
    this.html =
        "   <div class='ui_general_button_skip b1' id='btn_skip'></div>   <div class='ui_general_support'></div>   <div class='ui_hud_support_soda'></div>   <div class='ui_general_lifes l1'></div>   <div class='ui_general_lifes l2'></div>   <div class='ui_general_lifes l3'></div>   <div class='ui_hud_lifes f1'></div>   <div class='ui_hud_lifes f2'></div>   <div class='ui_hud_lifes f3'></div>   <div class='ui_hud_counter'>00</div>       <div class='ui_general_time t1'>00</div>       <div class='ui_general_time t2'>:</div>   <div class='ui_general_time t3'>00</div>   <div class='ui_hud_messagebase'></div>   <div class='ui_hud_messagetext'>GREAT</div>";
    HudRunner.superClass_.setGuiHTML.call(this)
};
HudRunner.prototype.free = function() {
    this.m_timeElapse = null;
    HudRunner.superClass_.free.call(this)
};
HudRunner.prototype.init = function() {
    HudRunner.superClass_.init.call(this);
    $(".ui_hud_baseplayer").css("pointer-events", "none");
    $(".ui_enemybase").css("pointer-events", "none");
    $(".ui_hud_messagebase").css("pointer-events", "none");
    $(".ui_hud_combobase").css("pointer-events", "none");
    this.addClickListener("btn_skip");
    $(".ui_hud_messagetext").css("display", "none");
    $(".ui_hud_lifes.f1").css("display", "none");
    $(".ui_hud_lifes.f2").css("display", "none");
    $(".ui_hud_lifes.f3").css("display", "none");
    $(".ui_hud_messagebase").css("display",
        "none");
    $(".ui_general_time.t2").html(Application.strings.STR_HUD_TIMER)
};
HudRunner.prototype.onClick = function(a) {
    switch (a.id) {
        case "btn_skip":
            GameRunner.instance.onSkipMinigame()
    }
};
HudRunner.prototype.doMsg = function(a, b) {
    this.m_message = a;
    this.m_hasMsgFinished = !1;
    this.m_txtMessage.html(a);
    this.m_msgTime = b;
    this.m_alphaStep = (this.m_maxAlpha - this.m_minAlpha) / this.m_msgTime;
    this.transition(HudRunner.ACTION_DO_MESSAGE)
};
HudRunner.prototype.transition = function(a) {
    switch (this.m_state) {
        case HudRunner.STATE_NORMAL:
            a === HudRunner.ACTION_DO_MESSAGE && (this.m_timeInState = 0, this.m_hasMsgFinished = !1, this.m_state = HudRunner.STATE_SHOWING_MESSAGE, "" !== this.m_message ? (this.m_txtMessage.css("display", "block"), this.m_txtMessageShadow.css("display", "block")) : (this.m_txtMessage.css("display", "none"), this.m_txtMessageShadow.css("display", "none")), this.m_txtMessage.css("opacity", "1"), this.m_txtMessageShadow.css("opacity", "1"));
            break;
        case HudRunner.STATE_SHOWING_MESSAGE:
            a === HudRunner.ACTION_GOTO_NORMAL && (this.m_timeInState = 0, this.m_state = HudRunner.STATE_NORMAL, this.m_txtMessage.css("display", "none"), this.m_txtMessageShadow.css("display", "none"))
    }
};
HudRunner.prototype.onKeyDown = function(a) {
    HudRunner.superClass_.onKeyDown.call(this, a);
    if (SGame.instance) SGame.instance.onKeyDown(a)
};
HudRunner.prototype.onMouseDown = function(a) {
    HudRunner.superClass_.onMouseDown.call(this, a);
    if (SGame.instance) SGame.instance.onMouseDown(a)
};
HudRunner.prototype.onMouseMove = function(a) {
    HudRunner.superClass_.onMouseMove.call(this, a);
    if (SGame.instance) SGame.instance.onMouseMove(a)
};
HudRunner.prototype.onMouseUp = function(a) {
    HudRunner.superClass_.onMouseUp.call(this, a);
    if (SGame.instance) SGame.instance.onMouseUp(a)
};
HudRunner.prototype.setLives = function(a) {};
HudRunner.prototype.setScore = function(a) {
    this.m_txtScore.html("Score: " + a)
};
HudRunner.prototype.timeElapsed = function() {
    return this.m_timeElapse
};
HudRunner.prototype.update = function(a) {
    HudRunner.superClass_.update.call(this, a);
    if (!0 == this.m_onFxLife) {
        this.opacity += this.change;
        if (0.4 > this.opacity || 1 < this.opacity) this.change = -this.change;
        $(".ui_hud_lifes.f1").css("opacity", this.opacity);
        $(".ui_hud_lifes.f2").css("opacity", this.opacity);
        $(".ui_hud_lifes.f3").css("opacity", this.opacity);
        this.m_fxTime -= a;
        0 > this.m_fxTime && (this.m_onFxLife = !1, $(".ui_hud_lifes.f1").css("opacity", 1), $(".ui_hud_lifes.f2").css("opacity", 1), $(".ui_hud_lifes.f3").css("opacity",
            1), $(".ui_hud_lifes.f1").css("display", "none"), $(".ui_hud_lifes.f2").css("display", "none"), $(".ui_hud_lifes.f3").css("display", "none"))
    }
    this.m_timeInState += a / 1E3;
    switch (this.m_state) {
        case HudRunner.STATE_NORMAL:
            this.m_timeElapse += a;
            var b = GameRunner.instance.totalTime() - this.m_timeElapse;
            a = parseInt(b / 6E4, 10);
            a = 10 > a ? "0" + a : "" + a;
            b = parseInt(b % 6E4, 10);
            b = parseInt(b / 1E3, 10);
            b = 10 > b ? "0" + b : "" + b;
            this.m_txtTime.html(a);
            this.m_txtTime2.html(b);
            if (0 >= GameRunner.instance.totalTime() - this.m_timeElapse) GameRunner.instance.onGameEnd(!0);
            break;
        case HudRunner.STATE_SHOWING_MESSAGE:
            if (this.m_currentAlpha = this.m_maxAlpha - this.m_alphaStep * this.m_timeInState, 0.8 < this.m_currentAlpha && (this.m_currentAlpha = this.m_maxAlpha), this.m_currentAlpha < this.m_minAlpha && (this.m_currentAlpha = this.m_minAlpha), this.m_timeInState > this.m_msgTime && (this.m_hasMsgFinished = !0, this.transition(HudRunner.ACTION_GOTO_NORMAL), this.callback && this.targetCallback)) this.targetCallback[this.callback]()
    }
};
HudRunner.prototype.initLives = function() {
    for (var a = 0; a < this.m_maxLives; a++) this.setElementVisibility(this.m_lifeElements[a], !0)
};
HudRunner.prototype.setElementVisibility = function(a, b) {
    !0 === b ? $(a).css("display", "block") : $(a).css("display", "none")
};
HudRunner.prototype.onRefreshLives = function(a) {
    a = "undefined" === typeof a ? !1 : a;
    if (null !== GameRunner.instance) {
        var b = GameRunner.instance.getLives() - 1;
        if (0 <= b)
            for (var c = 0; c < this.m_maxLives; c++) c <= b ? this.setElementVisibility(this.m_lifeElements[c], !0) : this.setElementVisibility(this.m_lifeElements[c], !1);
        else
            for (c = 0; c < this.m_maxLives; c++) this.setElementVisibility(this.m_lifeElements[c], !1); if (!0 == a) switch (this.m_onFxLife = !0, this.m_fxTime = HudRunner.FX_TIME, b) {
            case 0:
                $(".ui_hud_lifes.f1").css("display",
                    "");
                break;
            case 1:
                $(".ui_hud_lifes.f2").css("display", "");
                break;
            case 2:
                $(".ui_hud_lifes.f3").css("display", "")
        }
    }
};
HudRunner.prototype.setSodaCounter = function(a) {
    var b = "" + a;
    10 > a && (b = "0" + b);
    this.m_txtSodaCounter.html(b)
};
HudRunner.FX_TIME = 1500;

function PlayerRunner(a, b, c, d, e) {
    ActorRunner.call(this, a, b, c, d);
    this.m_minX = 20;
    this.m_maxX = 730;
    this.m_minY = 90;
    this.m_maxY = 500;
    this.m_startTouchY = this.m_startTouchX = this.m_goalY = this.m_goalX = 0;
    this.m_moveFlag = !1;
    this.m_timerInvulnerable = this.m_moveInitY = this.m_moveInitX = this.m_timeAlive = 0;
    this.m_win = !0;
    a = b.getFocus();
    this.m_focusX = a[0];
    this.m_focusY = a[1];
    this.m_speedX = e[0].maxSpeedY;
    this.m_speedY = e[0].maxSpeedY;
    this.m_maxTolerance = e[0].maxTolerance;
    this.m_speedXGrowth = e[1].maxSpeedY;
    this.m_speedYGrowth =
        e[1].maxSpeedY;
    this.enemy1Amount = e[2].amount;
    this.enemy1Increase = e[3].amount;
    this.enemy2Amount = e[4].amount;
    this.enemy2Increase = e[5].amount;
    this.enemy3Amount = e[6].amount;
    this.enemy3Increase = e[7].amount;
    this.m_character = new Character(c, d, this.m_canvas);
    this.m_character.addState(PlayerRunner.ST_PLAYER_WIN, "mcPlayer0" + Global.selectedTeam + "Celebration");
    this.m_character.addState(PlayerRunner.ST_PLAYER_WALK, "mcPlayer0" + Global.selectedTeam + "RunFront");
    this.m_character.addState(PlayerRunner.ST_PLAYER_RUN_BACK,
        "mcPlayer0" + Global.selectedTeam + "RunBack");
    this.m_character.addState(PlayerRunner.ST_PLAYER_HIT, "mcPlayer0" + Global.selectedTeam + "Hit");
    this.m_character.addState(PlayerRunner.ST_PLAYER_LOSE, "mcPlayer0" + Global.selectedTeam + "Sad");
    this.m_character.addState(PlayerRunner.ST_PLAYER_STAND, "mcPlayer0" + Global.selectedTeam + "StandFront");
    this.m_character.onEndAnimation = "onEndAnimation";
    this.m_character.worldActor = this;
    this.gotoState(PlayerRunner.ST_PLAYER_STAND);
    this.m_baseBoundsWidth = this.m_clip.width;
    this.m_baseBoundsHeight =
        this.m_clip.height;
    this.updateBounds();
    this.m_limitRight = this.m_limitLeft = !0;
    this.m_collisionDisplay = new SNode;
    this.m_showCollisions = !1;
    c = Application.config.minigameRunner[14].showCollisions;
    this.m_showCollisions = "number" === typeof c ? 1 === c ? !0 : !1 : !1;
    this.showCollisions(!1);
    this.m_boundsScaleX = Application.config.minigameRunner[0].boundsScaleX;
    this.m_boundsScaleY = Application.config.minigameRunner[0].boundsScaleY;
    this.m_horizontalLaneTop = [2.25, 3.75, 5.25, 6.75, 8.25, 9.75];
    this.m_horizontalLaneBot = [1, 3, 5,
        7, 9, 11
    ];
    this.m_lanes = 6;
    this.m_lanesEndPoints = [];
    this.calculateEndPoints();
    this.m_laneSlope = [];
    this.m_laneOffset = [];
    this.m_horizontalLaneFactor = 12;
    this.calculateLanes();
    this.m_timeMoving = this.m_vx = this.m_vy = 0
}
goog.inherits(PlayerRunner, ActorRunner);
PlayerRunner.ST_PLAYER_STAND = "st104";
PlayerRunner.ST_PLAYER_WIN = "st100";
PlayerRunner.ST_PLAYER_WALK = "st101";
PlayerRunner.ST_PLAYER_HIT = "st102";
PlayerRunner.ST_PLAYER_LOSE = "st103";
PlayerRunner.ST_PLAYER_RUN_BACK = "st105";
PlayerRunner.MAX_TIME_INVULNERABLE = 2E3;
PlayerRunner.TIMEOUT_MOVEMENT = 100;
PlayerRunner.prototype.calculateLanes = function() {
    for (var a = 0; a < this.m_lanes; a++) this.m_laneSlope.push(Application.APP_WIDTH * (this.m_horizontalLaneBot[a] - this.m_horizontalLaneTop[a]) / (Application.APP_HEIGHT * this.m_horizontalLaneFactor)), this.m_laneOffset.push(Application.APP_WIDTH * this.m_horizontalLaneTop[a] / this.m_horizontalLaneFactor)
};
PlayerRunner.prototype.calculateEndPoints = function() {
    for (var a = 0; a < this.m_lanes; a++) this.m_lanesEndPoints.push([
        [this.m_horizontalLaneTop[a] * Application.APP_WIDTH / 12, 0],
        [this.m_horizontalLaneBot[a] * Application.APP_WIDTH / 12, Application.APP_HEIGHT]
    ])
};
PlayerRunner.prototype.showCollisions = function(a) {
    (this.m_showCollisions = a) ? (null === this.m_collisionDisplay && (this.m_collisionDisplay = new SNode), this.m_world.canvas.addChild(this.m_collisionDisplay), this.m_collisionDisplay.addDrawListener(this, "onDraw")) : null !== this.m_collisionDisplay && this.m_world.canvas.removeChild(this.m_collisionDisplay)
};
PlayerRunner.prototype.onDraw = function(a) {
    var b = this.getBounds();
    if (null !== this.m_bounds)
        for (SGraphics.drawRectangle(a, b.x, b.y, b.w, b.h, 2, Common.COLOR_BLUE, Common.COLOR_NONE), b = 0; b < this.m_lanesEndPoints.length; b++) SGraphics.drawLine(a, this.m_lanesEndPoints[b][0][0], this.m_lanesEndPoints[b][0][1], this.m_lanesEndPoints[b][1][0], this.m_lanesEndPoints[b][1][1], Common.COLOR_GREEN, 2)
};
PlayerRunner.prototype.characterGotoState = function(a) {
    PlayerRunner.superClass_.characterGotoState.call(this, a)
};
PlayerRunner.prototype.free = function() {
    PlayerRunner.superClass_.free.call(this)
};
PlayerRunner.prototype.getBounds = function() {
    return PlayerRunner.superClass_.getBounds.call(this)
};
PlayerRunner.prototype.gotoState = function(a) {
    if (this.m_state !== PlayerRunner.ST_PLAYER_LOSE && this.m_state !== PlayerRunner.ST_PLAYER_WIN) {
        PlayerRunner.superClass_.gotoState.call(this, a);
        switch (a) {
            case PlayerRunner.ST_PLAYER_HIT:
                this.m_character.getActor().clip().setLoop(!1);
                GameRunner.instance.addLife(-1);
                this.setInvulnerability(!0);
                Global.app.playSound("dko_minigame_error");
                break;
            case PlayerRunner.ST_PLAYER_LOSE:
                this.m_character.getActor().clip().setLoop(!1);
                break;
            case PlayerRunner.ST_PLAYER_WIN:
                this.m_character.getActor().clip().setLoop(!0);
                break;
            default:
                this.m_character.getActor().clip().setLoop(!0)
        }
        this.updateBounds()
    }
};
PlayerRunner.prototype.hitTest = function(a) {
    return PlayerRunner.superClass_.hitTest.call(this, a)
};
PlayerRunner.prototype.isInvulnerable = function() {
    return this.m_isInvulnerable
};
PlayerRunner.prototype.onClick = function(a) {
    !(a.offsetX <= this.m_x + this.m_bounds.x + this.m_bounds.w && a.offsetX >= this.m_x + this.m_bounds.x && a.offsetY <= this.m_y + this.m_bounds.y + this.m_bounds.h && a.offsetY >= this.m_y + this.m_bounds.y) && this.m_state !== PlayerRunner.ST_PLAYER_LOSE && this.m_state !== PlayerRunner.ST_PLAYER_WIN && a.offsetX <= this.m_maxX && a.offsetX >= this.m_minX && a.offsetY <= this.m_maxY && a.offsetY >= this.m_minY && (this.m_moveFlag = !0, this.m_goalX = this.m_startTouchX = a.offsetX, this.m_goalY = this.m_startTouchY =
        a.offsetY, this.m_moveInitX = this.m_x, this.m_moveInitY = this.m_y, this.gotoState(PlayerRunner.ST_PLAYER_WALK))
};
PlayerRunner.prototype.onEndAnimation = function(a) {
    switch (a) {
        case PlayerRunner.ST_PLAYER_HIT:
            this.m_win ? this.gotoState(PlayerRunner.ST_PLAYER_WALK) : this.gotoState(PlayerRunner.ST_PLAYER_LOSE)
    }
};
PlayerRunner.prototype.onGameEnd = function(a) {
    (this.m_win = a) ? this.gotoState(PlayerRunner.ST_PLAYER_WIN) : this.gotoState(PlayerRunner.ST_PLAYER_LOSE)
};
PlayerRunner.prototype.onMove = function(a) {
    this.m_moveFlag && this.m_state !== PlayerRunner.ST_PLAYER_LOSE && this.m_state !== PlayerRunner.ST_PLAYER_WIN && (this.m_goalX = a.offsetX, this.m_goalX > this.m_maxX && (this.m_goalX = this.m_maxX), this.m_goalX < this.m_minX && (this.m_goalX = this.m_minX), this.m_goalY = a.offsetY, this.m_goalY > this.m_maxY && (this.m_goalY = this.m_maxY), this.m_goalY < this.m_minY && (this.m_goalY = this.m_minY))
};
PlayerRunner.prototype.onRelease = function(a) {
    this.m_state !== PlayerRunner.ST_PLAYER_LOSE && this.m_state !== PlayerRunner.ST_PLAYER_WIN && (this.m_moveFlag = !1, this.gotoState(PlayerRunner.ST_PLAYER_STAND))
};
PlayerRunner.prototype.setInvulnerability = function(a) {
    this.m_isInvulnerable = a;
    this.m_timerInvulnerable = 0
};
PlayerRunner.prototype.setPosition = function(a, b) {
    this.m_oldX = this.m_x = a;
    this.m_oldY = this.m_y = b
};
PlayerRunner.prototype.showInCamera = function(a) {
    PlayerRunner.superClass_.showInCamera.call(this, a)
};
PlayerRunner.prototype.state = function() {
    return this.m_character.getState()
};
PlayerRunner.prototype.update = function(a) {
    this.m_timeAlive += a;
    this.m_isInvulnerable && (this.m_timerInvulnerable += a, this.m_timerInvulnerable >= PlayerRunner.MAX_TIME_INVULNERABLE && this.setInvulnerability(!1));
    this.updatePosition(a);
    PlayerRunner.superClass_.update.call(this, a)
};
PlayerRunner.prototype.updateBounds = function() {
    PlayerRunner.superClass_.updateBounds.call(this)
};
PlayerRunner.prototype.calculateXLimits = function(a) {
    return [this.m_laneSlope[0] * a + this.m_laneOffset[0], this.m_laneSlope[this.m_laneSlope.length - 1] * a + this.m_laneOffset[this.m_laneOffset.length - 1]]
};
PlayerRunner.prototype.updatePosition = function(a) {
    if (this.m_moveFlag) {
        this.m_x = this.m_moveInitX + (this.m_speedX + this.m_speedXGrowth * this.m_timeAlive / WorldRunner.TIME_CYCLE) * (this.m_goalX - this.m_startTouchX);
        this.m_y = this.m_moveInitY + (this.m_speedY + this.m_speedYGrowth * this.m_timeAlive / WorldRunner.TIME_CYCLE) * (this.m_goalY - this.m_startTouchY);
        this.m_x > this.m_maxX && (this.m_x = this.m_maxX);
        this.m_x < this.m_minX && (this.m_x = this.m_minX);
        this.m_y > this.m_maxY && (this.m_y = this.m_maxY);
        this.m_y < this.m_minY && (this.m_y =
            this.m_minY);
        var b = this.calculateXLimits(this.m_y),
            c = b[0],
            b = b[1];
        this.m_x = this.m_x < c ? c : this.m_x;
        this.m_x = this.m_x > b ? b : this.m_x;
        this.m_vy = this.m_y - this.m_oldY;
        this.m_vx = this.m_x - this.m_oldX;
        0 < this.m_vy ? (this.m_timeMoving += a, this.m_timeMoving > PlayerRunner.TIMEOUT_MOVEMENT && (this.m_timeMoving = 0, this.m_state !== PlayerRunner.ST_PLAYER_HIT && this.gotoState(PlayerRunner.ST_PLAYER_RUN_BACK))) : 0 > this.m_vy || 0 < Math.abs(this.m_vx) ? (this.m_timeMoving += a, this.m_timeMoving > PlayerRunner.TIMEOUT_MOVEMENT && (this.m_timeMoving =
            0, this.m_state !== PlayerRunner.ST_PLAYER_HIT && this.gotoState(PlayerRunner.ST_PLAYER_WALK))) : this.m_state !== PlayerRunner.ST_PLAYER_HIT && this.gotoState(PlayerRunner.ST_PLAYER_STAND);
        this.m_oldY = this.m_y;
        this.m_oldX = this.m_x
    }
};
PlayerRunner.prototype.world = function() {
    return this.m_world
};
PlayerRunner.prototype.x = function() {
    return this.m_x
};
PlayerRunner.prototype.y = function() {
    return this.m_y
};

function EnemyRunner(a, b, c, d, e, f, g, h, k) {
    ActorRunner.call(this, a, b, c, d, e);
    this.m_offsetY = k;
    this.m_worldData = Application.config[f];
    this.m_speedY = this.m_worldData[e].maxSpeedY;
    this.m_timeToDisplaceX = this.m_worldData[e].timeToDisplaceX;
    this.m_maxTolerance = this.m_worldData[e].maxTolerance;
    this.m_minDisplaceTime = this.m_worldData[e].minDisplaceTime;
    this.m_speedIncreaseY = this.m_worldData[e + 1].maxSpeedY;
    this.m_verticalLimit = 700;
    this.m_character = new Character(c, d, this.m_canvas);
    this.m_character.addState(EnemyRunner.ST_ENEMY_STAND,
        "mcEnemy1Stand");
    this.m_character.addState(EnemyRunner.ST_ENEMY_WALK, "mcNpc0" + (4 + Math.floor(2 * Math.random())) + "Run");
    this.m_character.addState(EnemyRunner.ST_ENEMY_HIT, "mcEnemy1Hit");
    this.m_character.addState(EnemyRunner.ST_ENEMY_LOSE, "mcEnemy1Die");
    this.m_character.onEndAnimation = "onEndAnimation";
    this.m_character.worldActor = this;
    this.gotoState(EnemyRunner.ST_ENEMY_WALK);
    this.m_baseBoundsWidth = this.m_clip.width;
    this.m_baseBoundsHeight = this.m_clip.height;
    this.updateBounds();
    this.m_id = e;
    this.m_minStartY = -300;
    this.m_maxStartY = -10;
    this.m_currentLane = 0;
    this.m_lanes = 6;
    this.m_isChangingLane = this.m_hasChangedLane = !1;
    this.m_horizontalLaneFactor = 12;
    this.m_horizontalLaneTop = [2.25, 3.75, 5.25, 6.75, 8.25, 9.75];
    this.m_horizontalLaneBot = [1, 3, 5, 7, 9, 11];
    this.m_laneSlope = [];
    this.m_laneOffset = [];
    for (a = 0; a < this.m_lanes; a++) this.m_laneSlope.push(Application.APP_WIDTH * (this.m_horizontalLaneBot[a] - this.m_horizontalLaneTop[a]) / (Application.APP_HEIGHT * this.m_horizontalLaneFactor)), this.m_laneOffset.push(Application.APP_WIDTH *
        this.m_horizontalLaneTop[a] / this.m_horizontalLaneFactor);
    this.m_y = this.m_verticalLimit;
    this.m_isPlayerActive = !1;
    this.m_initLane = g;
    this.m_waveItBelongs = h;
    this.m_collisionDisplay = new SNode;
    this.m_showCollisions = !1;
    g = Application.config.minigameRunner[14].showCollisions;
    this.m_showCollisions = "number" === typeof g ? 1 === g ? !0 : !1 : !1;
    this.showCollisions(!1);
    this.m_boundsScaleX = Application.config.minigameRunner[2].boundsScaleX;
    this.m_boundsScaleY = Application.config.minigameRunner[2].boundsScaleX;
    this.m_minSpeedY =
        Application.config.minigameRunner[e].minSpeedY;
    this.m_maxSpeedY = Application.config.minigameRunner[e].maxSpeedY;
    this.m_speedY = this.m_minSpeedY + (this.m_maxSpeedY - this.m_minSpeedY) * Math.random();
    this.m_soundIndex = 0;
    this.m_onScreen = !1
}
goog.inherits(EnemyRunner, ActorRunner);
EnemyRunner.ST_ENEMY_STAND = "st100";
EnemyRunner.ST_ENEMY_WALK = "st101";
EnemyRunner.ST_ENEMY_HIT = "st102";
EnemyRunner.ST_ENEMY_LOSE = "st103";
EnemyRunner.prototype.showCollisions = function(a) {
    (this.m_showCollisions = a) ? (null === this.m_collisionDisplay && (this.m_collisionDisplay = new SNode), this.m_world.canvas.addChild(this.m_collisionDisplay), this.m_collisionDisplay.addDrawListener(this, "onDraw")) : null !== this.m_collisionDisplay && this.m_world.canvas.removeChild(this.m_collisionDisplay)
};
EnemyRunner.prototype.onDraw = function(a) {
    var b = this.getBounds();
    null !== this.m_bounds && SGraphics.drawRectangle(a, b.x, b.y, b.w, b.h, 2, Common.COLOR_RED, Common.COLOR_NONE)
};
EnemyRunner.prototype.getWaveIBelongTo = function() {
    return this.m_waveItBelongs
};
EnemyRunner.prototype.getID = function() {
    return this.m_id
};
EnemyRunner.prototype.changeToNextLane = function(a) {
    this.m_currentLane != a && (this.m_startLaneChangeX = this.m_y * this.m_laneSlope[this.m_currentLane] + this.m_laneOffset[this.m_currentLane], this.m_currentLane = a, this.m_endLaneChangeX = (this.m_y + this.m_speedY * this.m_timeToDisplaceX) * this.m_laneSlope[this.m_currentLane] + this.m_laneOffset[this.m_currentLane], this.m_hasChangedLane = this.m_isChangingLane = !0)
};
EnemyRunner.prototype.characterGotoState = function(a) {
    EnemyRunner.superClass_.characterGotoState.call(this, a)
};
EnemyRunner.prototype.checkCollisionWithPlayer = function() {
    var a = this.m_world.player().getBounds(),
        b = this.getBounds(),
        a = a.intersectRect(b);
    !0 === a && Application.log("collided with the player");
    return a
};
EnemyRunner.prototype.detectPlayerLane = function(a) {
    var b = 0;
    if ("left" === a) {
        for (a = 0; a < this.m_lanes; a++)
            if (b = this.m_world.player().y() * this.m_laneSlope[a] + this.m_laneOffset[a], b >= this.m_world.player().x()) return a;
        return this.m_lanes - 1
    }
    if ("right" === a) {
        for (a = this.m_lanes - 1; - 1 < a; a--)
            if (b = this.m_world.player().y() * this.m_laneSlope[a] + this.m_laneOffset[a], b <= this.m_world.player().x()) return a;
        return 0
    }
};
EnemyRunner.prototype.free = function() {
    this.m_horizontalLaneTop = this.m_horizontalLaneBot = this.m_laneOffset = this.m_laneSlope = this.m_worldData = null;
    EnemyRunner.superClass_.free.call(this)
};
EnemyRunner.prototype.getBounds = function() {
    return EnemyRunner.superClass_.getBounds.call(this)
};
EnemyRunner.prototype.gotoState = function(a) {
    EnemyRunner.superClass_.gotoState.call(this, a);
    switch (a) {
        case EnemyRunner.ST_ENEMY_HIT:
            this.m_character.getActor().clip().setLoop(!1);
            break;
        default:
            this.m_character.getActor().clip().setLoop(!0)
    }
    this.updateBounds()
};
EnemyRunner.prototype.hitTest = function(a) {
    return EnemyRunner.superClass_.hitTest.call(this, a)
};
EnemyRunner.prototype.onEndAnimation = function(a) {};
EnemyRunner.prototype.setPosition = function(a, b) {
    this.m_oldX = this.m_x = a;
    this.m_oldY = this.m_y = b
};
EnemyRunner.prototype.showInCamera = function(a) {
    EnemyRunner.superClass_.showInCamera.call(this, a)
};
EnemyRunner.prototype.stalkPlayer = function(a) {
    var b = 0,
        b = this.m_x > a.x() ? this.detectPlayerLane("right") : this.detectPlayerLane("left");
    this.changeToNextLane(b)
};
EnemyRunner.prototype.update = function(a) {
    this.updatePosition(a);
    !this.m_world.player().isInvulnerable() && this.checkCollisionWithPlayer() && this.m_world.player().gotoState(PlayerRunner.ST_PLAYER_HIT);
    EnemyRunner.superClass_.update.call(this, a)
};
EnemyRunner.prototype.updateBounds = function() {
    EnemyRunner.superClass_.updateBounds.call(this)
};
EnemyRunner.prototype.removeActorFromWave = function() {
    0 < this.m_soundIndex && Global.app.stopSound("dko_minigame_steps" + this.m_soundIndex);
    GameRunner.instance.m_world.m_actorManager.removeActorFromWave(this)
};
EnemyRunner.prototype.getCurrentLane = function() {
    return this.m_currentLane
};
EnemyRunner.prototype.updatePosition = function(a) {
    this.m_y += this.m_speedY * a;
    !1 == this.m_onScreen && 0 < this.m_y && (0 < (this.m_soundIndex = this.m_world.getActorManager().actorSound()) && Global.app.playSound("dko_minigame_steps" + this.m_soundIndex), this.m_onScreen = !0);
    if (this.m_y >= this.m_verticalLimit) {
        !0 == this.m_isPlayerActive && this.removeActorFromWave();
        this.m_isPlayerActive = !0;
        this.m_currentLane = this.m_initLane;
        this.m_y = Common.random(this.m_minStartY, this.m_maxStartY) + this.m_offsetY;
        for (var b = 0; b < this.m_manager.getActors().length; b++)
            if (this.getBounds().intersectRect(this.m_manager.getActors()[b].getBounds()) &&
                this.m_x != this.m_manager.getActors()[b].x() && this.m_y != this.m_manager.getActors()[b].y()) {
                this.m_y -= 200;
                break
            }
        4 == this.m_id && (this.m_changeLaneAt = 0.3 * Math.random());
        this.m_isChangingLane = this.m_hasChangedLane = !1
    }
    this.m_isChangingLane ? (this.m_x += (this.m_endLaneChangeX - this.m_startLaneChangeX) * a / this.m_timeToDisplaceX, 10 >= Math.abs(this.m_x - this.m_endLaneChangeX) && (this.m_x = this.m_endLaneChangeX, this.m_isChangingLane = !1)) : this.m_x = this.m_y * this.m_laneSlope[this.m_currentLane] + this.m_laneOffset[this.m_currentLane];
    !this.m_hasChangedLane && 4 == this.m_id && this.m_y >= this.m_changeLaneAt * Application.APP_HEIGHT && (a = 0 < Math.random() - 0.5, !a && 0 < this.m_currentLane ? (a = Math.floor(Math.random() * this.m_currentLane), this.changeToNextLane(a)) : a && this.m_currentLane < this.m_lanes - 1 && (a = Math.floor(Math.random() * (this.m_lanes - this.m_currentLane)), this.changeToNextLane(a)));
    !this.m_isChangingLane && 6 == this.m_id && this.m_world.player().y() > this.m_y && this.m_world.player().y() - this.m_y <= this.m_maxTolerance && this.stalkPlayer(this.m_world.player())
};
EnemyRunner.prototype.world = function() {
    return this.m_world
};
EnemyRunner.prototype.x = function() {
    return this.m_x
};
EnemyRunner.prototype.y = function() {
    return this.m_y
};

function CollectablesManager(a) {
    this.m_world = a;
    this.m_collectables = [];
    this.m_data = Application.config.minigameRunner;
    this.m_collectableRespawnTime = this.m_data[9].respawnTime;
    this.m_sodaCounter = this.m_time = 0;
    this.m_maxSodasInGame = this.m_data[9].maxSodasInGame;
    this.m_horizontalLaneTop = [2.25, 3.75, 5.25, 6.75, 8.25, 9.75];
    this.m_horizontalLaneBot = [1, 3, 5, 7, 9, 11];
    this.m_lanes = 6;
    this.m_lanesCornes = [];
    this.m_lanesEndPoints = [];
    this.calculateCorners();
    this.calculateEndPoints();
    this.m_laneSlope = [];
    this.m_laneOffset = [];
    this.m_horizontalLaneFactor = 12;
    this.calculateLanes();
    this.m_lanesRender = new SNode;
    this.m_showLanes = !1;
    this.showLanes(!1);
    this.m_actorManagerRef = this.m_world.getActorManager();
    this.m_boundaryIncreaseTime = [Application.config.minigameRunner[11].thresholdTime, Application.config.minigameRunner[12].thresholdTime, Application.config.minigameRunner[13].thresholdTime];
    this.m_boundary_min = [Application.config.minigameRunner[11].boundaryMin, Application.config.minigameRunner[12].boundaryMin, Application.config.minigameRunner[13].boundaryMin];
    this.m_boundary_max = [Application.config.minigameRunner[11].boundaryMax, Application.config.minigameRunner[12].boundaryMax, Application.config.minigameRunner[13].boundaryMax];
    this.m_boundaryTimeCounter = this.m_boundaryCounter = 0;
    this.recalculateCorners()
}
CollectablesManager.prototype.calculateEndPoints = function() {
    for (var a = 0; a < this.m_lanes; a++) this.m_lanesEndPoints.push([
        [this.m_horizontalLaneTop[a] * Application.APP_WIDTH / 12, 0],
        [this.m_horizontalLaneBot[a] * Application.APP_WIDTH / 12, Application.APP_HEIGHT]
    ])
};
CollectablesManager.prototype.calculateLanes = function() {
    for (var a = 0; a < this.m_lanes; a++) this.m_laneSlope.push(Application.APP_WIDTH * (this.m_horizontalLaneBot[a] - this.m_horizontalLaneTop[a]) / (Application.APP_HEIGHT * this.m_horizontalLaneFactor)), this.m_laneOffset.push(Application.APP_WIDTH * this.m_horizontalLaneTop[a] / this.m_horizontalLaneFactor)
};
CollectablesManager.prototype.calculateCorners = function() {
    var a = [this.m_horizontalLaneTop[0] / 12 * Application.APP_WIDTH, 0],
        b = [this.m_horizontalLaneTop[5] / 12 * Application.APP_WIDTH, 0],
        c = [this.m_horizontalLaneBot[5] / 12 * Application.APP_WIDTH, Application.APP_HEIGHT];
    this.m_lanesCornes.push([this.m_horizontalLaneBot[0] / 12 * Application.APP_WIDTH, Application.APP_HEIGHT]);
    this.m_lanesCornes.push(a);
    this.m_lanesCornes.push(b);
    this.m_lanesCornes.push(c)
};
CollectablesManager.prototype.showLanes = function(a) {
    (this.m_showLanes = a) ? (null === this.m_lanesRender && (this.m_lanesRender = new SNode), this.m_world.canvas.addChild(this.m_lanesRender), this.m_lanesRender.addDrawListener(this, "onDraw")) : null !== this.m_lanesRender && this.m_world.canvas.removeChild(this.m_lanesRender)
};
CollectablesManager.prototype.onDraw = function(a) {
    for (var b = 0; b < this.m_lanesEndPoints.length; b++) SGraphics.drawLine(a, this.m_lanesEndPoints[b][0][0], this.m_lanesEndPoints[b][0][1], this.m_lanesEndPoints[b][1][0], this.m_lanesEndPoints[b][1][1], Common.COLOR_GREEN, 2);
    SGraphics.drawLine(a, this.m_lanesCornes[0][0], this.m_lanesCornes[0][1], this.m_lanesCornes[1][0], this.m_lanesCornes[1][1], Common.COLOR_RED, 2);
    SGraphics.drawLine(a, this.m_lanesCornes[1][0], this.m_lanesCornes[1][1], this.m_lanesCornes[2][0], this.m_lanesCornes[2][1],
        Common.COLOR_RED, 2);
    SGraphics.drawLine(a, this.m_lanesCornes[2][0], this.m_lanesCornes[2][1], this.m_lanesCornes[3][0], this.m_lanesCornes[3][1], Common.COLOR_RED, 2);
    SGraphics.drawLine(a, this.m_lanesCornes[3][0], this.m_lanesCornes[3][1], this.m_lanesCornes[0][0], this.m_lanesCornes[0][1], Common.COLOR_RED, 2)
};
CollectablesManager.prototype.recalculateCorners = function() {
    var a = 2 - this.m_boundaryCounter,
        b = this.m_lanes - 1 - a,
        c = this.m_lanesEndPoints[a][0][0],
        d = this.m_lanesEndPoints[a][0][1],
        e = this.m_lanesEndPoints[b][0][0],
        f = this.m_lanesEndPoints[b][0][1],
        g = this.m_lanesEndPoints[b][1][0],
        h = this.m_lanesEndPoints[b][1][1],
        b = this.m_lanesEndPoints[a][1][0] - c,
        k = this.m_lanesEndPoints[a][1][1] - d,
        a = Math.sqrt(b * b + k * k),
        b = [b / a, k / a],
        g = g - e,
        k = h - f,
        h = Math.sqrt(g * g + k * k),
        k = [g / h, k / h],
        l = this.m_boundary_min[this.m_boundaryCounter] *
            a,
        g = c + l * b[0],
        l = d + l * b[1],
        a = this.m_boundary_max[this.m_boundaryCounter] * a,
        m = this.m_boundary_min[this.m_boundaryCounter] * h,
        n = e + m * k[0],
        m = f + m * k[1],
        h = this.m_boundary_max[this.m_boundaryCounter] * h,
        e = e + h * k[0],
        f = f + h * k[1];
    this.m_lanesCornes[0] = [c + a * b[0], d + a * b[1]];
    this.m_lanesCornes[1] = [g, l];
    this.m_lanesCornes[2] = [n, m];
    this.m_lanesCornes[3] = [e, f]
};
CollectablesManager.prototype.add = function(a) {
    this.m_collectables.push(a)
};
CollectablesManager.prototype.getNewCollectablePosition = function() {
    var a = this.m_horizontalLaneTop[0],
        b = this.m_horizontalLaneTop[5],
        c = this.m_horizontalLaneBot[0],
        d = this.m_horizontalLaneBot[5],
        e = Application.APP_HEIGHT / Application.APP_WIDTH * -1 / ((a - c) / 12),
        a = a / 12 * e * -1 * Application.APP_WIDTH,
        f = Application.APP_HEIGHT / Application.APP_WIDTH / ((d - b) / 12),
        b = b / 12 * f * -1 * Application.APP_WIDTH,
        g = 0,
        h = this.m_actorManagerRef.getCurrentWaveOfActors();
    if (0 < h.length) {
        for (var k = 2 - this.m_boundaryCounter, l = this.m_lanes - 1 - k,
                g = null, m = 0; m < h.length; m++) {
            var n = h[m].getCurrentLane();
            if (n <= l && n >= k) {
                g = n;
                break
            }
        }
        if (null !== g) return a = this.m_lanesEndPoints[g][0][0], e = this.m_lanesEndPoints[g][0][1], f = this.m_lanesEndPoints[g][1][0] - a, c = this.m_lanesEndPoints[g][1][1] - e, b = Math.sqrt(f * f + c * c), f = [f / b, c / b], b *= this.m_boundary_min[this.m_boundaryCounter] + (this.m_boundary_max[this.m_boundaryCounter] - this.m_boundary_min[this.m_boundaryCounter]) * Math.random(), c = a + b * f[0], e += b * f[1], 400 < e ? e = 400 : 50 > e && (e = 50), [c, e]
    }
    c = c / 12 * Application.APP_WIDTH +
        Math.random() * ((d - c) / 12) * Application.APP_WIDTH;
    150 > c ? c = 150 : 600 < c && (c = 600);
    d = c >= this.m_lanesCornes[1][0] && c <= this.m_lanesCornes[2][0];
    g = c >= this.m_lanesCornes[2][0] && c <= this.m_lanesCornes[3][0];
    c >= this.m_lanesCornes[0][0] && c <= this.m_lanesCornes[1][0] ? (g = Application.APP_HEIGHT - (e * c + a), 450 < g && (g = 450)) : d ? (g = Application.APP_HEIGHT, 450 < g && (g = 450)) : g ? (g = Application.APP_HEIGHT - (f * c + b), 450 < g && (g = 450)) : g = 450;
    e = Application.APP_HEIGHT - (0 + Math.random() * (g - 0));
    0 >= e && (e = 0);
    400 < e && Application.log("foo");
    return [c,
        e]
};
CollectablesManager.prototype.update = function(a) {
    this.m_time += a / 1E3;
    this.m_boundaryTimeCounter += a / 1E3;
    this.m_boundaryTimeCounter > this.m_boundaryIncreaseTime[this.m_boundaryCounter] && (this.m_boundaryCounter += 1, this.m_boundaryCounter > this.m_boundaryIncreaseTime.length - 1 && (this.m_boundaryCounter = this.m_boundaryIncreaseTime.length - 1), this.recalculateCorners());
    var b = this.m_sodaCounter < this.m_maxSodasInGame;
    if (this.m_time > this.m_collectableRespawnTime && !0 == b) {
        this.m_sodaCounter += 1;
        this.m_time = 0;
        var c = this.getNewCollectablePosition(),
            b = c[0],
            c = c[1];
        this.add(new Collectable(this.m_world.objectCanvas(), this.m_world, b, c, 1, "", this.m_data))
    }
    if (0 < this.m_collectables.length)
        for (b = 0; b < this.m_collectables.length; b++) this.m_collectables[b].update(a), !0 == this.m_collectables[b].isAwaitingDelete() && this.removeElement(this.m_collectables[b])
};
CollectablesManager.prototype.removeElement = function(a) {
    if (0 < this.m_collectables.length) {
        this.m_sodaCounter -= 1;
        var b = this.m_collectables.indexOf(a); - 1 !== b && (a.free(), this.m_collectables.splice(b, 1))
    }
};

function Collectable(a, b, c, d, e, f, g) {
    ActorRunner.call(this, a, b, c, d, e);
    this.m_type = Collectable.TYPE_SODA;
    this.initActor(c, d, this.m_canvas);
    this.m_lifeTime = 0;
    this.m_maxLifeTime = g[9].lifeTime
}
goog.inherits(Collectable, ActorRunner);
Collectable.TYPE_SODA = 1;
Collectable.ST_NORMAL = 10;
Collectable.prototype.initActor = function(a, b, c) {
    this.m_character = new Character(a, b, c);
    this.m_character.addState(Collectable.ST_NORMAL, "mcM1Soda");
    this.gotoState(Collectable.ST_NORMAL);
    this.m_player = this.m_world.player()
};
Collectable.prototype.update = function(a) {
    Collectable.superClass_.update.call(this, a);
    this.checkCollisionWithPlayer();
    this.checkLifeTime(a)
};
Collectable.prototype.checkCollisionWithPlayer = function() {
    !0 == this.hitTest(this.m_player) && (Global.app.playSound("dko_snd_power1"), GameRunner.instance.onGetSoda(), HudRunner.instance.setScore(GameRunner.instance.getScore()), HudRunner.instance.setSodaCounter(GameRunner.instance.getSodaCounter()), this.setAwaitingDelete(!0), this.free())
};
Collectable.prototype.checkLifeTime = function(a) {
    this.m_lifeTime += a / 1E3;
    this.m_lifeTime > this.m_maxLifeTime && (this.m_lifeTime = 0, this.setAwaitingDelete(!0), this.free())
};

function GuiLoader(a, b, c, d) {
    SScreen.call(this);
    GuiLoader.instance = this;
    this.start = "undefined" === typeof c ? 0 : c;
    this.end = "undefined" === typeof d ? 100 : d;
    this.assets = a;
    this.gotoScreen = b;
    this.loadedFiles = 0;
    this.totalFiles = null != a ? this.assets.length : 0;
    if (null != a)
        for (a = 0; a < this.totalFiles; a++) Global.app.core.load(this.assets[a], this.load);
    this.m_txtPercent = $(".ui_loader_percent");
    $(".ui_loader_info").html(Application.strings.STR_LOADING)
}
goog.inherits(GuiLoader, SScreen);
GuiLoader.instance = null;
GuiLoader.prototype.free = function() {
    this.gotoScreen = this.assets = this.m_txtPercent = null;
    GuiLoader.superClass_.free.call(this)
};
GuiLoader.prototype.load = function() {
    var a = new SEvent("progress");
    a.loaded = ++GuiLoader.instance.loadedFiles;
    a.total = GuiLoader.instance.totalFiles;
    var b = GuiLoader.instance.start,
        b = b + a.loaded / a.total * (GuiLoader.instance.end - GuiLoader.instance.start);
    a.percent = parseInt(b, 10);
    GuiLoader.instance.onLoadProgress(a);
    if (GuiLoader.instance.loadedFiles === GuiLoader.instance.totalFiles) GuiLoader.instance.onLoadComplete()
};
GuiLoader.prototype.setGuiHTML = function() {
    this.css = " .ui_loader_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_loader_background.jpg); } .ui_loader_bar {  position: absolute;  top: 428px;  left: 299px;  width: 151px;  height: 13px;  background: url(media/images/ui_images/screens/gui_screens_loader_bar.jpg); }";
    this.html = " <div class='ui_general_container'>   <div class='ui_loader_bg'>  <div class='ui_loader_bar'></div> </div>  <div class='ui_general_button_next b1' id='btn_next'></div>    <div class='ui_general_advertising_support'></div>   <div class='ui_general_advertising'></div> </div>";
    GuiLoader.superClass_.setGuiHTML.call(this)
};
GuiLoader.prototype.init = function() {
    GuiLoader.superClass_.init.call(this);
    $(".ui_general_button_next").css("display", "none");
    $(".ui_loader_percent").css("pointer-events", "none");
    this.addClickListener("btn_next");
    $(".ui_loader_bar").css("width", "0px");
    if (Global.showAds) {
        var a = Common.random(1, Global.countSponsors);
        $(".ui_general_advertising").css("background", "url(media/images/localized/gui_logo_" + a + ".png) no-repeat right top")
    } else $(".ui_general_advertising").css("display", "none")
};
GuiLoader.prototype.onClick = function(a) {
    Global.app.playSound("swd_snd_button");
    switch (a.id) {
        case "btn_next":
            Global.app.playSound("swd_mus_titlecard"), GuiManager.instance.gotoScreen(this.gotoScreen)
    }
};
GuiLoader.prototype.onLoadProgress = function(a) {
    a = 1.51 * a.percent;
    $(".ui_loader_bar").css("width", parseInt(a, 10) + "px")
};
GuiLoader.prototype.onLoadComplete = function() {
    Application.isMobileDevice && null != this.assets ? GuiMainMenu.doneFirstLoader ? GuiManager.instance.gotoScreen(this.gotoScreen) : $(".ui_general_button_next").css("display", "") : GuiManager.instance.gotoScreen(this.gotoScreen)
};

function GuiHelp(a, b, c) {
    SScreen.call(this, a, b, c)
}
goog.inherits(GuiHelp, SScreen);
GuiHelp.prototype.setGuiHTML = function() {
    this.css = " .ui_help_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_help_background01.jpg); } .ui_help_character {  position: absolute;  top: 354px;  left: 0px;  width: 121px;  height: 146px;  background: url(media/images/ui_images/screens/gui_screens_help_character.png) no-repeat top right; } .ui_help_text {  position: absolute;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 17px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always;  left: 435px;  width: 196px;  height: 55px; } .ui_help_text.i1 {  top: 143px; } .ui_help_text.i2 {  top: 257px; } .ui_help_text.i3 {  top: 380px; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_help_bg'>    <div class='ui_general_teamside l1' id='img_bg_left01'></div>  <div class='ui_general_teamside l2' id='img_bg_left02'></div>  <div class='ui_general_teamside l3' id='img_bg_left03'></div>  <div class='ui_general_teamside l4' id='img_bg_left04'></div>  <div class='ui_general_teamside l5' id='img_bg_left05'></div>  <div class='ui_general_teamside l6' id='img_bg_left06'></div>  <div class='ui_general_teamside r1' id='img_bg_right01'></div>  <div class='ui_general_teamside r2' id='img_bg_right02'></div>  <div class='ui_general_teamside r3' id='img_bg_right03'></div>  <div class='ui_general_teamside r4' id='img_bg_right04'></div>  <div class='ui_general_teamside r5' id='img_bg_right05'></div>  <div class='ui_general_teamside r6' id='img_bg_right06'></div>  <div class='ui_general_screen_title'>INSTRUCTIONS</div>  <div class='ui_general_button_next b1' id='btn_next'></div>  <div class='ui_general_button_back b1' id='btn_back'></div>  <div class='ui_help_text i1'>help01</div>  <div class='ui_help_text i2'>help02</div>  <div class='ui_help_text i3'>help03</div>  <div class='ui_help_character'></div>   </div> </div>";
    GuiHelp.superClass_.setGuiHTML.call(this)
};
GuiHelp.prototype.init = function() {
    GuiHelp.superClass_.init.call(this);
    $(".ui_general_screen_title").html(Application.strings.STR_HELP_TITLE);
    this.addClickListener("btn_next");
    $("#btn_back").css("display", "none");
    $(".ui_help_text.i1").html(Application.strings.STR_HELP_CONTENT_1);
    $(".ui_help_text.i2").html(Application.strings.STR_HELP_CONTENT_2);
    $(".ui_help_text.i3").html(Application.strings.STR_HELP_CONTENT_3);
    $(".ui_general_teamside").css("display", "none");
    $("#img_bg_left0" + Global.selectedTeam).css("display",
        "block");
    $("#img_bg_right0" + Global.selectedTeam).css("display", "block")
};
GuiHelp.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_next":
            this.screenParent && GuiPopupPause ? this.screenParent.addPopup(GuiHelp2, 0, 0) : GuiManager.instance.gotoScreen(GuiManager.SC_HELP2)
    }
};

function GuiHelp2(a, b, c) {
    SScreen.call(this, a, b, c)
}
goog.inherits(GuiHelp2, SScreen);
GuiHelp2.prototype.setGuiHTML = function() {
    this.css = " .ui_help_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_help_background02.jpg); } .ui_help_character {  position: absolute;  top: 354px;  left: 0px;  width: 121px;  height: 146px;  background: url(media/images/ui_images/screens/gui_screens_help_character.png) no-repeat top right; } .ui_help_text {  position: absolute;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 17px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always;  left: 435px;  width: 196px;  height: 55px; } .ui_help_text.i1 {  top: 143px; } .ui_help_text.i2 {  top: 257px; } .ui_help_text.i3 {  top: 380px; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_help_bg'>    <div class='ui_general_teamside l1' id='img_bg_left01'></div>  <div class='ui_general_teamside l2' id='img_bg_left02'></div>  <div class='ui_general_teamside l3' id='img_bg_left03'></div>  <div class='ui_general_teamside l4' id='img_bg_left04'></div>  <div class='ui_general_teamside l5' id='img_bg_left05'></div>  <div class='ui_general_teamside l6' id='img_bg_left06'></div>  <div class='ui_general_teamside r1' id='img_bg_right01'></div>  <div class='ui_general_teamside r2' id='img_bg_right02'></div>  <div class='ui_general_teamside r3' id='img_bg_right03'></div>  <div class='ui_general_teamside r4' id='img_bg_right04'></div>  <div class='ui_general_teamside r5' id='img_bg_right05'></div>  <div class='ui_general_teamside r6' id='img_bg_right06'></div>  <div class='ui_general_screen_title'>INSTRUCTIONS</div>  <div class='ui_general_button_next b1' id='btn_next'></div>  <div class='ui_general_button_back b1' id='btn_back'></div>  \x3c!--<div class='ui_help_subtitle'>SWIPE</div>--\x3e  <div class='ui_help_text i1'>help03</div>  <div class='ui_help_text i2'>help04</div>  <div class='ui_help_text i3'>help05</div>  <div class='ui_help_character'></div>   </div> </div>";
    GuiHelp2.superClass_.setGuiHTML.call(this)
};
GuiHelp2.prototype.init = function() {
    GuiHelp2.superClass_.init.call(this);
    $(".ui_general_screen_title").html(Application.strings.STR_HELP_TITLE);
    this.addClickListener("btn_next");
    this.addClickListener("btn_back");
    $(".ui_help_text.i1").html(Application.strings.STR_HELP_CONTENT_4);
    $(".ui_help_text.i2").html(Application.strings.STR_HELP_CONTENT_5);
    $(".ui_help_text.i3").html(Application.strings.STR_HELP_CONTENT_6);
    $(".ui_general_teamside").css("display", "none");
    $("#img_bg_left0" + Global.selectedTeam).css("display",
        "block");
    $("#img_bg_right0" + Global.selectedTeam).css("display", "block")
};
GuiHelp2.prototype.onClick = function(a) {
    Global.app.playSound("SND_UI_CLICK");
    switch (a.id) {
        case "btn_next":
            Global.game_mode === Global.mode_quick_play && (this.screenParent && GuiPopupPause ? this.screenParent.addPopup(GuiPopupPause, 0, 0) : GuiManager.instance.gotoScreen(GuiManager.SC_GAME));
            Global.game_mode === Global.mode_tournament && (this.screenParent && GuiPopupPause ? this.screenParent.addPopup(GuiHelp3, 0, 0) : GuiManager.instance.gotoScreen(GuiManager.SC_HELP3));
            break;
        case "btn_back":
            this.screenParent && GuiPopupPause ?
                this.screenParent.addPopup(GuiHelp, 0, 0) : GuiManager.instance.gotoScreen(GuiManager.SC_HELP)
    }
};

function GuiHelp3(a, b, c) {
    SScreen.call(this, a, b, c)
}
goog.inherits(GuiHelp3, SScreen);
GuiHelp3.prototype.setGuiHTML = function() {
    this.css = " .ui_help_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_help_background03.jpg); } .ui_help_character {  position: absolute;  top: 354px;  left: 0px;  width: 121px;  height: 146px;  background: url(media/images/ui_images/screens/gui_screens_help_character.png) no-repeat top right; } .ui_help_text {  position: absolute;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 17px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always;  left: 287px;  width: 341px;  height: 93px; } .ui_help_text.i1 {  top: 119px; } .ui_help_text.i2 {  top: 238px; } .ui_help_text.i3 {  top: 360px; } .ui_help_text2 {  position: absolute;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 18px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 284px;  width: 43px;  height: 31px; } .ui_help_text2.i1 {  font-size: 30px;  left: 161px;  top: 159px; } .ui_help_text2.i2 {  left: 170px;  top: 275px; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_help_bg'>    <div class='ui_general_teamside l1' id='img_bg_left01'></div>  <div class='ui_general_teamside l2' id='img_bg_left02'></div>  <div class='ui_general_teamside l3' id='img_bg_left03'></div>  <div class='ui_general_teamside l4' id='img_bg_left04'></div>  <div class='ui_general_teamside l5' id='img_bg_left05'></div>  <div class='ui_general_teamside l6' id='img_bg_left06'></div>  <div class='ui_general_teamside r1' id='img_bg_right01'></div>  <div class='ui_general_teamside r2' id='img_bg_right02'></div>  <div class='ui_general_teamside r3' id='img_bg_right03'></div>  <div class='ui_general_teamside r4' id='img_bg_right04'></div>  <div class='ui_general_teamside r5' id='img_bg_right05'></div>  <div class='ui_general_teamside r6' id='img_bg_right06'></div>  <div class='ui_general_screen_title'>CHAMPIONSHIP</div>  <div class='ui_general_button_next b1' id='btn_next'></div>  <div class='ui_general_button_back b1' id='btn_back'></div>  \x3c!--<div class='ui_help_subtitle'>SWIPE</div>--\x3e  <div class='ui_help_text i1'>help06</div>  <div class='ui_help_text i2'>help07</div>  <div class='ui_help_text i3'>help08</div>  <div class='ui_help_text2 i1'>25</div>  <div class='ui_help_text2 i2'>VS</div>  <div class='ui_help_character'></div>   </div> </div>";
    GuiHelp3.superClass_.setGuiHTML.call(this)
};
GuiHelp3.prototype.init = function() {
    GuiHelp3.superClass_.init.call(this);
    $(".ui_general_screen_title").html(Application.strings.STR_HELP_TITLE);
    this.addClickListener("btn_next");
    this.addClickListener("btn_back");
    $(".ui_help_text.i1").html(Application.strings.STR_HELP_CONTENT_7);
    $(".ui_help_text.i2").html(Application.strings.STR_HELP_CONTENT_8);
    $(".ui_help_text.i3").html(Application.strings.STR_HELP_CONTENT_9);
    $(".ui_general_teamside").css("display", "none");
    $("#img_bg_left0" + Global.selectedTeam).css("display",
        "block");
    $("#img_bg_right0" + Global.selectedTeam).css("display", "block")
};
GuiHelp3.prototype.onClick = function(a) {
    Global.app.playSound("SND_UI_CLICK");
    switch (a.id) {
        case "btn_next":
            this.screenParent && GuiPopupPause ? this.screenParent.addPopup(GuiPopupPause, 0, 0) : GuiManager.instance.gotoScreen(GuiManager.SC_GAME);
            break;
        case "btn_back":
            this.screenParent && GuiPopupPause ? this.screenParent.addPopup(GuiHelp2, 0, 0) : GuiManager.instance.gotoScreen(GuiManager.SC_HELP2)
    }
};

function GuiConfirm(a, b, c) {
    SScreen.call(this, a, b, c)
}
goog.inherits(GuiConfirm, SScreen);
GuiConfirm.prototype.setGuiHTML = function() {
    this.css = " .ui_popup_buttons_no {  position: absolute;  top: 201px;  width: 110px;  height: 110px;  background: url(media/images/ui_images/buttons/gui_buttons_icons01.png) no-repeat right top;  cursor: pointer; } .ui_popup_buttons_no.b1 {  left: 457px;  background-position: -440px 0px; } .ui_popup_buttons_no.b1:hover {  background-position: -550px 0px; } .ui_popup_buttons_yes {  position: absolute;  top: 218px;  width: 90px;  height: 90px;  background: url(media/images/ui_images/buttons/gui_buttons_icons02.png) no-repeat right top;  cursor: pointer; } .ui_popup_buttons_yes.b1 {  left: 295px;  background-position: -540px 0px; } .ui_popup_buttons_yes.b1:hover {  background-position: -630px 0px; }";
    this.html =
        " <div class='ui_general_container'>     <div class='ui_general_popup_bg'></div>     <div class='ui_general_popup_character'></div>   <div class='ui_general_popup_support'></div>     <div class='ui_general_popup_title'>" + Application.strings.STR_POPUP_CONFIRM_CHAMPIONSHIP + "</div>   <div class='ui_popup_buttons_yes b1' id='btn_yes'></div>   <div class='ui_popup_buttons_no b1' id='btn_no'></div> </div>";
    GuiConfirm.superClass_.setGuiHTML.call(this)
};
GuiConfirm.prototype.init = function() {
    GuiConfirm.superClass_.init.call(this);
    this.addClickListener("btn_yes");
    this.addClickListener("btn_no");
    GuiConfirm.currentMode == GuiConfirm.MODE_MENU && $(".ui_general_popup_title").html(Application.strings.STR_POPUP_CONFIRM_CHAMPIONSHIP)
};
GuiConfirm.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_yes":
            switch (GuiConfirm.currentMode) {
                case GuiConfirm.MODE_GAME:
                    GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU);
                    break;
                case GuiConfirm.MODE_MENU:
                    Global.game_mode = Global.mode_tournament, GuiManager.instance.gotoScreen(GuiManager.SC_CUTSCENE)
            }
            break;
        case "btn_no":
            switch (GuiConfirm.currentMode) {
                case GuiConfirm.MODE_GAME:
                    this.screenParent && GuiPopupPause && this.screenParent.addPopup(GuiPopupPause,
                        0, 0);
                    break;
                case GuiConfirm.MODE_MENU:
                    this.screenParent.dropPopup()
            }
    }
};
GuiConfirm.MODE_GAME = 1;
GuiConfirm.MODE_MENU = 2;
GuiConfirm.currentMode = GuiConfirm.MODE_GAME;

function GuiEndGame(a, b, c) {
    SScreen.call(this, a, b, c);
    this.m_txtTitle = $(".ui_general_screen_title");
    this.m_txtTitle.html(Application.strings.STR_END_GAME_TITLE)
}
goog.inherits(GuiEndGame, SScreen);
GuiEndGame.prototype.setGuiHTML = function() {
    this.css = " .ui_endlevel_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_endgame_background.jpg)no-repeat right top; } .ui_endgame_button_mainmenu {  position: absolute;  top: 194px;  left: 639px;  width: 110px;  height: 110px;  background: url(media/images/ui_images/buttons/gui_buttons_icons01.png) no-repeat right top;  cursor: pointer; } .ui_endgame_button_mainmenu.b1 {  background-position: -0px 0px; } .ui_endgame_button_mainmenu.b1:hover {  background-position: -110px 0px; } .ui_endgame_screen_title {  position: absolute;  left: 0px;  top: 432px;  width: 749px;  height: 46px;  color: #adfcff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 28px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; }";
    this.html =
        " <div class='ui_general_container'>  <div class='ui_endlevel_bg'>  <div class='ui_endgame_screen_title'>CONGRATULATIONS!</div>  <div class='ui_endgame_button_mainmenu b1 ' id='btn_mainmenu'></div>   </div>  </div> </div>";
    GuiEndGame.superClass_.setGuiHTML.call(this)
};
GuiEndGame.prototype.init = function() {
    GuiEndGame.superClass_.init.call(this);
    this.addClickListener("btn_mainmenu");
    $(".ui_endgame_screen_title").html(Application.strings.STR_END_GAME_TITLE)
};
GuiEndGame.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_mainmenu":
            GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU)
    }
};
GuiEndGame.prototype.onPressSpaceBar = function() {
    GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU);
    GuiEndGame.superClass_.onPressSpaceBar.call(this)
};
GuiEndGame.prototype.onEndTransition = function(a) {
    GuiEndGame.superClass_.onEndTransition.call(this, a);
    a.params && Global.app.guiManager.gotoScreen(a.params.screen)
};

function GuiUserControls(a) {
    this.m_canvasContainer = a;
    this.m_swipeObject = this.m_demoSwipeObject = this.m_drag2 = this.m_drag1 = this.m_btn_z = this.m_btn_x = this.m_btn_right = this.m_btn_left = null;
    Application.isMobileDevice && (this.m_btn_left = new Button(a, 50, 450, "gui_hud_control_l", "left"), this.m_btn_right = new Button(a, 200, 450, "gui_hud_control_r", "right"), this.m_btn_x = new Button(a, 600, 450, "gui_hud_control_a", "x"), this.m_btn_z = new Button(a, 700, 350, "gui_hud_control_u", "z"), this.m_btn_left.setDownCallback(this, "onDown"),
        this.m_btn_left.setUpCallback(this, "onUp"), this.m_btn_right.setDownCallback(this, "onDown"), this.m_btn_right.setUpCallback(this, "onUp"), this.m_btn_x.setDownCallback(this, "onDown"), this.m_btn_x.setUpCallback(this, "onUp"), this.m_btn_z.setDownCallback(this, "onDown"), this.m_btn_z.setUpCallback(this, "onUp"));
    this.m_canvasNode = new SNode;
    this.m_canvasNode.addDrawListener(this, "onDraw");
    this.m_canvasContainer.addChild(this.m_canvasNode)
}
GuiUserControls.prototype.onDraw = function(a) {
    if (ControlTouch.instance.isTouchable && ControlTouch.instance.touches)
        for (var b = 0; b < ControlTouch.instance.touches.length; b++) {
            var c = ControlTouch.instance.touches[b];
            Layout.fixTouchEvent(c);
            a.beginPath();
            a.fillStyle = "white";
            a.fillText("touch id : " + c.identifier + " x:" + c.x + " y:" + c.y, c.x + 30, c.y - 30);
            a.beginPath();
            a.strokeStyle = "cyan";
            a.lineWidth = "6";
            a.arc(c.x, c.y, 40, 0, 2 * Math.PI, !0);
            a.stroke()
        } else a.fillStyle = "white", a.fillText("mouse : " + ControlTouch.instance.mouseX +
            ", " + ControlTouch.instance.mouseY, ControlTouch.instance.mouseX, ControlTouch.instance.mouseY)
};
GuiUserControls.prototype.onUp = function(a) {};
GuiUserControls.prototype.onDown = function(a) {};
GuiUserControls.prototype.free = function() {
    null !== this.m_btn_left && (this.m_btn_left.free(), this.m_btn_left = null);
    null !== this.m_btn_right && (this.m_btn_right.free(), this.m_btn_right = null);
    null !== this.m_btn_x && (this.m_btn_x.free(), this.m_btn_x = null);
    null !== this.m_btn_z && (this.m_btn_z.free(), this.m_btn_z = null);
    null !== this.m_drag1 && (this.m_drag1.free(), this.m_drag1 = null);
    null !== this.m_drag2 && (this.m_drag2.free(), this.m_drag2 = null);
    null !== this.m_demoSwipeObject && (this.m_demoSwipeObject.free(), this.m_demoSwipeObject =
        null);
    null !== this.m_swipeObject && (this.m_swipeObject.free(), this.m_swipeObject = null);
    this.m_canvasContainer.removeChild(this.m_canvasNode)
};

function GuiGame(a, b, c) {
    ScreenGame.call(this, a, b);
    Global.app.stopAllSounds();
    if (Global.game_mode == Global.mode_tournament && Global.championship_stage == Global.CHAMPIONSHIP_FINAL) Global.app.playSound("dko_mus_gameplay3");
    else switch (Common.random(1, 2)) {
        case 1:
            Global.app.playSound("dko_mus_gameplay1");
            break;
        case 2:
            Global.app.playSound("dko_mus_gameplay2")
    }
    GuiGame.instance = this;
    this.userControls = null;
    this.canvasGame = Global.app.addDisplayContainer();
    this.canvasControl = Global.app.addDisplayContainer();
    this.canvasMessage =
        Global.app.addDisplayContainer();
    this.debugCanvas = Application.instance.addDisplayContainer();
    Global.app.core.rootScene.addChild(this.debugCanvas);
    Global.app.core.rootScene.addChild(this.canvasGame);
    Global.app.core.rootScene.addChild(this.canvasControl);
    Global.app.core.rootScene.addChild(this.canvasMessage);
    this.createGame()
}
goog.inherits(GuiGame, ScreenGame);
GuiGame.instance = null;
GuiGame.TX_INIT_GAME = 0;
GuiGame.TX_REMOVE_GAME = 1;
GuiGame.prototype.createGame = function() {
    this.userControls && (this.userControls.free(), this.userControls = null);
    switch (Global.level) {
        case 1:
            if (!0 == Global.data.needTutorial) {
                switch (Global.selectedVenue) {
                    case Global.VENUE_NONE:
                        Global.game = this.m_game = new GameTutorial(this.canvasGame, "soccerbrazil");
                        break;
                    case Global.VENUE_PARIS:
                        Global.game = this.m_game = new GameTutorial(this.canvasGame, "soccerparis");
                        break;
                    case Global.VENUE_NEW_YORK:
                        Global.game = this.m_game = new GameTutorial(this.canvasGame, "soccernewyork");
                        break;
                    case Global.VENUE_TOKYO:
                        Global.game = this.m_game = new GameTutorial(this.canvasGame, "soccertokyo");
                        break;
                    case Global.VENUE_BEIJING:
                        Global.game = this.m_game = new GameTutorial(this.canvasGame, "soccerbeijing");
                        break;
                    case Global.VENUE_ITALY:
                        Global.game = this.m_game = new GameTutorial(this.canvasGame, "socceritaly");
                        break;
                    case Global.VENUE_IDAHO:
                        Global.game = this.m_game = new GameTutorial(this.canvasGame, "socceridaho")
                }
                break
            }
            switch (Global.selectedVenue) {
                case Global.VENUE_NONE:
                    Global.game = this.m_game = new GameSoccer(this.canvasGame,
                        "soccerbrazil");
                    break;
                case Global.VENUE_PARIS:
                    Global.game = this.m_game = new GameSoccer(this.canvasGame, "soccerparis");
                    break;
                case Global.VENUE_NEW_YORK:
                    Global.game = this.m_game = new GameSoccer(this.canvasGame, "soccernewyork");
                    break;
                case Global.VENUE_TOKYO:
                    Global.game = this.m_game = new GameSoccer(this.canvasGame, "soccertokyo");
                    break;
                case Global.VENUE_BEIJING:
                    Global.game = this.m_game = new GameSoccer(this.canvasGame, "soccerbeijing");
                    break;
                case Global.VENUE_ITALY:
                    Global.game = this.m_game = new GameSoccer(this.canvasGame,
                        "socceritaly");
                    break;
                case Global.VENUE_IDAHO:
                    Global.game = this.m_game = new GameSoccer(this.canvasGame, "socceridaho")
            }
            break;
        case 2:
            Global.game = this.m_game = new GameM1(this.canvasGame);
            break;
        case 3:
            Global.game = this.m_game = new GameM2(this.canvasGame);
            break;
        case 4:
            Global.game = this.m_game = new GameRunner(this.canvasGame, "RunnerLevel01")
    }
};
GuiGame.prototype.removeGame = function() {
    this.m_deleteGame || (this.m_deleteGame = !0, this.m_game.free(), this.m_game = null, Global.app.guiManager.gotoScreen(GuiManager.SC_MAIN_MENU))
};
GuiGame.prototype.onMouseDown = function(a) {
    if (null !== Global.game) Global.game.onMouseDown(a)
};
GuiGame.prototype.onMouseUp = function(a) {
    if (null !== Global.game) Global.game.onMouseUp(a)
};
GuiGame.prototype.onEndTransition = function(a) {
    GuiGame.superClass_.onEndTransition.call(this, a);
    if (a.params) switch (a.params.action) {
        case GuiGame.TX_REMOVE_GAME:
            this.m_game.free(), this.m_game = null, Global.app.guiManager.gotoScreen(GuiManager.SC_MAIN_MENU)
    }
};
GuiGame.prototype.free = function() {
    Global.app.stopAllSounds();
    for (var a = this.debugCanvas.getFirstChild(); a;) GuiGame.instance.debugCanvas.removeChild(a), a = this.debugCanvas.getFirstChild();
    null !== this.userControls && this.userControls.free();
    this.userControls = null;
    Global.game = null;
    GuiGame.instance = null;
    Global.app.core.rootScene.removeChild(this.canvasGame);
    this.canvasGame = null;
    GuiGame.superClass_.free.call(this)
};

function GuiPopupPause(a, b, c) {
    SScreen.call(this, a, b, c);
    this.name = "pause"
}
goog.inherits(GuiPopupPause, SScreen);
GuiPopupPause.prototype.setGuiHTML = function() {
    this.css = " .ui_popup_buttons_resume {  position: absolute;  top: 201px;  width: 110px;  height: 110px;  background: url(media/images/ui_images/buttons/gui_buttons_icons01.png) no-repeat right top;  cursor: pointer; } .ui_popup_buttons_resume.b1 {  left: 457px;  background-position: -660px 0px; } .ui_popup_buttons_resume.b1:hover {  background-position: -770px 0px; } .ui_popup_buttons_quit {  position: absolute;  top: 218px;  width: 90px;  height: 90px;  background: url(media/images/ui_images/buttons/gui_buttons_icons02.png) no-repeat right top;  cursor: pointer; } .ui_popup_buttons_quit.b1 {  left: 295px;  background-position: -360px 0px; } .ui_popup_buttons_quit.b1:hover {  background-position: -450px 0px; } .ui_popup_buttons_tools {  position: absolute;  top: 108px;  width: 60px;  height: 60px;  background: url(media/images/ui_images/buttons/gui_buttons_icons03.png) no-repeat right top;  cursor: pointer; } .ui_popup_buttons_tools.h1 {  left: 600px;  background-position: 0px 0px; } .ui_popup_buttons_tools.h1:hover {  background-position: -60px 0px; }  .ui_popup_buttons_sound {  position: absolute;  top: 108px;  width: 60px;  height: 60px;  background: url(media/images/ui_images/buttons/gui_buttons_icons03.png) no-repeat right top;  cursor: pointer; } .ui_popup_buttons_sound.t1 {  left: 600px;  top: 173px;  background-position: -600px 0px; } .ui_popup_buttons_sound.t1:hover {  left: 600px;  top: 173px;  background-position: -660px 0px; } .ui_popup_buttons_sound.t2 {  left: 600px;  top: 173px;  background-position: -480px 0px; } .ui_popup_buttons_sound.t2:hover {  left: 600px;  top: 173px;  background-position: -540px 0px; }";
    this.html =
        "   <div class='ui_general_container'>      <div class='ui_general_popup_bg'></div>    <div class='ui_general_popup_character'></div>    <div class='ui_general_popup_support'></div>      <div class='ui_general_popup_title'>" + Application.strings.STR_POPUP_MSN + "</div>    <div class='ui_popup_buttons_resume b1' id='btn_resume'></div>    <div class='ui_popup_buttons_tools h1' id='btn_help'></div>    <div class='ui_popup_buttons_sound t1' id='btn_soundon_pause'></div>    <div class='ui_popup_buttons_sound t2' id='btn_soundoff_pause'></div>    <div class='ui_popup_buttons_quit b1' id='btn_quit'></div>   </div>";
    GuiPopupPause.superClass_.setGuiHTML.call(this)
};
GuiPopupPause.prototype.init = function() {
    GuiPopupPause.superClass_.init.call(this);
    this.addClickListener("btn_soundoff_pause");
    this.addClickListener("btn_soundon_pause");
    this.addClickListener("btn_resume");
    this.addClickListener("btn_help");
    this.addClickListener("btn_quit");
    Global.app.isSoundOn() ? ($(".ui_popup_buttons_sound.t2").css("display", "none"), $(".ui_popup_buttons_sound.t1").css("display", "block")) : ($(".ui_popup_buttons_sound.t2").css("display", "block"), $(".ui_popup_buttons_sound.t1").css("display",
        "none"));
    Global.app.stopSound("SND_BG_GAME")
};
GuiPopupPause.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_resume":
            this.screenParent.dropPopup();
            Global.game.setPause && Global.game.setPause(!1);
            Global.app.playSound("SND_BG_GAME");
            break;
        case "btn_help":
            this.screenParent.addPopup(GuiHelp, 0, 0);
            break;
        case "btn_soundon_pause":
            Global.app.toogleMute();
            $(".ui_popup_buttons_sound.t2").css("display", "block");
            $(".ui_popup_buttons_sound.t1").css("display", "none");
            break;
        case "btn_soundoff_pause":
            Global.app.toogleMute();
            $(".ui_popup_buttons_sound.t2").css("display", "none");
            $(".ui_popup_buttons_sound.t1").css("display", "block");
            break;
        case "btn_quit":
            GuiConfirm.currentMode = GuiConfirm.MODE_GAME, this.screenParent.addPopup(GuiConfirm, 0, 0)
    }
};
GuiPopupPause.prototype.onEndTransition = function(a) {
    GuiPopupPause.superClass_.onEndTransition.call(this, a);
    a.params && Global.app.guiManager.gotoScreen(a.params.screen)
};
GuiPopupPause.prototype.update = function(a) {
    GuiPopupPause.superClass_.update.call(this, a)
};
GuiPopupPause.prototype.onMouseUp = function(a) {
    GuiPopupPause.superClass_.onMouseUp.call(this, a);
    GuiManager.instance.gotoScreen(GuiManager.SC_GAME)
};
GuiPopupPause.prototype.onPressSpaceBar = function() {
    GuiPopupPause.superClass_.onPressSpaceBar.call(this);
    GuiManager.instance.gotoScreen(GuiManager.SC_GAME)
};
GuiPopupPause.prototype.onTransitionIn = function() {
    $(".ui_popup_buttons_tools.s1").css("display", "none");
    $(".ui_popup_buttons_tools.s2").css("display", "none");
    Application.instance && (Application.instance.soundManager.mute ? $(".ui_popup_buttons.tools.s1").css({
        display: ""
    }) : $(".ui_popup_buttons.tools.s2").css({
        display: ""
    }))
};

function GuiMainMenu(a, b, c) {
    SScreen.call(this, a, b, c);
    Global.onHalfTime = !1;
    Global.extraTimeGame = 0;
    Global.app.stopAllSounds();
    GuiMainMenu.doneFirstLoader = !0;
    Global.app.stopAllSounds();
    Global.app.playSound("dko_mus_title");
    $("#btn_tournament").css("display", "none");
    Global.enableChampionship && $("#btn_tournament").css("display", "")
}
goog.inherits(GuiMainMenu, SScreen);
GuiMainMenu.doneFirstLoader = !1;
GuiMainMenu.prototype.setGuiHTML = function() {
    this.css = " .ui_mainmenu_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_mainmenu_background.jpg); } .ui_mainmenu_logo {  position: absolute;  top: 2px;  left: 1px;  width: 188px;  height: 82px;  background: url(media/images/localized/gui_screens_mainmenu_logo.png); } .ui_mainmenu_name {  position: absolute;  width: 504px;  height: 329px;  left: 164px;  top: 74px;  background: url(media/images/localized/gui_screens_mainmenu_name.png); } .ui_mainmenu_button_text {  background: url('media/images/ui_images/buttons/gui_buttons_text.png') no-repeat scroll right top rgba(0, 0, 0, 0);  color: #ffffff;  cursor: pointer;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 18px;  height: 85px;  padding-top: 35px;  position: absolute;  text-align: center;  top: 346px;  width: 373px;  height: 102px;  left: 33px; } .ui_mainmenu_button_text.b1 {  background-position: 0px 0px;  left: 191px; } .ui_mainmenu_button_text.b1:hover {  background-position: -373px 0px;  font-size: 20px; } .ui_mainmenu_button_text2 {  background: url('media/images/ui_images/buttons/gui_buttons_text02.png') no-repeat scroll right top rgba(0, 0, 0, 0);  color: #ffffff;  cursor: pointer;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 14px;  height: 80px;  padding-top: 27px;  position: absolute;  text-align: center;  top: 421px;  width: 310px;  height: 80px;  left: 376px; } .ui_mainmenu_button_text2.b2 {  background-position: 0px 0px;  left: 293px; } .ui_mainmenu_button_text2.b2:hover {  background-position: -310px 0px;  font-size: 16px; } .ui_mainmenu_button_icons {  background: url('media/images/ui_images/buttons/gui_buttons_icons03.png') no-repeat scroll right top rgba(0, 0, 0, 0);  cursor: pointer;  height: 60px;  position: absolute;  top: 13px;  width: 60px; } .ui_mainmenu_button_icons.t1 {  background-position: -720px 0px;  left: 594px; } .ui_mainmenu_button_icons.t1:hover {  background-position: -780px 0px; } .ui_mainmenu_button_icons.s1 {  background-position: -480px 0px;  left: 676px; } .ui_mainmenu_button_icons.s1:hover {  background-position: -540px 0px; } .ui_mainmenu_button_icons.s2 {  background-position: -600px 0px;  left: 676px; } .ui_mainmenu_button_icons.s2:hover {  background-position: -660px 0px; } .ui_mainmenu_button_minigame {  background: url('media/images/ui_images/buttons/gui_buttons_icons03.png') no-repeat scroll right top rgba(0, 0, 0, 0);  cursor: pointer;  height: 60px;  position: absolute;  top: 50px;  left: 600px;  width: 60px; } .ui_mainmenu_button_minigame.m1 {  background-position: -432px 0px;  } .ui_mainmenu_button_minigame.m1:hover {  background-position: -270px 0px;  } .ui_mainmenu_button_minigame.m2 {  background-position: -432px 0px;  top: 150px; } .ui_mainmenu_button_minigame.m2:hover {  background-position: -270px 0px;   top: 150px; } .ui_mainmenu_button_minigame.m3 {  background-position: -432px 0px;  top: 250px; } .ui_mainmenu_button_minigame.m3:hover {  background-position: -270px 0px;   top: 250px; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_mainmenu_bg'>  <div class='ui_mainmenu_logo'></div>  <div class='ui_mainmenu_name'></div>  <div class='ui_mainmenu_button_icons t1' id='btn_trophies'></div>  <div class='ui_mainmenu_button_icons s1' id='btn_soundoff'></div>  <div class='ui_mainmenu_button_icons s2' id='btn_soundon'></div>   <div class='ui_mainmenu_button_text b1' id='btn_tournament'>CHAMPIONSHIP MODE</div>  <div class='ui_mainmenu_button_text2 b2' id='btn_play'>EXHIBITION MODE</div>  \x3c!--<div class='ui_mainmenu_button_minigame m1' id='btn_minigame1'></div>  <div class='ui_mainmenu_button_minigame m2' id='btn_minigame2'></div>  <div class='ui_mainmenu_button_minigame m3' id='btn_minigame3'></div>--\x3e   </div> </div>";
    GuiMainMenu.superClass_.setGuiHTML.call(this)
};
GuiMainMenu.prototype.onGetMatchups = function(a) {
    Global.matchups = [];
    if (null === a) GuiNotification.currentMode = GuiNotification.MODE_SERVER_ISSUES, this.addPopup(GuiNotification, 0, 0);
    else {
        a = $.parseJSON(a);
        for (var b = 0; b < a.matchups.length; ++b)
            if (0 > parseInt(a.matchups.charAt(b), 10) || parseInt(a.matchups.charAt(b), 10) > Global.TOTAL_TEAMS && -1 === a.matchups.indexOf(Global.INDEX_CHAMPIONSHIP_END)) {
                GuiNotification.currentMode = GuiNotification.MODE_SERVER_ISSUES;
                this.addPopup(GuiNotification, 0, 0);
                return
            }
        if (6 == a.matchups.length) Global.matchups.push([parseInt(a.matchups.charAt(0),
            10), parseInt(a.matchups.charAt(1), 10)]), Global.matchups.push([parseInt(a.matchups.charAt(2), 10), parseInt(a.matchups.charAt(3), 10)]), Global.matchups.push([parseInt(a.matchups.charAt(4), 10), parseInt(a.matchups.charAt(5), 10)]), Global.championship_stage = Global.CHAMPIONSHIP_NORMAL;
        else if (4 == a.matchups.length) Global.matchups.push([parseInt(a.matchups.charAt(0), 10), parseInt(a.matchups.charAt(1), 10)]), Global.matchups.push([parseInt(a.matchups.charAt(2), 10), parseInt(a.matchups.charAt(3), 10)]), Global.championship_stage =
            Global.CHAMPIONSHIP_SEMI, Global.data.saveSemisMatchs(a.matchups);
        else if (2 == a.matchups.length) Global.matchups.push([parseInt(a.matchups.charAt(0), 10), parseInt(a.matchups.charAt(1), 10)]), Global.championship_stage = Global.CHAMPIONSHIP_FINAL;
        else if (-1 !== a.matchups.indexOf(Global.INDEX_CHAMPIONSHIP_END)) Global.championship_stage = Global.CHAMPIONSHIP_END;
        else {
            GuiNotification.currentMode = GuiNotification.MODE_SERVER_ISSUES;
            this.addPopup(GuiNotification, 0, 0);
            return
        }
        a = !1;
        for (b = 0; b < Global.matchups.length; ++b)
            for (var c =
                0; c < Global.matchups[b].length; ++c)
                if (Global.data.selectedTeam == Global.matchups[b][c]) switch (a = !0, c) {
                    case 0:
                        Global.isTeamPlayerLocal = !0;
                        break;
                    case 1:
                        Global.isTeamPlayerLocal = !1
                }!1 == a && Global.data.selectTeam(Global.TEAM_NONE);
        Global.game_mode = Global.mode_tournament;
        Global.championship_stage == Global.CHAMPIONSHIP_END ? (GuiTeamStanding.prePage = GuiManager.SC_MAIN_MENU, GuiManager.instance.gotoScreen(GuiManager.SC_WINNER_GAME)) : !0 == Global.data.needCutscene ? GuiManager.instance.gotoScreen(GuiManager.SC_CUTSCENE) :
            0 === Global.data.selectedTeam ? GuiManager.instance.gotoScreen(GuiManager.SC_SELECT_TEAM) : (Global.selectedTeam = Global.data.selectedTeam, GuiManager.instance.gotoScreen(GuiManager.SC_DAILY_MATCH))
    }
};
GuiMainMenu.prototype.init = function() {
    GuiMainMenu.superClass_.init.call(this);
    Application.instance.onOrientationchange(null);
    this.addClickListener("btn_tournament");
    this.addClickListener("btn_trophies");
    this.addClickListener("btn_soundon");
    this.addClickListener("btn_soundoff");
    this.addClickListener("btn_play");
    $(".ui_mainmenu_button_icons.s1").css("display", "none");
    $(".ui_mainmenu_button_icons.s2").css("display", "block");
    !1 === Global.app.isSoundOn() && Global.app.toogleMute();
    $("#btn_tournament").html(Application.strings.STR_TOURNAMENT);
    $("#btn_play").html(Application.strings.STR_QUICKPLAY)
};
GuiMainMenu.prototype.getNextEnemy = function() {
    for (var a = [], b = 1; 6 >= b; b++) b !== Global.selectedTeam && a.push(b);
    return a[Common.random(0, a.length - 1)]
};
GuiMainMenu.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_tournament":
            if (!Application.config.settings.enableChampMode) {
                GuiNotification.currentMode = GuiNotification.MODE_COMING_SOON;
                this.addPopup(GuiNotification, 0, 0);
                break
            }
            Server.instance.getMatchups(this, this.onGetMatchups);
            break;
        case "btn_trophies":
            GuiManager.instance.gotoScreen(GuiManager.SC_TROPHIES);
            break;
        case "btn_play":
            Global.game_mode = Global.mode_quick_play;
            GuiManager.instance.gotoScreen(GuiManager.SC_SELECT_TEAM);
            break;
        case "btn_soundon":
            Global.app.toogleMute();
            $(".ui_mainmenu_button_icons.s1").css("display", "block");
            $(".ui_mainmenu_button_icons.s2").css("display", "none");
            break;
        case "btn_soundoff":
            Global.app.toogleMute(), $(".ui_mainmenu_button_icons.s1").css("display", "none"), $(".ui_mainmenu_button_icons.s2").css("display", "block")
    }
};
GuiMainMenu.prototype.onEndTransition = function(a) {
    GuiMainMenu.superClass_.onEndTransition.call(this, a)
};
GuiMainMenu.prototype.onMouseUp = function(a) {
    GuiMainMenu.superClass_.onMouseUp.call(this, a)
};
GuiMainMenu.prototype.onPressSpaceBar = function() {
    GuiMainMenu.superClass_.onPressSpaceBar.call(this)
};

function GuiSelectVenue(a, b, c) {
    this.m_txtVenue = null;
    SScreen.call(this, a, b, c)
}
goog.inherits(GuiSelectVenue, SScreen);
GuiSelectVenue.prototype.setGuiHTML = function() {
    this.css = " .ui_selectvenue_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_selectvenue_background.jpg); } .ui_selectvenue_character {  position: absolute;  top: 346px;  left: 0px;  width: 571px;  height: 154px;  background: url(media/images/ui_images/screens/gui_screens_selectvenue_character.png); } .ui_selectvenue_title {  position: absolute;  width: 362px;  height: 35px;  color: #3b586c;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 20px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 197px;  top: 437px; } .ui_selectvenue_levels {  background: url(media/images/ui_images/buttons/gui_buttons_level.png) no-repeat right top;  color: #ffffff;  cursor: pointer;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 34px;  padding-top: 26px;  position: absolute;  text-align: center;  width: 90px;  height: 93px;  left: 473px;  top: 214px; } .ui_selectvenue_levels.l1 {  top: 124px;  left: 249px;  background-position: 0px 0px; } .ui_selectvenue_levels.l1:hover {  background-position: -90px 0px;  padding-top: 16px;  font-size: 50px;  color: #c42700; } .ui_selectvenue_levels.l2 {  top: 218px;  left: 210px;  background-position: 0px 0px; } .ui_selectvenue_levels.l2:hover {  background-position: -90px 0px;  padding-top: 16px;  font-size: 50px;  color: #c42700; }  .ui_selectvenue_levels.l3 {  background-position: 0px 0px;  top: 309px;  left: 265px; } .ui_selectvenue_levels.l3:hover {  background-position: -90px 0px;  padding-top: 16px;  font-size: 50px;  color: #c42700; } .ui_selectvenue_levels.l4 {  background-position: 0px 0px;  top: 125px;  left: 415px; } .ui_selectvenue_levels.l4:hover {  background-position: -90px 0px;  padding-top: 16px;  font-size: 50px;  color: #c42700; } .ui_selectvenue_levels.l5 {  background-position: 0px 0px;  top: 222px;  left: 451px; } .ui_selectvenue_levels.l5:hover {  background-position: -90px 0px;  padding-top: 16px;  font-size: 50px;  color: #c42700; } .ui_selectvenue_levels.l6 {  background-position: 0px 0px;  top: 308px;  left: 419px; } .ui_selectvenue_levels.l6:hover {  background-position: -90px 0px;  padding-top: 16px;  font-size: 50px;  color: #c42700; } .ui_selectvenue_selectlevel {  background: url(media/images/ui_images/buttons/gui_buttons_level.png) no-repeat right top;  color: #ffffff;  cursor: pointer;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 34px;  padding-top: 26px;  position: absolute;  text-align: center;  width: 90px;  height: 93px;  left: 473px;  top: 214px; } .ui_selectvenue_selectlevel.l1 {  background-position: -90px 0px;  top: 124px;  left: 249px;  padding-top: 16px;  font-size: 50px;  color: #c42700; } .ui_selectvenue_selectlevel.l2 {  background-position: -90px 0px;  top: 218px;  left: 210px;  padding-top: 16px;  font-size: 50px;  color: #c42700; }  .ui_selectvenue_selectlevel.l3 {  background-position: -90px 0px;  top: 309px;  left: 265px;  padding-top: 16px;  font-size: 50px;  color: #c42700; } .ui_selectvenue_selectlevel.l4 {  background-position: -90px 0px;  top: 125px;  left: 415px;  padding-top: 16px;  font-size: 50px;  color: #c42700; } .ui_selectvenue_selectlevel.l5 {  background-position: -90px 0px;  top: 222px;  left: 451px;  padding-top: 16px;  font-size: 50px;  color: #c42700; } .ui_selectvenue_selectlevel.l6 {  background-position: -90px 0px;  top: 308px;  left: 419px;  padding-top: 16px;  font-size: 50px;  color: #c42700; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_selectvenue_bg'>    <div class='ui_general_teamside l1' id='img_bg_left01'></div>  <div class='ui_general_teamside l2' id='img_bg_left02'></div>  <div class='ui_general_teamside l3' id='img_bg_left03'></div>  <div class='ui_general_teamside l4' id='img_bg_left04'></div>  <div class='ui_general_teamside l5' id='img_bg_left05'></div>  <div class='ui_general_teamside l6' id='img_bg_left06'></div>  <div class='ui_general_teamside r1' id='img_bg_right01'></div>  <div class='ui_general_teamside r2' id='img_bg_right02'></div>  <div class='ui_general_teamside r3' id='img_bg_right03'></div>  <div class='ui_general_teamside r4' id='img_bg_right04'></div>  <div class='ui_general_teamside r5' id='img_bg_right05'></div>  <div class='ui_general_teamside r6' id='img_bg_right06'></div>  <div class='ui_general_screen_title'>SELECT VENUE</div>  <div class='ui_general_button_back b1' id='btn_back'></div>  <div class='ui_general_button_ok b1' id='btn_ok'></div>  <div class='ui_selectvenue_character'></div>   <div class='ui_selectvenue_title'>PARIS</div>  <div class='ui_selectvenue_levels l1' id='btn_level01'>1</div>  <div class='ui_selectvenue_levels l2' id='btn_level02'>2</div>  <div class='ui_selectvenue_levels l3' id='btn_level03'>3</div>  <div class='ui_selectvenue_levels l4' id='btn_level04'>4</div>  <div class='ui_selectvenue_levels l5' id='btn_level05'>5</div>  <div class='ui_selectvenue_levels l6' id='btn_level06'>6</div>  <div class='ui_selectvenue_selectlevel l1' id='btn_levelselect01'>1</div>  <div class='ui_selectvenue_selectlevel l2' id='btn_levelselect02'>2</div>  <div class='ui_selectvenue_selectlevel l3' id='btn_levelselect03'>3</div>  <div class='ui_selectvenue_selectlevel l4' id='btn_levelselect04'>4</div>  <div class='ui_selectvenue_selectlevel l5' id='btn_levelselect05'>5</div>  <div class='ui_selectvenue_selectlevel l6' id='btn_levelselect06'>6</div>   </div> </div>";
    GuiSelectVenue.superClass_.setGuiHTML.call(this)
};
GuiSelectVenue.prototype.setVenue = function(a) {
    $(".ui_selectvenue_title").html(a)
};
GuiSelectVenue.prototype.setDefaultState = function() {
    $("#btn_levelselect01").css("display", "none");
    $("#btn_levelselect02").css("display", "none");
    $("#btn_levelselect03").css("display", "none");
    $("#btn_levelselect04").css("display", "none");
    $("#btn_levelselect05").css("display", "none");
    $("#btn_levelselect06").css("display", "none");
    $("#btn_level01").css("display", "block");
    $("#btn_level02").css("display", "block");
    $("#btn_level03").css("display", "block");
    $("#btn_level04").css("display", "block");
    $("#btn_level05").css("display",
        "block");
    $("#btn_level06").css("display", "block");
    $("#btn_ok").css("display", "none");
    $(".ui_general_teamside").css("display", "none");
    $("#img_bg_left0" + Global.selectedTeam).css("display", "");
    $("#img_bg_right0" + Global.selectedTeam).css("display", "");
    this.setVenue(Application.strings.STR_SELECT_VENUE)
};
GuiSelectVenue.prototype.init = function() {
    GuiSelectVenue.superClass_.init.call(this);
    $(".ui_general_screen_title").html(Application.strings.STR_SELECT_VENUE);
    this.addClickListener("btn_ok");
    this.addClickListener("btn_back");
    this.addClickListener("btn_level01");
    this.addClickListener("btn_level02");
    this.addClickListener("btn_level03");
    this.addClickListener("btn_level04");
    this.addClickListener("btn_level05");
    this.addClickListener("btn_level06");
    this.addClickListener("btn_levelselect01");
    this.addClickListener("btn_levelselect02");
    this.addClickListener("btn_levelselect03");
    this.addClickListener("btn_levelselect04");
    this.addClickListener("btn_levelselect05");
    this.addClickListener("btn_levelselect06");
    this.setDefaultState()
};
GuiSelectVenue.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_ok":
            GuiManager.instance.gotoScreen(GuiManager.SC_EXHIBITION_MATCH);
            break;
        case "btn_back":
            GuiManager.instance.gotoScreen(GuiManager.SC_SELECT_TEAM);
            break;
        case "btn_level01":
            this.setDefaultState();
            Global.selectedVenue = Global.VENUE_PARIS;
            $("#btn_level01").css("display", "none");
            $("#btn_levelselect01").css("display", "block");
            this.setVenue(Application.strings.STR_SELECTED_VENUE_PARIS);
            $("#btn_ok").css("display",
                "block");
            break;
        case "btn_level02":
            this.setDefaultState();
            Global.selectedVenue = Global.VENUE_NEW_YORK;
            $("#btn_level02").css("display", "none");
            $("#btn_levelselect02").css("display", "block");
            this.setVenue(Application.strings.STR_SELECTED_VENUE_NEW_YORK);
            $("#btn_ok").css("display", "block");
            break;
        case "btn_level03":
            this.setDefaultState();
            Global.selectedVenue = Global.VENUE_TOKYO;
            $("#btn_level03").css("display", "none");
            $("#btn_levelselect03").css("display", "block");
            this.setVenue(Application.strings.STR_SELECTED_VENUE_TOKYO);
            $("#btn_ok").css("display", "block");
            break;
        case "btn_level04":
            this.setDefaultState();
            Global.selectedVenue = Global.VENUE_BEIJING;
            $("#btn_level04").css("display", "none");
            $("#btn_levelselect04").css("display", "block");
            this.setVenue(Application.strings.STR_SELECTED_VENUE_BEIJING);
            $("#btn_ok").css("display", "block");
            break;
        case "btn_level05":
            this.setDefaultState();
            Global.selectedVenue = Global.VENUE_ITALY;
            $("#btn_level05").css("display", "none");
            $("#btn_levelselect05").css("display", "block");
            this.setVenue(Application.strings.STR_SELECTED_VENUE_ITALY);
            $("#btn_ok").css("display", "block");
            break;
        case "btn_level06":
            this.setDefaultState();
            Global.selectedVenue = Global.VENUE_IDAHO;
            $("#btn_level06").css("display", "none");
            $("#btn_levelselect06").css("display", "block");
            this.setVenue(Application.strings.STR_SELECTED_VENUE_IDAHO);
            $("#btn_ok").css("display", "block");
            break;
        case "btn_levelselect01":
            this.setDefaultState();
            Global.selectedVenue = Global.VENUE_NONE;
            $("#btn_level01").css("display", "block");
            $("#btn_levelselect01").css("display", "none");
            break;
        case "btn_levelselect02":
            this.setDefaultState();
            Global.selectedVenue = Global.VENUE_NONE;
            $("#btn_level02").css("display", "block");
            $("#btn_levelselect02").css("display", "none");
            break;
        case "btn_levelselect03":
            this.setDefaultState();
            Global.selectedVenue = Global.VENUE_NONE;
            $("#btn_level03").css("display", "block");
            $("#btn_levelselect03").css("display", "none");
            break;
        case "btn_levelselect04":
            this.setDefaultState();
            Global.selectedVenue = Global.VENUE_NONE;
            $("#btn_level04").css("display", "block");
            $("#btn_levelselect04").css("display", "none");
            break;
        case "btn_levelselect05":
            this.setDefaultState();
            Global.selectedVenue = Global.VENUE_NONE;
            $("#btn_level05").css("display", "block");
            $("#btn_levelselect05").css("display", "none");
            break;
        case "btn_levelselect06":
            this.setDefaultState(), Global.selectedVenue = Global.VENUE_NONE, $("#btn_level06").css("display", "block"), $("#btn_levelselect06").css("display", "none")
    }
};

function GuiSelectTeam(a, b, c) {
    SScreen.call(this, a, b, c);
    this.m_txtSelectedTeam = $(".ui_selectteam_title");
    this.m_txtVenue = $(".ui_selectteam_info");
    Global.game_mode == Global.mode_tournament && (!0 == Global.data.isFirstGame ? (GuiNotification.currentMode = GuiNotification.MODE_CHAMPIONSHIP, this.addPopup(GuiNotification, 0, 0), Global.data.onFirstGame()) : (Global.championship_stage == Global.CHAMPIONSHIP_SEMI && !0 == Global.data.showMessageSemifinal && (GuiNotification.currentMode = GuiNotification.MODE_SEMIFINAL_NEG, this.addPopup(GuiNotification,
        0, 0), Global.data.onShowMessageSemifinal()), Global.championship_stage == Global.CHAMPIONSHIP_FINAL && !0 == Global.data.showMessageFinal && (GuiNotification.currentMode = GuiNotification.MODE_FINAL_NEG, this.addPopup(GuiNotification, 0, 0), Global.data.onShowMessageFinal())));
    this.m_onWaitSkip = this.m_selectingEnemy = !1;
    this.m_timeWaitSkip = 0
}
goog.inherits(GuiSelectTeam, SScreen);
GuiSelectTeam.prototype.setGuiHTML = function() {
    this.css = " .ui_selectteam_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_selectteam_background.jpg); } .ui_selectteam_screen_title {  position: absolute;  left: 20px;  top: 48px;  width: 749px;  height: 32px;  color: #adfcff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 22px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_selectplayer_button {  position: absolute;  top: 100px;  width: 200px;  height: 240px;  background: url(media/images/ui_images/buttons/gui_buttons_selectcharacter.png) no-repeat right top;  cursor: pointer; } .ui_selectplayer_button.p1 {  left: 100px;  background-position: -200px 0px; } .ui_selectplayer_button.p1:hover {  left: 100px;  background-position: 0px 0px; } .ui_selectplayer_button.p2 {  left: 400px;  background-position: -600px 0px; } .ui_selectplayer_button.p2:hover {  left: 400px;  background-position: -400px 0px; } .ui_selectteam_button_character{  position: absolute;  width: 111px;  height: 127px;  background: url(media/images/ui_images/buttons/gui_buttons_character.png) no-repeat right top;  cursor: pointer; } .ui_selectteam_button_character.c1 {  left: 114px;  top: 123px;  background-position: -111px 0px; } .ui_selectteam_button_character.c1:hover {  left: 114px;  top: 123px;  background-position: 0px 0px; } .ui_selectteam_button_character.c2 {  left: 240px;  top: 123px;  background-position: -333px 0px; } .ui_selectteam_button_character.c2:hover {  left: 240px;  top: 123px;  background-position: -222px 0px; } .ui_selectteam_button_character.c3 {  left: 128px;  top: 219px;  background-position: -555px 0px; } .ui_selectteam_button_character.c3:hover {  left: 128px;  top: 219px;  background-position: -444px 0px; } .ui_selectteam_button_character.c4 {  left: 248px;  top: 222px;  background-position: -777px 0px; } .ui_selectteam_button_character.c4:hover {  left: 248px;  top: 222px;  background-position: -666px 0px; } .ui_selectteam_button_character.c5 {  left: 138px;  top: 319px;  background-position: -999px 0px; } .ui_selectteam_button_character.c5:hover {  left: 138px;  top: 319px;  background-position: -888px 0px; } .ui_selectteam_button_character.c6 {  left: 246px;  top: 324px;  background-position: -1221px 0px; } .ui_selectteam_button_character.c6:hover {  left: 246px;  top: 324px;  background-position: -1110px 0px; } .ui_selectteam_button_selected {  position: absolute;  width: 111px;  height: 127px;  background: url(media/images/ui_images/buttons/gui_buttons_character.png) no-repeat right top;  cursor: pointer; } .ui_selectteam_button_selected.c1 {  left: 114px;  top: 123px;  background-position: 0px 0px; } .ui_selectteam_button_selected.c2 {  left: 240px;  top: 123px;  background-position: -222px 0px; } .ui_selectteam_button_selected.c3 {  left: 128px;  top: 219px;  background-position: -444px 0px; } .ui_selectteam_button_selected.c4 {  left: 248px;  top: 222px;  background-position: -666px 0px; } .ui_selectteam_button_selected.c5 {  left: 138px;  top: 319px;  background-position: -888px 0px; } .ui_selectteam_button_selected.c6 {  left: 246px;  top: 324px;  background-position: -1110px 0px; } .ui_selectteam_buttonp1_selected {  position: absolute;  width: 111px;  height: 127px;  background: url(media/images/ui_images/buttons/gui_buttons_character.png) no-repeat right top;  cursor: pointer; } .ui_selectteam_buttonp1_selected.c1 {  left: 114px;  top: 123px;  background-position: -1332px  0px; } .ui_selectteam_buttonp1_selected.c2 {  left: 240px;  top: 123px;  background-position: -1443px   0px; } .ui_selectteam_buttonp1_selected.c3 {  left: 128px;  top: 219px;  background-position: -1554px   0px; } .ui_selectteam_buttonp1_selected.c4 {  left: 248px;  top: 222px;  background-position: -1665px  0px; } .ui_selectteam_buttonp1_selected.c5 {  left: 138px;  top: 319px;  background-position: -1776px  0px; } .ui_selectteam_buttonp1_selected.c6 {  left: 246px;  top: 324px;  background-position: -1887px  0px; } .ui_selectteam_fan {  position: absolute;  left: 0px;  bottom: 0px;  width: 165px;  height: 221px;  display: table-cell; } .ui_selectteam_fan.f1 {  background: url(media/images/ui_images/screens/gui_screens_selectteam_fan01.png); } .ui_selectteam_fan.f2 {  background: url(media/images/ui_images/screens/gui_screens_selectteam_fan02.png); } .ui_selectteam_fan.f3 {  background: url(media/images/ui_images/screens/gui_screens_selectteam_fan03.png); } .ui_selectteam_fan.f4 {  background: url(media/images/ui_images/screens/gui_screens_selectteam_fan04.png); } .ui_selectteam_fan.f5 {  background: url(media/images/ui_images/screens/gui_screens_selectteam_fan05.png); } .ui_selectteam_fan.f6 {  background: url(media/images/ui_images/screens/gui_screens_selectteam_fan06.png); } .ui_selectteam_team {  position: absolute;  left: 402px;  top: 130px;  width: 248px;  height: 318px;  display: table-cell; } .ui_selectteam_team.t1 {  background: url(media/images/ui_images/screens/gui_screens_selectteam_team01.jpg); } .ui_selectteam_team.t2 {  background: url(media/images/ui_images/screens/gui_screens_selectteam_team02.jpg); } .ui_selectteam_team.t3 {  background: url(media/images/ui_images/screens/gui_screens_selectteam_team03.jpg); } .ui_selectteam_team.t4 {  background: url(media/images/ui_images/screens/gui_screens_selectteam_team04.jpg); } .ui_selectteam_team.t5 {  background: url(media/images/ui_images/screens/gui_screens_selectteam_team05.jpg); } .ui_selectteam_team.t6 {  background: url(media/images/ui_images/screens/gui_screens_selectteam_team06.jpg); } .ui_selectteam_title {  position: absolute;  width: 241px;  height: 26px;  color: #fff349;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 16px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 404px;  top: 145px; } .ui_selectteam_info {  position: absolute;  width: 241px;  height: 29px;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd',Georgia,Serif;  font-size: 19px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 404px;  top: 163px; } .ui_selectteam_buttonp1_info {  position: absolute;  width: 52px;  height: 24px;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd',Georgia,Serif;  font-size: 16px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always; } .ui_selectteam_buttonp1_info.c1 {  position: absolute;  left: 152px;  top: 139px; } .ui_selectteam_buttonp1_info.c2 {  position: absolute;  left: 278px;  top: 139px; } .ui_selectteam_buttonp1_info.c3 {  position: absolute;  left: 166px;  top: 234px; } .ui_selectteam_buttonp1_info.c4 {  position: absolute;  left: 286px;  top: 237px; } .ui_selectteam_buttonp1_info.c5 {  position: absolute;  left: 176px;  top: 335px; } .ui_selectteam_buttonp1_info.c6 {  position: absolute;  left: 282px;  top: 339px; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_selectteam_bg'>  <div class='ui_selectteam_screen_title'>SELECT TEAM</div>  <div class='ui_general_button_back b1' id='btn_back'></div>  <div class='ui_general_button_ok b1' id='btn_ok'></div>  <div class='ui_selectteam_button_character c1' id='btn_ch1'></div>  <div class='ui_selectteam_button_character c2' id='btn_ch2'></div>  <div class='ui_selectteam_button_character c3' id='btn_ch3'></div>  <div class='ui_selectteam_button_character c4' id='btn_ch4'></div>  <div class='ui_selectteam_button_character c5' id='btn_ch5'></div>  <div class='ui_selectteam_button_character c6' id='btn_ch6'></div>  <div class='ui_selectteam_button_selected c1' id='btn_selected1'></div>  <div class='ui_selectteam_button_selected c2' id='btn_selected2'></div>  <div class='ui_selectteam_button_selected c3' id='btn_selected3'></div>  <div class='ui_selectteam_button_selected c4' id='btn_selected4'></div>  <div class='ui_selectteam_button_selected c5' id='btn_selected5'></div>  <div class='ui_selectteam_button_selected c6' id='btn_selected6'></div>  <div class='ui_selectteam_buttonp1_selected c1' id='btn_ps1'></div>  <div class='ui_selectteam_buttonp1_selected c2' id='btn_ps2'></div>  <div class='ui_selectteam_buttonp1_selected c3' id='btn_ps3'></div>  <div class='ui_selectteam_buttonp1_selected c4' id='btn_ps4'></div>  <div class='ui_selectteam_buttonp1_selected c5' id='btn_ps5'></div>  <div class='ui_selectteam_buttonp1_selected c6' id='btn_ps6'></div>  <div class='ui_selectteam_team t1'></div>  <div class='ui_selectteam_team t2'></div>  <div class='ui_selectteam_team t3'></div>  <div class='ui_selectteam_team t4'></div>  <div class='ui_selectteam_team t5'></div>  <div class='ui_selectteam_team t6'></div>     <div class='ui_selectteam_title'>" +
        Application.strings.STR_SELECTED_TEAM_NONE + "</div>     <div class='ui_selectteam_info'>" + Application.strings.STR_STADIUM_NONE + "</div>  <div class='ui_selectteam_buttonp1_info c1'>P1</div>  <div class='ui_selectteam_buttonp1_info c2'>P2</div>  <div class='ui_selectteam_buttonp1_info c3'>P3</div>  <div class='ui_selectteam_buttonp1_info c4'>P4</div>  <div class='ui_selectteam_buttonp1_info c5'>P5</div>  <div class='ui_selectteam_buttonp1_info c6'>P6</div>     <div class='ui_selectteam_fan f1'></div>  <div class='ui_selectteam_fan f2'></div>  <div class='ui_selectteam_fan f3'></div>  <div class='ui_selectteam_fan f4'></div>  <div class='ui_selectteam_fan f5'></div>  <div class='ui_selectteam_fan f6'></div>   </div> </div>";
    GuiSelectTeam.superClass_.setGuiHTML.call(this)
};
GuiSelectTeam.prototype.init = function() {
    this.addClickListener("btn_back");
    this.addClickListener("btn_ok");
    this.addClickListener("btn_ch1");
    this.addClickListener("btn_ch2");
    this.addClickListener("btn_ch3");
    this.addClickListener("btn_ch4");
    this.addClickListener("btn_ch5");
    this.addClickListener("btn_ch6");
    this.addClickListener("btn_selected1");
    this.addClickListener("btn_selected2");
    this.addClickListener("btn_selected3");
    this.addClickListener("btn_selected4");
    this.addClickListener("btn_selected5");
    this.addClickListener("btn_selected6");
    this.addClickListener("btn_ps1");
    this.addClickListener("btn_ps2");
    this.addClickListener("btn_ps3");
    this.addClickListener("btn_ps4");
    this.addClickListener("btn_ps5");
    this.addClickListener("btn_ps6");
    this.setDefaultState();
    $("#btn_selected1").css("display", "none");
    $("#btn_selected2").css("display", "none");
    $("#btn_selected3").css("display", "none");
    $("#btn_selected4").css("display", "none");
    $("#btn_selected5").css("display", "none");
    $("#btn_selected6").css("display", "none");
    $("#btn_ps1").css("display",
        "none");
    $("#btn_ps2").css("display", "none");
    $("#btn_ps3").css("display", "none");
    $("#btn_ps4").css("display", "none");
    $("#btn_ps5").css("display", "none");
    $("#btn_ps6").css("display", "none");
    $(".ui_selectteam_buttonp1_info").css("display", "none");
    if (Global.game_mode === Global.mode_tournament) {
        $(".ui_selectteam_info").css("display", "block");
        for (var a = Global.TEAM_MICKEY; a <= Global.TOTAL_TEAMS; ++a)!1 == this.isTeamOnMatchups(a) && ($("#btn_selected" + a).css("display", "none"), $("#btn_ps" + a).css("display", ""), $("#btn_ch" +
            a).css("display", "none"))
    } else $(".ui_selectteam_info").css("display", "none");
    $(".ui_selectteam_title").html(Application.strings.STR_SELECTED_TEAM_NONE);
    $(".ui_selectteam_info").html(Application.strings.STR_SELECTED_VENUE_NONE);
    $(".ui_selectteam_screen_title").html(Application.strings.STR_SELECT_TEAM);
    GuiSelectTeam.superClass_.init.call(this)
};
GuiSelectTeam.prototype.isTeamOnMatchups = function(a) {
    for (var b = 0; b < Global.matchups.length; ++b)
        for (var c = 0; c < Global.matchups[b].length; ++c)
            if (Global.matchups[b][c] == a) return !0;
    return !1
};
GuiSelectTeam.prototype.setSelectEnemy = function() {
    $("#btn_ps" + Global.selectedTeam).css("display", "");
    this.setDefaultState();
    $(".ui_selectteam_title").html(Application.strings.STR_SELECTED_TEAM_ENEMY);
    this.m_selectingEnemy = !0;
    $(".ui_selectteam_screen_title").html(Application.strings.STR_SELECT_OPPONENT)
};
GuiSelectTeam.prototype.setWaitSkip = function() {
    $("#btn_ps" + Global.selectedTeam).css("display", "");
    $("#btn_ps" + Global.enemyTeam).css("display", "");
    this.setDefaultState();
    this.m_timeWaitSkip = GuiSelectTeam.TIME_WAIT_SKIP;
    this.m_onWaitSkip = !0;
    this.m_selectingEnemy = !1
};
GuiSelectTeam.prototype.setDefaultState = function() {
    $("#btn_selected1").css("display", "none");
    $("#btn_selected2").css("display", "none");
    $("#btn_selected3").css("display", "none");
    $("#btn_selected4").css("display", "none");
    $("#btn_selected5").css("display", "none");
    $("#btn_selected6").css("display", "none");
    $("#btn_ch1").css("display", "block");
    $("#btn_ch2").css("display", "block");
    $("#btn_ch3").css("display", "block");
    $("#btn_ch4").css("display", "block");
    $("#btn_ch5").css("display", "block");
    $("#btn_ch6").css("display",
        "block");
    $(".ui_selectteam_team.t1").css("display", "none");
    $(".ui_selectteam_team.t2").css("display", "none");
    $(".ui_selectteam_team.t3").css("display", "none");
    $(".ui_selectteam_team.t4").css("display", "none");
    $(".ui_selectteam_team.t5").css("display", "none");
    $(".ui_selectteam_team.t6").css("display", "none");
    $(".ui_selectteam_fan.f1").css("display", "none");
    $(".ui_selectteam_fan.f2").css("display", "none");
    $(".ui_selectteam_fan.f3").css("display", "none");
    $(".ui_selectteam_fan.f4").css("display", "none");
    $(".ui_selectteam_fan.f5").css("display", "none");
    $(".ui_selectteam_fan.f6").css("display", "none");
    $("#btn_ok").css("display", "none");
    $(".ui_selectteam_title").html(Application.strings.STR_SELECTED_TEAM_NONE)
};
GuiSelectTeam.prototype.setSelectedState = function(a, b) {
    for (var c = 1; 6 >= c; c++) c !== a ? ($(".ui_selectteam_team.t" + a).css("display", "none"), $(".ui_selectteam_fan.f" + a).css("display", "none")) : !0 === b ? ($(".ui_selectteam_team t" + a).css("display", "none"), $(".ui_selectteam_fan f" + a).css("display", "none")) : ($(".ui_selectteam_team.t" + a).css("display", "block"), $(".ui_selectteam_fan.f" + a).css("display", "block"))
};
GuiSelectTeam.prototype.setVenue = function(a) {
    Global.game_mode === Global.mode_tournament ? (this.m_txtVenue.css("display", "block"), this.m_txtVenue.html("" + a)) : (this.m_txtVenue.css("display", "none"), this.m_txtVenue.html("check for bugs"))
};
GuiSelectTeam.prototype.setStrings = function(a) {
    switch (a) {
        case Global.TEAM_MICKEY:
            this.m_txtSelectedTeam.html(Application.strings.STR_SELECTED_TEAM_MICKEY);
            $(".ui_selectteam_info").html(Application.strings.STR_STADIUM_MICKEY);
            break;
        case Global.TEAM_MINNIE:
            this.m_txtSelectedTeam.html(Application.strings.STR_SELECTED_TEAM_MINNIE);
            $(".ui_selectteam_info").html(Application.strings.STR_STADIUM_MINNIE);
            break;
        case Global.TEAM_DONALD:
            this.m_txtSelectedTeam.html(Application.strings.STR_SELECTED_TEAM_DONALD);
            $(".ui_selectteam_info").html(Application.strings.STR_STADIUM_DONALD);
            break;
        case Global.TEAM_DAISY:
            this.m_txtSelectedTeam.html(Application.strings.STR_SELECTED_TEAM_DAISY);
            $(".ui_selectteam_info").html(Application.strings.STR_STADIUM_DAISY);
            break;
        case Global.TEAM_GOOFY:
            this.m_txtSelectedTeam.html(Application.strings.STR_SELECTED_TEAM_GOOFY);
            $(".ui_selectteam_info").html(Application.strings.STR_STADIUM_GOOFY);
            break;
        case Global.TEAM_PLUTO:
            this.m_txtSelectedTeam.html(Application.strings.STR_SELECTED_TEAM_PLUTO);
            $(".ui_selectteam_info").html(Application.strings.STR_STADIUM_PLUTO);
            break;
        case Global.TEAM_NONE:
            this.m_txtSelectedTeam.html(Application.strings.STR_SELECTED_TEAM_NONE), $(".ui_selectteam_info").html(Application.strings.STR_STADIUM_NONE)
    }
};
GuiSelectTeam.prototype.getNextEnemy = function() {
    var a = [];
    if (Global.selectedTeam === Global.TEAM_NONE) return 1;
    for (var b = 1; 6 >= b; b++) b !== Global.selectedTeam && a.push(b);
    return a[Common.random(0, a.length - 1)]
};
GuiSelectTeam.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_ok":
            if (Global.game_mode === Global.mode_tournament) {
                Global.data.selectTeam(Global.selectedTeam);
                for (a = 0; a < Global.matchups.length; ++a)
                    for (var b = 0; b < Global.matchups[a].length; ++b)
                        if (Global.data.selectedTeam == Global.matchups[a][b]) switch (b) {
                            case 0:
                                Global.isTeamPlayerLocal = !0;
                                break;
                            case 1:
                                Global.isTeamPlayerLocal = !1
                        }
                        GuiManager.instance.gotoScreen(GuiManager.SC_DAILY_MATCH)
            } else !0 == this.m_selectingEnemy ?
                this.setWaitSkip() : this.setSelectEnemy();
            break;
        case "btn_back":
            !0 == this.m_selectingEnemy ? (this.setDefaultState(), $(".ui_selectteam_screen_title").html(Application.strings.STR_SELECT_TEAM), $("#btn_selected1").css("display", "none"), $("#btn_selected2").css("display", "none"), $("#btn_selected3").css("display", "none"), $("#btn_selected4").css("display", "none"), $("#btn_selected5").css("display", "none"), $("#btn_selected6").css("display", "none"), $("#btn_ps1").css("display", "none"), $("#btn_ps2").css("display",
                "none"), $("#btn_ps3").css("display", "none"), $("#btn_ps4").css("display", "none"), $("#btn_ps5").css("display", "none"), $("#btn_ps6").css("display", "none"), this.m_selectingEnemy = !1) : GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU);
            break;
        case "btn_ch1":
            this.setDefaultState();
            !1 == this.m_selectingEnemy ? Global.selectedTeam = Global.TEAM_MICKEY : Global.enemyTeam = Global.TEAM_MICKEY;
            $("#btn_selected1").css("display", "block");
            $("#btn_ch1").css("display", "none");
            $(".ui_selectteam_team.t1").css("display", "block");
            $(".ui_selectteam_fan.f1").css("display", "block");
            $("#btn_ok").css("display", "block");
            this.setStrings(Global.TEAM_MICKEY);
            break;
        case "btn_ch2":
            this.setDefaultState();
            !1 == this.m_selectingEnemy ? Global.selectedTeam = Global.TEAM_MINNIE : Global.enemyTeam = Global.TEAM_MINNIE;
            $("#btn_selected2").css("display", "block");
            $("#btn_ch2").css("display", "none");
            $(".ui_selectteam_team.t2").css("display", "block");
            $(".ui_selectteam_fan.f2").css("display", "block");
            $("#btn_ok").css("display", "block");
            this.setStrings(Global.TEAM_MINNIE);
            break;
        case "btn_ch3":
            this.setDefaultState();
            !1 == this.m_selectingEnemy ? Global.selectedTeam = Global.TEAM_DONALD : Global.enemyTeam = Global.TEAM_DONALD;
            $("#btn_selected3").css("display", "block");
            $("#btn_ch3").css("display", "none");
            $(".ui_selectteam_team.t3").css("display", "block");
            $(".ui_selectteam_fan.f3").css("display", "block");
            $("#btn_ok").css("display", "block");
            this.setStrings(Global.TEAM_DONALD);
            break;
        case "btn_ch4":
            this.setDefaultState();
            !1 == this.m_selectingEnemy ? Global.selectedTeam = Global.TEAM_DAISY :
                Global.enemyTeam = Global.TEAM_DAISY;
            $("#btn_selected4").css("display", "block");
            $("#btn_ch4").css("display", "none");
            $(".ui_selectteam_team.t4").css("display", "block");
            $(".ui_selectteam_fan.f4").css("display", "block");
            $("#btn_ok").css("display", "block");
            this.setStrings(Global.TEAM_DAISY);
            break;
        case "btn_ch5":
            this.setDefaultState();
            !1 == this.m_selectingEnemy ? Global.selectedTeam = Global.TEAM_GOOFY : Global.enemyTeam = Global.TEAM_GOOFY;
            $("#btn_selected5").css("display", "block");
            $("#btn_ch5").css("display", "none");
            $(".ui_selectteam_team.t5").css("display", "block");
            $(".ui_selectteam_fan.f5").css("display", "block");
            $("#btn_ok").css("display", "block");
            this.setStrings(Global.TEAM_GOOFY);
            break;
        case "btn_ch6":
            this.setDefaultState(), !1 == this.m_selectingEnemy ? Global.selectedTeam = Global.TEAM_PLUTO : Global.enemyTeam = Global.TEAM_PLUTO, $("#btn_selected6").css("display", "block"), $("#btn_ch6").css("display", "none"), $(".ui_selectteam_team.t6").css("display", "block"), $(".ui_selectteam_fan.f6").css("display", "block"), $("#btn_ok").css("display",
                "block"), this.setStrings(Global.TEAM_PLUTO)
    }
};
GuiSelectTeam.prototype.onPressSpaceBar = function() {
    GuiSelectTeam.superClass_.onPressSpaceBar.call(this)
};
GuiSelectTeam.prototype.update = function(a) {
    GuiSelectTeam.superClass_.update.call(this, a);
    !0 == this.m_onWaitSkip && (this.m_timeWaitSkip -= a, 0 > this.m_timeWaitSkip && (this.m_onWaitSkip = !1, GuiManager.instance.gotoScreen(GuiManager.SC_SELECT_VENUE)))
};
GuiSelectTeam.TIME_WAIT_SKIP = 1E3;

function GuiTrophies(a, b, c) {
    SScreen.call(this, a, b, c);
    this.m_txtTitle = $(".ui_general_screen_title");
    this.m_currentTrophie = $(".ui_trophies_trophy.selected");
    this.m_currentTrophieText1 = $(".ui_trophies_text.t1");
    this.m_currentTrophieText2 = $(".ui_trophies_text.t2")
}
goog.inherits(GuiTrophies, SScreen);
GuiTrophies.prototype.setGuiHTML = function() {
    this.css = " .ui_trophies_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_trophies_background.jpg); } .ui_trophies_trophy {  position: absolute;  width: 100px;  height: 100px;  background: url(media/images/ui_images/buttons/gui_buttons_trophies.png) no-repeat scroll 0 0 rgba(0, 0, 0, 0);  cursor: pointer; } .ui_trophies_trophy.t1 {  top: 122px;  left: 134px;  background-position: 0px 0px; } .ui_trophies_trophy.t1:hover {  background-position: -100px 0px; } .ui_trophies_trophy.t2 {  top: 138px;  left: 260px;  background-position: -200px 0px; } .ui_trophies_trophy.t2:hover {  background-position: -300px 0px; } .ui_trophies_trophy.t3 {  top: 234px;  left: 132px;  background-position: -400px 0px; } .ui_trophies_trophy.t3:hover {  background-position: -500px 0px; } .ui_trophies_trophy.t4 {  top: 245px;  left: 259px;  background-position: -600px 0px; } .ui_trophies_trophy.t4:hover {  background-position: -700px 0px; } .ui_trophies_trophy.t5 {  top: 336px;  left: 197px;  background-position: -800px 0px; } .ui_trophies_trophy.t5:hover {  background-position: -900px 0px; } .ui_trophies_trophy.selected {  top: 150px;  left: 472px;  background-position: 0px 0px; } .ui_trophies_trophy_locked {  position: absolute;  width: 105px;  height: 105px;  background: url(media/images/ui_images/buttons/gui_buttons_trophies.png) no-repeat scroll 0 0 rgba(0, 0, 0, 0);  cursor: pointer; } .ui_trophies_trophy_locked.t1 {  top: 122px;  left: 134px;  background-position: -1000px 0px; } .ui_trophies_trophy_locked.t1:hover {  background-position: -1100px 0px; } .ui_trophies_trophy_locked.t2 {  top: 138px;  left: 260px;  background-position: -1200px 0px; } .ui_trophies_trophy_locked.t2:hover {  background-position: -1300px 0px; } .ui_trophies_trophy_locked.t3 {  top: 234px;  left: 132px;  background-position: -1400px 0px; } .ui_trophies_trophy_locked.t3:hover {  background-position: -1500px 0px; } .ui_trophies_trophy_locked.t4 {  top: 245px;  left: 259px;  background-position: -1600px 0px; } .ui_trophies_trophy_locked.t4:hover {  background-position: -1700px 0px; } .ui_trophies_trophy_locked.t5 {  top: 336px;  left: 197px;  background-position: -1800px 0px; } .ui_trophies_trophy_locked.t5:hover {  background-position: -1900px 0px; } .ui_trophies_text {  position: absolute;  left: 4px;  top: 4px;  color: #fff349;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 16px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_trophies_text.t1 {  top: 270px;  left: 424px;  width: 195px;  height: 42px;  background-position: 0px 0px; } .ui_trophies_text.t2 {  top: 332px;  left: 430px;  color: #ffffff;  width: 185px;  height: 80px;  background-position: 0px 0px; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_trophies_bg'>  <div class='ui_general_screen_title'>TROPHIES</div>  <div class='ui_general_button_back b1' id='btn_back'></div>   <div class='ui_trophies_trophy_locked t1'id='btn_trophy1_lock'></div>  <div class='ui_trophies_trophy_locked t2'id='btn_trophy2_lock'></div>  <div class='ui_trophies_trophy_locked t3'id='btn_trophy3_lock'></div>  <div class='ui_trophies_trophy_locked t4'id='btn_trophy4_lock'></div>  <div class='ui_trophies_trophy_locked t5'id='btn_trophy5_lock'></div>  <div class='ui_trophies_trophy t1'id='btn_trophy1'></div>  <div class='ui_trophies_trophy t2'id='btn_trophy2'></div>  <div class='ui_trophies_trophy t3'id='btn_trophy3'></div>  <div class='ui_trophies_trophy t4'id='btn_trophy4'></div>  <div class='ui_trophies_trophy t5'id='btn_trophy5'></div>  <div class='ui_trophies_text t1'></div>  <div class='ui_trophies_text t2'></div>   <div class='ui_trophies_trophy selected'></div>   </div> </div>";
    GuiTrophies.superClass_.setGuiHTML.call(this)
};
GuiTrophies.prototype.init = function() {
    GuiTrophies.superClass_.init.call(this);
    this.addClickListener("btn_back");
    0 === Global.data.achievementHatTrick ? (this.addClickListener("btn_trophy1_lock"), $(".ui_trophies_trophy_locked.t1").css("display", ""), $(".ui_trophies_trophy.t1").css("display", "none")) : (this.addClickListener("btn_trophy1"), $(".ui_trophies_trophy_locked.t1").css("display", "none"), $(".ui_trophies_trophy.t1").css("display", ""));
    0 === Global.data.achievementZeroHero ? (this.addClickListener("btn_trophy2_lock"),
        $(".ui_trophies_trophy_locked.t2").css("display", ""), $(".ui_trophies_trophy.t2").css("display", "none")) : (this.addClickListener("btn_trophy2"), $(".ui_trophies_trophy_locked.t2").css("display", "none"), $(".ui_trophies_trophy.t2").css("display", ""));
    0 === Global.data.achievementSmallField ? (this.addClickListener("btn_trophy3_lock"), $(".ui_trophies_trophy_locked.t3").css("display", ""), $(".ui_trophies_trophy.t3").css("display", "none")) : (this.addClickListener("btn_trophy3"), $(".ui_trophies_trophy_locked.t3").css("display",
        "none"), $(".ui_trophies_trophy.t3").css("display", ""));
    0 === Global.data.achievementLionKick ? (this.addClickListener("btn_trophy4_lock"), $(".ui_trophies_trophy_locked.t4").css("display", ""), $(".ui_trophies_trophy.t4").css("display", "none")) : (this.addClickListener("btn_trophy4"), $(".ui_trophies_trophy_locked.t4").css("display", "none"), $(".ui_trophies_trophy.t4").css("display", ""));
    0 === Global.data.achievementRockScorer ? (this.addClickListener("btn_trophy5_lock"), $(".ui_trophies_trophy_locked.t5").css("display",
        ""), $(".ui_trophies_trophy.t5").css("display", "none")) : (this.addClickListener("btn_trophy5"), $(".ui_trophies_trophy_locked.t5").css("display", "none"), $(".ui_trophies_trophy.t5").css("display", ""));
    $(".ui_general_screen_title").html(Application.strings.STR_TROPHY_TITLE);
    $(".ui_trophies_text.t1").html("");
    $(".ui_trophies_text.t2").html("");
    $(".ui_trophies_trophy.selected").css("display", "none")
};
GuiTrophies.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_back":
            GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU);
            break;
        case "btn_trophy1_lock":
            this.m_currentTrophie.css("display", "");
            this.m_currentTrophie.css("background-position", "-1000px 0px");
            this.m_currentTrophieText1.html(Application.strings.STR_TROPHIE1);
            this.m_currentTrophieText2.html(Application.strings.STR_TROPHIE1_TEXT2);
            break;
        case "btn_trophy2_lock":
            this.m_currentTrophie.css("display",
                "");
            this.m_currentTrophie.css("background-position", "-1200px 0px");
            this.m_currentTrophieText1.html(Application.strings.STR_TROPHIE2);
            this.m_currentTrophieText2.html(Application.strings.STR_TROPHIE2_TEXT2);
            break;
        case "btn_trophy3_lock":
            this.m_currentTrophie.css("display", "");
            this.m_currentTrophie.css("background-position", "-1400px 0px");
            this.m_currentTrophieText1.html(Application.strings.STR_TROPHIE3);
            this.m_currentTrophieText2.html(Application.strings.STR_TROPHIE3_TEXT2);
            break;
        case "btn_trophy4_lock":
            this.m_currentTrophie.css("display",
                "");
            this.m_currentTrophie.css("background-position", "-1600px 0px");
            this.m_currentTrophieText1.html(Application.strings.STR_TROPHIE4);
            this.m_currentTrophieText2.html(Application.strings.STR_TROPHIE4_TEXT2);
            break;
        case "btn_trophy5_lock":
            this.m_currentTrophie.css("display", "");
            this.m_currentTrophie.css("background-position", "-1800px 0px");
            this.m_currentTrophieText1.html(Application.strings.STR_TROPHIE5);
            this.m_currentTrophieText2.html(Application.strings.STR_TROPHIE5_TEXT2);
            break;
        case "btn_trophy1":
            this.m_currentTrophie.css("display",
                "");
            this.m_currentTrophie.css("background-position", "0px 0px");
            this.m_currentTrophieText1.html(Application.strings.STR_TROPHIE1);
            this.m_currentTrophieText2.html(Application.strings.STR_TROPHIE1_TEXT2);
            break;
        case "btn_trophy2":
            this.m_currentTrophie.css("display", "");
            this.m_currentTrophie.css("background-position", "-200px 0px");
            this.m_currentTrophieText1.html(Application.strings.STR_TROPHIE2);
            this.m_currentTrophieText2.html(Application.strings.STR_TROPHIE2_TEXT2);
            break;
        case "btn_trophy3":
            this.m_currentTrophie.css("display",
                "");
            this.m_currentTrophie.css("background-position", "-400px 0px");
            this.m_currentTrophieText1.html(Application.strings.STR_TROPHIE3);
            this.m_currentTrophieText2.html(Application.strings.STR_TROPHIE3_TEXT2);
            break;
        case "btn_trophy4":
            this.m_currentTrophie.css("display", "");
            this.m_currentTrophie.css("background-position", "-600px 0px");
            this.m_currentTrophieText1.html(Application.strings.STR_TROPHIE4);
            this.m_currentTrophieText2.html(Application.strings.STR_TROPHIE4_TEXT2);
            break;
        case "btn_trophy5":
            this.m_currentTrophie.css("display",
                ""), this.m_currentTrophie.css("background-position", "-800px 0px"), this.m_currentTrophieText1.html(Application.strings.STR_TROPHIE5), this.m_currentTrophieText2.html(Application.strings.STR_TROPHIE5_TEXT2)
    }
};
GuiTrophies.prototype.onPressSpaceBar = function() {
    1 <= Global.level && 5 >= Global.level && (GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU), GuiTrophies.superClass_.onPressSpaceBar.call(this))
};
GuiTrophies.prototype.onEndTransition = function(a) {
    GuiTrophies.superClass_.onEndTransition.call(this, a);
    a.params && Global.app.guiManager.gotoScreen(a.params.screen)
};

function GuiCutscene(a, b, c) {
    SScreen.call(this, a, b, c);
    this.cantScenes = 2;
    this.m_currentScene = 1;
    this.m_txt = $(".ui_cutscene_text");
    this.m_txt.html(Application.strings["STR_CS" + this.m_currentScene + "_INFO"]);
    this.m_image = $(".ui_cutscene_image");
    Global.data.onCutscene();
    this.setCutScene()
}
goog.inherits(GuiCutscene, SScreen);
GuiCutscene.prototype.setGuiHTML = function() {
    this.css = " .ui_cutscene_bg1 {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_cutscene01_background.jpg); } .ui_cutscene_bg2 {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_cutscene01_background02.jpg); }  .ui_cutscene_button_skip {  position: absolute;  top: 10px;  left: 673px;  width: 60px;  height: 60px;  background: url(media/images/ui_images/buttons/gui_buttons_icons04.png) no-repeat right top;  cursor: pointer; } .ui_cutscene_button_skip.b1 {  background-position: -0px 0px; } .ui_cutscene_button_skip.b1:hover {  background-position: -60px 0px; } .ui_cutscene_text1 {  position: absolute;  color: #000000;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 15px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always; } .ui_cutscene_text1.t1 {  top: 81px;  left: 20px;  width: 227px;  height: 73px; } .ui_cutscene_text1.t2 {  top: 90px;  left: 353px;  width: 201px;  height: 54px; } .ui_cutscene_text1.t3 {  top: 118px;  left: 629px;  width: 68px;  height: 25px; } .ui_cutscene_text1.t4 {  top: 251px;  left: 410px;  width: 227px;  height: 56px; } .ui_cutscene_text1.t5 {  top: 434px;  left: 241px;  width: 453px;  height: 54px; } .ui_cutscene_text2 {  position: absolute;  color: #000000;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 15px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always; } .ui_cutscene_text2.t1 {  top: 81px;  left: 46px;  width: 156px;  height: 54px; } .ui_cutscene_text2.t2 {  top: 86px;  left: 232px;  width: 211px;  height: 53px; } .ui_cutscene_text2.t3 {  top: 84px;  left: 466px;  width: 225px;  height: 69px; } .ui_cutscene_text2.t4 {  top: 437px;  left: 114px;  width: 586px;  height: 58px; }";
    this.html = " <div class='ui_general_container'>   <div class='ui_cutscene_bg1'></div>   <div class='ui_cutscene_bg2'></div>   <div class='ui_general_advertising_support'></div>   <div class='ui_general_advertising'></div>  <div class='ui_cutscene_text1 t1'>info</div>  <div class='ui_cutscene_text1 t2'>info</div>  <div class='ui_cutscene_text1 t3'>info</div>  <div class='ui_cutscene_text1 t4'>info</div>  <div class='ui_cutscene_text1 t5'>info</div>  <div class='ui_cutscene_text2 t1'>info</div>  <div class='ui_cutscene_text2 t2'>info</div>  <div class='ui_cutscene_text2 t3'>info</div>  <div class='ui_cutscene_text2 t4'>info</div>  <div class='ui_general_button_back b1' id='btn_back'></div>  <div class='ui_general_button_next b1' id='btn_next'></div>  <div class='ui_cutscene_button_skip b1' id='btn_skip'></div> </div>";
    GuiCutscene.superClass_.setGuiHTML.call(this)
};
GuiCutscene.prototype.init = function() {
    GuiCutscene.superClass_.init.call(this);
    this.addClickListener("btn_back");
    this.addClickListener("btn_next");
    this.addClickListener("btn_skip");
    $(".ui_cutscene_bg1").css("display", "");
    $(".ui_cutscene_bg2").css("display", "none");
    $(".ui_cutscene_text1").css("display", "");
    $(".ui_cutscene_text2").css("display", "none");
    $(".ui_cutscene_text1.t1").html(Application.strings.STR_CUTSCENE_1_1);
    $(".ui_cutscene_text1.t2").html(Application.strings.STR_CUTSCENE_1_2);
    $(".ui_cutscene_text1.t3").html(Application.strings.STR_CUTSCENE_1_3);
    $(".ui_cutscene_text1.t4").html(Application.strings.STR_CUTSCENE_1_4);
    $(".ui_cutscene_text1.t5").html(Application.strings.STR_CUTSCENE_1_5);
    $(".ui_cutscene_text2.t1").html(Application.strings.STR_CUTSCENE_2_1);
    $(".ui_cutscene_text2.t2").html(Application.strings.STR_CUTSCENE_2_2);
    $(".ui_cutscene_text2.t3").html(Application.strings.STR_CUTSCENE_2_3);
    $(".ui_cutscene_text2.t4").html(Application.strings.STR_CUTSCENE_2_4);
    if (Global.showAds) {
        var a = Common.random(1, Global.countSponsors);
        $(".ui_general_advertising").css("background",
            "url(media/images/localized/gui_logo_" + a + ".png) no-repeat right top")
    } else $(".ui_general_advertising").css("display", "none")
};
GuiCutscene.prototype.setCutScene = function() {
    $(".ui_cutscene_bg1").css("display", "none");
    $(".ui_cutscene_bg2").css("display", "none");
    $(".ui_cutscene_text1").css("display", "none");
    $(".ui_cutscene_text2").css("display", "none");
    switch (this.m_currentScene) {
        case 1:
            $(".ui_cutscene_bg1").css("display", "");
            $(".ui_cutscene_text1").css("display", "");
            break;
        case 2:
            $(".ui_cutscene_bg2").css("display", ""), $(".ui_cutscene_text2").css("display", "")
    }
};
GuiCutscene.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_next":
            this.m_currentScene == this.cantScenes ? GuiManager.instance.gotoScreen(GuiManager.SC_SELECT_TEAM) : (this.m_currentScene += 1, this.setCutScene());
            break;
        case "btn_back":
            1 == this.m_currentScene ? GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU) : (this.m_currentScene -= 1, this.setCutScene());
            break;
        case "btn_skip":
            GuiManager.instance.gotoScreen(GuiManager.SC_SELECT_TEAM)
    }
};
GuiCutscene.prototype.onPressSpaceBar = function() {
    GuiManager.instance.gotoScreen(GuiManager.SC_SELECT_TEAM);
    GuiCutscene.superClass_.onPressSpaceBar.call(this)
};

function GuiCutsceneFinal(a, b, c) {
    SScreen.call(this, a, b, c);
    this.cantScenes = 2;
    this.m_currentScene = 1;
    this.m_txt = $(".ui_cutscene_text");
    this.m_txt.html(Application.strings["STR_CS" + this.m_currentScene + "_INFO"]);
    this.m_image = $(".ui_cutscene_image");
    Global.data.onCutscene();
    this.setCutScene()
}
goog.inherits(GuiCutsceneFinal, SScreen);
GuiCutsceneFinal.prototype.setGuiHTML = function() {
    this.css = " .ui_cutscene_bg1 {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_cutscene02_background.jpg); } .ui_cutscene_bg2 {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_cutscene02_background02.jpg); }  .ui_cutscene_button_skip {  position: absolute;  top: 10px;  left: 673px;  width: 60px;  height: 60px;  background: url(media/images/ui_images/buttons/gui_buttons_icons04.png) no-repeat right top;  cursor: pointer; } .ui_cutscene_button_skip.b1 {  background-position: -0px 0px; } .ui_cutscene_button_skip.b1:hover {  background-position: -60px 0px; } .ui_cutscene_text1 {  position: absolute;  color: #000000;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 15px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always; } .ui_cutscene_text1.t1 {  top: 93px;  left: 273px;  width: 380px;  height: 48px; } .ui_cutscene_text1.t2 {  top: 243px;  left: 132px;  width: 191px;  height: 52px; } .ui_cutscene_text1.t3 {  top: 269px;  left: 387px;  width: 180px;  height: 47px; } .ui_cutscene_text1.t4 {  top: 340px;  left: 588px;  width: 112px;  height: 108px; } .ui_cutscene_text1.t5 {  top: 339px;  left: 588px;  width: 109px;  height: 109px; } .ui_cutscene_text2 {  position: absolute;  color: #000000;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 15px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always; } .ui_cutscene_text2.t1 {  top: 82px;  left: 56px;  width: 196px;  height: 53px; } .ui_cutscene_text2.t2 {  top: 93px;  left: 286px;  width: 146px;  height: 50px; } .ui_cutscene_text2.t3 {  top: 108px;  left: 518px;  width: 163px;  height: 70px; } .ui_cutscene_text2.t4 {  top: 267px;  left: 478px;  width: 95px;  height: 26px; }";
    this.html = " <div class='ui_general_container'>   <div class='ui_cutscene_bg1'></div>   <div class='ui_cutscene_bg2'></div>   <div class='ui_general_advertising_support'></div>   <div class='ui_general_advertising'></div>  <div class='ui_cutscene_text1 t1'>info</div>  <div class='ui_cutscene_text1 t2'>info</div>    <div class='ui_cutscene_text1 t3'>info</div>  <div class='ui_cutscene_text1 t4'>info</div>   <div class='ui_cutscene_text2 t1'>info</div>  <div class='ui_cutscene_text2 t2'>info</div>  <div class='ui_cutscene_text2 t3'>info</div>  <div class='ui_cutscene_text2 t4'>info</div>   <div class='ui_general_button_back b1' id='btn_back'></div>  <div class='ui_general_button_next b1' id='btn_next'></div>  <div class='ui_cutscene_button_skip b1' id='btn_skip'></div> </div>";
    GuiCutsceneFinal.superClass_.setGuiHTML.call(this)
};
GuiCutsceneFinal.prototype.init = function() {
    GuiCutsceneFinal.superClass_.init.call(this);
    this.addClickListener("btn_back");
    this.addClickListener("btn_next");
    this.addClickListener("btn_skip");
    $(".ui_cutscene_bg1").css("display", "");
    $(".ui_cutscene_bg2").css("display", "none");
    $(".ui_cutscene_text1").css("display", "");
    $(".ui_cutscene_text2").css("display", "none");
    $(".ui_cutscene_text1.t1").html(Application.strings.STR_CUTSCENE_FINAL_1_1);
    $(".ui_cutscene_text1.t2").html(Application.strings.STR_CUTSCENE_FINAL_1_2);
    $(".ui_cutscene_text1.t3").html(Application.strings.STR_CUTSCENE_FINAL_1_3);
    $(".ui_cutscene_text1.t4").html(Application.strings.STR_CUTSCENE_FINAL_1_4);
    $(".ui_cutscene_text2.t1").html(Application.strings.STR_CUTSCENE_FINAL_2_1);
    $(".ui_cutscene_text2.t2").html(Application.strings.STR_CUTSCENE_FINAL_2_2);
    $(".ui_cutscene_text2.t3").html(Application.strings.STR_CUTSCENE_FINAL_2_3);
    $(".ui_cutscene_text2.t4").html(Application.strings.STR_CUTSCENE_FINAL_2_4);
    if (Global.showAds) {
        var a = Common.random(1, Global.countSponsors);
        $(".ui_general_advertising").css("background", "url(media/images/localized/gui_logo_" +
            a + ".png) no-repeat right top")
    } else $(".ui_general_advertising").css("display", "none")
};
GuiCutsceneFinal.prototype.setCutScene = function() {
    $(".ui_cutscene_bg1").css("display", "none");
    $(".ui_cutscene_bg2").css("display", "none");
    $(".ui_cutscene_text1").css("display", "none");
    $(".ui_cutscene_text2").css("display", "none");
    switch (this.m_currentScene) {
        case 1:
            $(".ui_cutscene_bg1").css("display", "");
            $(".ui_cutscene_text1").css("display", "");
            break;
        case 2:
            $(".ui_cutscene_bg2").css("display", ""), $(".ui_cutscene_text2").css("display", "")
    }
};
GuiCutsceneFinal.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_next":
            this.m_currentScene == this.cantScenes ? GuiManager.instance.gotoScreen(GuiManager.SC_END_GAME) : (this.m_currentScene += 1, this.setCutScene());
            break;
        case "btn_back":
            1 == this.m_currentScene ? (GuiTeamStanding.prePage = GuiManager.SC_CUTSCENE_FINAL, GuiManager.instance.gotoScreen(GuiManager.SC_TEAM_STANDING)) : (this.m_currentScene -= 1, this.setCutScene());
            break;
        case "btn_skip":
            GuiManager.instance.gotoScreen(GuiManager.SC_END_GAME)
    }
};
GuiCutsceneFinal.prototype.onPressSpaceBar = function() {
    GuiManager.instance.gotoScreen(GuiManager.SC_SELECT_TEAM);
    GuiCutsceneFinal.superClass_.onPressSpaceBar.call(this)
};

function GuiDailyMatch(a, b, c) {
    SScreen.call(this, a, b, c);
    GuiDailyMatch.instance = this;
    this.exhibitionMode = !1
}
goog.inherits(GuiDailyMatch, SScreen);
GuiDailyMatch.prototype.setGuiHTML = function() {
    this.css = " .ui_dailymatch_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_dailymatch_background.jpg); } .ui_dailymatch_confetti01 {  position: absolute;  width: 114px;  height: 155px;  top: 9px;  left: 0px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti01.png); } .ui_dailymatch_confetti02 {  position: absolute;  width: 83px;  height: 165px;  top: 9px;  left: 667px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti02.png); } .ui_dailymatch_pinleft {  position: absolute;  width: 127px;  height: 127px;  background: url('media/images/ui_images/screens/gui_screens_dailymatch_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 161px;  left: 141px; } .ui_dailymatch_pinleft.s1 {  background-position: 0px 0px; } .ui_dailymatch_pinleft.s2 {  background-position: -127px 0px; } .ui_dailymatch_pinleft.s3 {  background-position: -254px 0px; } .ui_dailymatch_pinleft.s5 {  background-position: -381px 0px; } .ui_dailymatch_pinleft.s4 {  background-position: -508px 0px; } .ui_dailymatch_pinleft.s6 {  background-position: -635px 0px; } .ui_dailymatch_pinright {  position: absolute;  width: 127px;  height: 127px;  background: url('media/images/ui_images/screens/gui_screens_dailymatch_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 162px;  left: 486px; } .ui_dailymatch_pinright.s1 {  background-position: 0px 0px; } .ui_dailymatch_pinright.s2 {  background-position: -127px 0px; } .ui_dailymatch_pinright.s3 {  background-position: -254px 0px; } .ui_dailymatch_pinright.s5 {  background-position: -381px 0px; } .ui_dailymatch_pinright.s4 {  background-position: -508px 0px; } .ui_dailymatch_pinright.s6 {  background-position: -635px 0px; } .ui_dailymatch_button_play {  position: absolute;  top: 194px;  left: 639px;  width: 110px;  height: 110px;  background: url(media/images/ui_images/buttons/gui_buttons_icons01.png) no-repeat right top;  cursor: pointer; } .ui_dailymatch_button_play.b1 {  background-position: -660px 0px; } .ui_dailymatch_button_play.b1:hover {  background-position: -770px 0px; } .ui_dailymatch_button_text {  background: url('media/images/ui_images/buttons/gui_buttons_text02.png') no-repeat scroll right top rgba(0, 0, 0, 0);  color: #ffffff;  cursor: pointer;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 14px;  padding-top: 27px;  position: absolute;  text-align: center;  top: 399px;  width: 310px;  height: 80px;  left: 226px; } .ui_dailymatch_button_text.b1 {  background-position: 0px 0px; } .ui_dailymatch_button_text.b1:hover {  background-position: -310px 0px;  font-size: 16px; } .ui_dailymatch_text {  position: absolute;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 18px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  top: 296px;  width: 221px;  height: 44px; } .ui_dailymatch_text.t1 {  left: 97px; } .ui_dailymatch_text.t2 {  left: 441px; } .ui_dailymatch_versus {  position: absolute;  left: 0px;  top: 205px;  width: 749px;  height: 46px;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 50px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_dailymatch_versus.t1 {  left: 0px;  top: 209px;  color: #a82b00; }  .ui_dailymatch_versus.t2 {  left: 0px;  top: 218px;  color: #1e362f ; } .ui_dailymatch_versus.t2 {  left: 0px;  top: 211px; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_dailymatch_bg'>  <div class='ui_dailymatch_text t1'>team01</div>  <div class='ui_dailymatch_text t2'>team02</div>  <div class='ui_dailymatch_button_text b1' id='btn_teamstanding'>TEAM STANDING</div>   <div class='ui_general_teamside l1' id='img_bg_left01'></div>  <div class='ui_general_teamside l2' id='img_bg_left02'></div>  <div class='ui_general_teamside l3' id='img_bg_left03'></div>  <div class='ui_general_teamside l4' id='img_bg_left04'></div>  <div class='ui_general_teamside l5' id='img_bg_left05'></div>  <div class='ui_general_teamside l6' id='img_bg_left06'></div>  <div class='ui_general_teamside r1' id='img_bg_right01'></div>  <div class='ui_general_teamside r2' id='img_bg_right02'></div>  <div class='ui_general_teamside r3' id='img_bg_right03'></div>  <div class='ui_general_teamside r4' id='img_bg_right04'></div>  <div class='ui_general_teamside r5' id='img_bg_right05'></div>  <div class='ui_general_teamside r6' id='img_bg_right06'></div>  <div class='ui_dailymatch_pinleft s1' id='img_pinl01'></div>  <div class='ui_dailymatch_pinleft s2' id='img_pinl02'></div>  <div class='ui_dailymatch_pinleft s3' id='img_pinl03'></div>  <div class='ui_dailymatch_pinleft s4' id='img_pinl04'></div>  <div class='ui_dailymatch_pinleft s5' id='img_pinl05'></div>  <div class='ui_dailymatch_pinleft s6' id='img_pinl06'></div>  <div class='ui_dailymatch_pinright s1' id='img_pinr01'></div>  <div class='ui_dailymatch_pinright s2' id='img_pinr02'></div>  <div class='ui_dailymatch_pinright s3' id='img_pinr03'></div>  <div class='ui_dailymatch_pinright s4' id='img_pinr04'></div>  <div class='ui_dailymatch_pinright s5' id='img_pinr05'></div>  <div class='ui_dailymatch_pinright s6' id='img_pinr06'></div>  <div class='ui_dailymatch_versus t3'>VS</div>  <div class='ui_dailymatch_versus t2'>VS</div>  <div class='ui_dailymatch_versus t1'>VS</div>  <div class='ui_general_button_back b1' id='btn_back'></div>  <div class='ui_dailymatch_button_play b1' id='btn_play'></div>    <div class='ui_dailymatch_confetti01'></div>  <div class='ui_dailymatch_confetti02'></div>  <div class='ui_general_advertising_support'></div>    <div class='ui_general_advertising'></div>   </div> </div>";
    GuiDailyMatch.superClass_.setGuiHTML.call(this)
};
GuiDailyMatch.prototype.init = function() {
    GuiDailyMatch.superClass_.init.call(this);
    Application.instance.onOrientationchange(null);
    $(".ui_dailymatch_versus").html(Application.strings.STR_MATCH_VS);
    $(".ui_general_teamside").css("display", "none");
    $("#img_bg_left0" + Global.selectedTeam).css("display", "");
    $("#img_bg_right0" + Global.selectedTeam).css("display", "");
    $(".ui_dailymatch_pinleft").css("display", "none");
    $("#img_pinl0" + Global.selectedTeam).css("display", "");
    $(".ui_dailymatch_pinright").css("display",
        "none");
    $("#img_pinr0" + Global.enemyTeam).css("display", "");
    this.addClickListener("btn_back");
    this.addClickListener("btn_play");
    var a = "";
    if ("number" === typeof Global.selectedTeam && Global.selectedTeam > Global.TEAM_NONE && Global.selectedTeam <= Global.TEAM_PLUTO) switch (Global.selectedTeam) {
        case Global.TEAM_MICKEY:
            a = Application.strings.STR_SELECTED_TEAM_MICKEY;
            break;
        case Global.TEAM_MINNIE:
            a = Application.strings.STR_SELECTED_TEAM_MINNIE;
            break;
        case Global.TEAM_DONALD:
            a = Application.strings.STR_SELECTED_TEAM_DONALD;
            break;
        case Global.TEAM_DAISY:
            a = Application.strings.STR_SELECTED_TEAM_DAISY;
            break;
        case Global.TEAM_GOOFY:
            a = Application.strings.STR_SELECTED_TEAM_GOOFY;
            break;
        case Global.TEAM_PLUTO:
            a = Application.strings.STR_SELECTED_TEAM_PLUTO
    }
    $(".ui_dailymatch_text.t1").html("" + a);
    a = "";
    if ("number" === typeof Global.enemyTeam && Global.enemyTeam > Global.TEAM_NONE && Global.enemyTeam <= Global.TEAM_PLUTO) switch (Global.enemyTeam) {
        case Global.TEAM_MICKEY:
            a = Application.strings.STR_SELECTED_TEAM_MICKEY;
            break;
        case Global.TEAM_MINNIE:
            a =
                Application.strings.STR_SELECTED_TEAM_MINNIE;
            break;
        case Global.TEAM_DONALD:
            a = Application.strings.STR_SELECTED_TEAM_DONALD;
            break;
        case Global.TEAM_DAISY:
            a = Application.strings.STR_SELECTED_TEAM_DAISY;
            break;
        case Global.TEAM_GOOFY:
            a = Application.strings.STR_SELECTED_TEAM_GOOFY;
            break;
        case Global.TEAM_PLUTO:
            a = Application.strings.STR_SELECTED_TEAM_PLUTO
    }
    $(".ui_dailymatch_text.t2").html("" + a);
    Global.showAds ? (a = Common.random(1, Global.countSponsors), $(".ui_general_advertising").css("background", "url(media/images/localized/gui_logo_" +
        a + ".png) no-repeat right top")) : $(".ui_general_advertising").css("display", "none")
};
GuiDailyMatch.prototype.setMode = function(a) {
    switch (a) {
        case "daily":
            this.exhibitionMode = !1;
            break;
        case "exhibition":
            this.exhibitionMode = !0
    }
    this.exhibitionMode ? $("#btn_teamstanding").css("display", "none") : (this.addClickListener("btn_teamstanding"), $("#btn_teamstanding").html(Application.strings.STR_TEAM_STANDING_BUTTON_TITLE), $("#btn_teamstanding").css("display", "block"))
};
GuiDailyMatch.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_back":
            GuiManager.instance.gotoScreen(this.exhibitionMode ? GuiManager.SC_SELECT_VENUE : GuiManager.SC_MAIN_MENU);
            break;
        case "btn_teamstanding":
            GuiTeamStanding.prePage = GuiManager.SC_DAILY_MATCH;
            GuiManager.instance.gotoScreen(GuiManager.SC_TEAM_STANDING);
            break;
        case "btn_play":
            GuiManager.instance.gotoScreen(GuiManager.SC_HELP)
    }
};
GuiDailyMatch.prototype.onPressSpaceBar = function() {
    GuiDailyMatch.superClass_.onPressSpaceBar.call(this)
};

function GuiTeamStanding(a, b, c) {
    SScreen.call(this, a, b, c);
    Server.instance.getRankings(this, this.initBoard)
}
goog.inherits(GuiTeamStanding, SScreen);
GuiTeamStanding.NUM_OF_TEAMS = 6;
GuiTeamStanding.prePage = "gui_main_menu";
GuiTeamStanding.prototype.setGuiHTML = function() {
    this.css = " .ui_teamstanding_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_teamstanding_background.jpg); } .ui_dailymatch_confetti01 {  position: absolute;  width: 114px;  height: 155px;  top: 0px;  left: 0px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti01.png); } .ui_dailymatch_confetti02 {  position: absolute;  width: 83px;  height: 165px;  top: 0px;  left: 667px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti02.png); } .ui_teamstanding_character {  position: absolute;  width: 54px;  height: 60px;  left: 122px;  background: url(media/images/ui_images/screens/gui_screens_teamstanding_characters.png) no-repeat top right; } .ui_teamstanding_character.c1 {;  background-position: 0px  0px;  top: 134px; } .ui_teamstanding_character.c2 {  background-position: -54px  0px;  top: 188px; } .ui_teamstanding_character.c3 {  background-position: -108px  0px;  top: 238px; } .ui_teamstanding_character.c4 {  background-position: -162px  0px;  top: 287px; } .ui_teamstanding_character.c5 {  background-position: -216px  0px;  top: 336px; } .ui_teamstanding_character.c6 {  background-position: -270px  0px;  top: 385px; } .ui_teamstanding_button_text {  background: url(media/images/ui_images/buttons/gui_buttons_text02.png) no-repeat scroll right top rgba(0, 0, 0, 0);  color: #000000;  cursor: pointer;  font-family: 'Conv_arialbd';  font-size: 18px;  height: 60px;  padding-top: 16px;  position: absolute;  text-align: center;  top: 416px;  width: 192px;  left: 275px; } .ui_teamstanding_button_text.b1 {  background-position: 0px 0px; } .ui_teamstanding_button_text.b1:hover {  background-position: -192px 0px;  color: #656565; } .ui_teamstanding_score {  position: absolute;  left: 585px;  top: 140px;  width: 53px;  height: 36px;  color: #fff349;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 24px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_teamstanding_score.t1 {  top: 145px; }  .ui_teamstanding_score.t2 {  top: 196px; } .ui_teamstanding_score.t3 {  top: 246px; }  .ui_teamstanding_score.t4 {  top: 298px; } .ui_teamstanding_score.t5 {  top: 345px; }  .ui_teamstanding_score.t6 {  top: 397px; } .ui_teamstanding_win {  position: absolute;  left: 312px;  top: 140px;  width: 68px;  height: 36px;  color: #ccff6a;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 20px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_teamstanding_win.t1 {  top: 145px; }  .ui_teamstanding_win.t2 {  top: 196px; } .ui_teamstanding_win.t3 {  top: 246px; }  .ui_teamstanding_win.t4 {  top: 298px; } .ui_teamstanding_win.t5 {  top: 345px; }  .ui_teamstanding_win.t6 {  top: 397px; }  .ui_teamstanding_draw {  position: absolute;  left: 406px;  top: 140px;  width: 67px;  height: 36px;  color: #c4c4c4;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 20px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_teamstanding_draw.t1 {  top: 146px; }  .ui_teamstanding_draw.t2 {  top: 196px; } .ui_teamstanding_draw.t3 {  top: 246px; }  .ui_teamstanding_draw.t4 {  top: 298px; } .ui_teamstanding_draw.t5 {  top: 345px; }  .ui_teamstanding_draw.t6 {  top: 397px; }  .ui_teamstanding_lose {  position: absolute;  left: 498px;  top: 140px;  width: 57px;  height: 36px;  color: #ff5959;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 20px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_teamstanding_lose.t1 {  top: 146px; }  .ui_teamstanding_lose.t2 {  top: 196px; } .ui_teamstanding_lose.t3 {  top: 246px; }  .ui_teamstanding_lose.t4 {  top: 298px; } .ui_teamstanding_lose.t5 {  top: 345px; }  .ui_teamstanding_lose.t6 {  top: 397px; }  .ui_teamstanding_position {  position: absolute;  color: #fff837;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 20px;  left: 103px;  top: 140px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  width: 28px;  height: 31px; } .ui_teamstanding_position.t1 {  top: 153px; }  .ui_teamstanding_position.t2 {  top: 204px; } .ui_teamstanding_position.t3 {  top: 255px; }  .ui_teamstanding_position.t4 {  top: 304px; } .ui_teamstanding_position.t5 {  top: 351px; }  .ui_teamstanding_position.t6 {  top: 402px; }  .ui_teamstanding_team {  position: absolute;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 17px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always;  width: 108px;  height: 49px;  left: 178px;  top: 66px; } .ui_teamstanding_team.t1 {  top: 142px; }  .ui_teamstanding_team.t2 {  top: 197px; } .ui_teamstanding_team.t3 {  top: 245px; }  .ui_teamstanding_team.t4 {  top: 296px; } .ui_teamstanding_team.t5 {  top: 342px; }  .ui_teamstanding_team.t6 {  top: 392px; }  .ui_teamstanding_maintitle {  position: absolute;  left: 17px;  top: 62px;  width: 749px;  height: 46px;  color: #adfcff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 24px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_teamstanding_title01 {  position: absolute;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 16px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  width: 107px;  height: 20px;  left: 291px;  top: 119px; } .ui_teamstanding_title02 {  position: absolute;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 16px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  width: 107px;  height: 20px;  left: 385px;  top: 119px; } .ui_teamstanding_title03 {  position: absolute;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 16px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  width: 107px;  height: 20px;  left: 472px;  top: 119px; } .ui_teamstanding_title04 {  position: absolute;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 16px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  width: 107px;  height: 19px;  left: 558px;  top: 119px; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_teamstanding_bg'>    <div class='ui_general_teamside l1' id='img_bg_left01'></div>  <div class='ui_general_teamside l2' id='img_bg_left02'></div>  <div class='ui_general_teamside l3' id='img_bg_left03'></div>  <div class='ui_general_teamside l4' id='img_bg_left04'></div>  <div class='ui_general_teamside l5' id='img_bg_left05'></div>  <div class='ui_general_teamside l6' id='img_bg_left06'></div>  <div class='ui_general_teamside r1' id='img_bg_right01'></div>  <div class='ui_general_teamside r2' id='img_bg_right02'></div>  <div class='ui_general_teamside r3' id='img_bg_right06'></div>  <div class='ui_general_teamside r4' id='img_bg_right04'></div>  <div class='ui_general_teamside r5' id='img_bg_right05'></div>  <div class='ui_general_teamside r6' id='img_bg_right06'></div>    <div class='ui_teamstanding_character c1' id='img_ch01'></div>    <div class='ui_teamstanding_character c2' id='img_ch02'></div>    <div class='ui_teamstanding_character c3' id='img_ch03'></div>    <div class='ui_teamstanding_character c4' id='img_ch04'></div>    <div class='ui_teamstanding_character c5' id='img_ch05'></div>    <div class='ui_teamstanding_character c6' id='img_ch06'></div>  <div class='ui_teamstanding_score t1'>999</div>  <div class='ui_teamstanding_score t2'>999</div>  <div class='ui_teamstanding_score t3'>999</div>  <div class='ui_teamstanding_score t4'>999</div>  <div class='ui_teamstanding_score t5'>999</div>  <div class='ui_teamstanding_score t6'>999</div>  <div class='ui_teamstanding_position t1'>1</div>  <div class='ui_teamstanding_position t2'>2</div>  <div class='ui_teamstanding_position t3'>3</div>  <div class='ui_teamstanding_position t4'>4</div>  <div class='ui_teamstanding_position t5'>5</div>  <div class='ui_teamstanding_position t6'>6</div>  <div class='ui_teamstanding_title01'>Win</div>  <div class='ui_teamstanding_title02'>Draw</div>  <div class='ui_teamstanding_title03'>Lose</div>  <div class='ui_teamstanding_title04'>Points</div>  <div class='ui_teamstanding_team t1'>Lucky Lions</div>  <div class='ui_teamstanding_team t2'>Zippy Zebras</div>  <div class='ui_teamstanding_team t3'>Running Rhinos</div>  <div class='ui_teamstanding_team t4'>Happy Hippos</div>  <div class='ui_teamstanding_team t5'>Galloping Giraffes</div>  <div class='ui_teamstanding_team t6'>Booming Buffalos</div>  <div class='ui_teamstanding_win t1'>99</div>  <div class='ui_teamstanding_win t2'>99</div>  <div class='ui_teamstanding_win t3'>99</div>  <div class='ui_teamstanding_win t4'>99</div>  <div class='ui_teamstanding_win t5'>99</div>  <div class='ui_teamstanding_win t6'>99</div>  <div class='ui_teamstanding_draw t1'>99</div>  <div class='ui_teamstanding_draw t2'>99</div>  <div class='ui_teamstanding_draw t3'>99</div>  <div class='ui_teamstanding_draw t4'>99</div>  <div class='ui_teamstanding_draw t5'>99</div>  <div class='ui_teamstanding_draw t6'>99</div>  <div class='ui_teamstanding_lose t1'>99</div>  <div class='ui_teamstanding_lose t2'>99</div>  <div class='ui_teamstanding_lose t3'>99</div>  <div class='ui_teamstanding_lose t4'>99</div>  <div class='ui_teamstanding_lose t5'>99</div>  <div class='ui_teamstanding_lose t6'>99</div>  <div class='ui_teamstanding_maintitle'>TEAM STANDINGS</div>  <div class='ui_general_button_back b1' id='btn_back'></div>  <div class='ui_general_button_next b1' id='btn_next'></div>  <div class='ui_dailymatch_confetti01'></div>  <div class='ui_dailymatch_confetti02'></div>   </div> </div>";
    GuiTeamStanding.superClass_.setGuiHTML.call(this)
};
GuiTeamStanding.prototype.initBoard = function(a) {
    null !== a && (a.sort(function(a, c) {
        return parseInt(a.Rank, 10) < parseInt(c.Rank, 10) ? -1 : 1
    }), $(".ui_teamstanding_character").css("display", ""), this.setBoardRow(0, a), this.setBoardRow(1, a), this.setBoardRow(2, a), this.setBoardRow(3, a), this.setBoardRow(4, a), this.setBoardRow(5, a))
};
GuiTeamStanding.prototype.setBoardRow = function(a, b) {
    var c = "";
    switch (b[a].Id) {
        case 1:
            c = Application.strings.STR_TEAM_MICKEY;
            $(".ui_teamstanding_character.c" + (a + 1)).css("background-position", "0px 0px");
            break;
        case 2:
            c = Application.strings.STR_TEAM_MINNIE;
            $(".ui_teamstanding_character.c" + (a + 1)).css("background-position", "-54px 0px");
            break;
        case 3:
            c = Application.strings.STR_TEAM_DONALD;
            $(".ui_teamstanding_character.c" + (a + 1)).css("background-position", "-108px 0px");
            break;
        case 4:
            c = Application.strings.STR_TEAM_DAISY;
            $(".ui_teamstanding_character.c" + (a + 1)).css("background-position", "-162px 0px");
            break;
        case 5:
            c = Application.strings.STR_TEAM_GOOFY;
            $(".ui_teamstanding_character.c" + (a + 1)).css("background-position", "-216px 0px");
            break;
        case 6:
            c = Application.strings.STR_TEAM_PLUTO, $(".ui_teamstanding_character.c" + (a + 1)).css("background-position", "-270px 0px")
    }
    $(".ui_teamstanding_team.t" + (a + 1)).html(c);
    $(".ui_teamstanding_win.t" + (a + 1)).html("" + b[a].W);
    $(".ui_teamstanding_draw.t" + (a + 1)).html("" + b[a].D);
    $(".ui_teamstanding_lose.t" +
        (a + 1)).html("" + b[a].L);
    $(".ui_teamstanding_score.t" + (a + 1)).html("" + b[a].Points)
};
GuiTeamStanding.prototype.init = function() {
    GuiTeamStanding.superClass_.init.call(this);
    Application.instance.onOrientationchange(null);
    this.addClickListener("btn_back");
    this.addClickListener("btn_next");
    $(".ui_teamstanding_maintitle").html(Application.strings.STR_TEAM_STANDING_TITLE);
    $(".ui_teamstanding_title01").html(Application.strings.STR_WIN_TITLE);
    $(".ui_teamstanding_title02").html(Application.strings.STR_DRAW_TITLE);
    $(".ui_teamstanding_title03").html(Application.strings.STR_LOSE_TITLE);
    $(".ui_teamstanding_title04").html(Application.strings.STR_POINTS_TITLE);
    $(".ui_teamstanding_team.t1").html(Application.strings.STR_TEAM_MICKEY);
    $(".ui_teamstanding_team.t2").html(Application.strings.STR_TEAM_MINNIE);
    $(".ui_teamstanding_team.t3").html(Application.strings.STR_TEAM_DONALD);
    $(".ui_teamstanding_team.t4").html(Application.strings.STR_TEAM_DAISY);
    $(".ui_teamstanding_team.t5").html(Application.strings.STR_TEAM_GOOFY);
    $(".ui_teamstanding_team.t6").html(Application.strings.STR_TEAM_PLUTO);
    $(".ui_general_teamside").css("display", "none");
    $("#img_bg_left0" + Global.selectedTeam).css("display",
        "");
    $("#img_bg_right0" + Global.selectedTeam).css("display", "");
    for (var a = 1; a <= GuiTeamStanding.NUM_OF_TEAMS; ++a) $(".ui_teamstanding_team.t" + a).html(Application.strings.STR_STANDINGS_LOADING), $(".ui_teamstanding_win.t" + a).html(Application.strings.STR_STANDINGS_LOADING), $(".ui_teamstanding_draw.t" + a).html(Application.strings.STR_STANDINGS_LOADING), $(".ui_teamstanding_lose.t" + a).html(Application.strings.STR_STANDINGS_LOADING), $(".ui_teamstanding_score.t" + a).html(Application.strings.STR_STANDINGS_LOADING),
    $(".ui_teamstanding_character.c" + a).css("display", "none")
};
GuiTeamStanding.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_back":
            Global.championship_stage == Global.CHAMPIONSHIP_END ? GuiManager.instance.gotoScreen(GuiManager.SC_TEAM_STANDING) : GuiManager.instance.gotoScreen(GuiTeamStanding.prePage);
            break;
        case "btn_next":
            GuiManager.instance.gotoScreen(GuiManager.SC_RESULTS)
    }
};
GuiTeamStanding.prototype.onPressSpaceBar = function() {
    GuiTeamStanding.superClass_.onPressSpaceBar.call(this)
};

function GuiResults(a, b, c) {
    SScreen.call(this, a, b, c);
    this.m_days = [];
    for (a = 0; 7 > a; a++) this.m_days.push(".ui_day_number.d" + (a + 1));
    this.m_currentMinDay = 1;
    this.calendarResults = null;
    Server.instance.getStandings(this, this.onGetResults)
}
goog.inherits(GuiResults, SScreen);
GuiResults.prototype.setGuiHTML = function() {
    this.css = " .ui_results_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_results_background.jpg); } .ui_dailymatch_confetti01 {  position: absolute;  width: 114px;  height: 155px;  top: 0px;  left: 0px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti01.png); } .ui_dailymatch_confetti02 {  position: absolute;  width: 83px;  height: 165px;  top: 0px;  left: 667px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti02.png); } .ui_scroll_button {  position: absolute;  left: 358px;  width: 60px;  height: 60px;  background: url(media/images/ui_images/buttons/gui_buttons_icons03.png) no-repeat right top;  cursor: pointer;  top: 441px; } .ui_scroll_button.u1 {  top: 2px;  background-position: -360px 0px; } .ui_scroll_button.u1:hover {  top: 5px;  background-position: -420px 0px; } .ui_scroll_button.d1 {  top: 441px;  background-position: -240px 0px; } .ui_scroll_button.d1:hover {  top: 444px;  background-position: -300px 0px; } .ui_dailymatch_button_skip {  position: absolute;  top: 2px;  left: 659px;  width: 90px;  height: 90px;  background: url(media/images/ui_images/buttons/gui_buttons_icons02.png) no-repeat right top;  cursor: pointer; } .ui_dailymatch_button_skip.b1 {  background-position: -720px  0px; } .ui_dailymatch_button_skip.b1:hover {  background-position: -810px  0px; }  .ui_results_icons {  position: absolute;  width: 24px;  height: 25px;  background: url(media/images/ui_images/screens/gui_screens_results_icons.png); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px; } .ui_results_icons.i1 {  left: 202px;  top: 155px; } .ui_results_icons.i2 {  left: 277px;  top: 155px; } .ui_results_icons.i3 {  left: 360px;  top: 155px; } .ui_results_icons.i4 {  left: 443px;  top: 155px; } .ui_results_icons.i5 {  left: 525px;  top: 155px; } .ui_results_icons.i6 {  left: 605px;  top: 155px; } .ui_results_icons.i7 {  left: 202px;  top: 194px; } .ui_results_icons.i8 {  left: 277px;  top: 194px; } .ui_results_icons.i9 {  left: 360px;  top: 194px; } .ui_results_icons.i10 {  left: 443px;  top: 194px; } .ui_results_icons.i11 {  left: 525px;  top: 194px; } .ui_results_icons.i12 {  left: 605px;  top: 194px; } .ui_results_icons.i13 {  left: 202px;  top: 237px; } .ui_results_icons.i14 {  left: 277px;  top: 237px; } .ui_results_icons.i15 {  left: 360px;  top: 237px; } .ui_results_icons.i16 {  left: 443px;  top: 237px; } .ui_results_icons.i17 {  left: 525px;  top: 237px; } .ui_results_icons.i18 {  left: 605px;  top: 237px; } .ui_results_icons.i19 {  left: 202px;  top: 283px; } .ui_results_icons.i20 {  left: 277px;  top: 283px; } .ui_results_icons.i21 {  left: 360px;  top: 283px; } .ui_results_icons.i22 {  left: 443px;  top: 283px; } .ui_results_icons.i23 {  left: 525px;  top: 283px; } .ui_results_icons.i24 {  left: 605px;  top: 283px; } .ui_results_icons.i25 {  left: 202px;  top: 325px; } .ui_results_icons.i26 {  left: 277px;  top: 325px; } .ui_results_icons.i27 {  left: 360px;  top: 325px; } .ui_results_icons.i28 {  left: 443px;  top: 325px; } .ui_results_icons.i29 {  left: 525px;  top: 325px; } .ui_results_icons.i30 {  left: 605px;  top: 325px; } .ui_results_icons.i31 {  left: 202px;  top: 368px; } .ui_results_icons.i32 {  left: 277px;  top: 368px; } .ui_results_icons.i33 {  left: 360px;  top: 368px; } .ui_results_icons.i34 {  left: 443px;  top: 368px; } .ui_results_icons.i35 {  left: 525px;  top: 368px; } .ui_results_icons.i36 {  left: 605px;  top: 368px; } .ui_results_icons.i37 {  left: 202px;  top: 411px; } .ui_results_icons.i38 {  left: 277px;  top: 411px; } .ui_results_icons.i39 {  left: 360px;  top: 411px; } .ui_results_icons.i40 {  left: 443px;  top: 411px; } .ui_results_icons.i41 {  left: 525px;  top: 411px; } .ui_results_icons.i42 {  left: 605px;  top: 411px; } .ui_results_title {  position: absolute;  left: 21px;  top: 62px;  width: 749px;  height: 46px;  color: #adfcff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 24px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_day_number {  position: absolute;  left: 113px;  width: 32px;  height: 23px;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 20px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always; } .ui_day_number.d1 {  top: 158px; } .ui_day_number.d2 {  top: 201px; } .ui_day_number.d3 {  top: 247px; } .ui_day_number.d4 {  top: 290px; } .ui_day_number.d5 {  top: 333px; } .ui_day_number.d6 {  top: 379px; } .ui_day_number.d7 {  top: 419px; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_results_bg'>  <div class='ui_general_teamside l1' id='img_bg_left01'></div>  <div class='ui_general_teamside l2' id='img_bg_left02'></div>  <div class='ui_general_teamside l3' id='img_bg_left03'></div>  <div class='ui_general_teamside l4' id='img_bg_left04'></div>  <div class='ui_general_teamside l5' id='img_bg_left05'></div>  <div class='ui_general_teamside l6' id='img_bg_left06'></div>  <div class='ui_general_teamside r1' id='img_bg_right01'></div>  <div class='ui_general_teamside r2' id='img_bg_right02'></div>  <div class='ui_general_teamside r3' id='img_bg_right06'></div>  <div class='ui_general_teamside r4' id='img_bg_right04'></div>  <div class='ui_general_teamside r5' id='img_bg_right05'></div>  <div class='ui_general_teamside r6' id='img_bg_right06'></div>  <div class='ui_results_icons i1'></div>  <div class='ui_results_icons i1'></div>  <div class='ui_results_icons i2'></div>  <div class='ui_results_icons i3'></div>  <div class='ui_results_icons i4'></div>  <div class='ui_results_icons i5'></div>  <div class='ui_results_icons i6'></div>  <div class='ui_results_icons i7'></div>  <div class='ui_results_icons i8'></div>  <div class='ui_results_icons i9'></div>  <div class='ui_results_icons i10'></div>  <div class='ui_results_icons i11'></div>  <div class='ui_results_icons i12'></div>  <div class='ui_results_icons i13'></div>  <div class='ui_results_icons i14'></div>  <div class='ui_results_icons i15'></div>  <div class='ui_results_icons i16'></div>  <div class='ui_results_icons i17'></div>  <div class='ui_results_icons i18'></div>  <div class='ui_results_icons i19'></div>  <div class='ui_results_icons i20'></div>  <div class='ui_results_icons i21'></div>  <div class='ui_results_icons i22'></div>  <div class='ui_results_icons i23'></div>  <div class='ui_results_icons i24'></div>  <div class='ui_results_icons i25'></div>  <div class='ui_results_icons i26'></div>  <div class='ui_results_icons i27'></div>  <div class='ui_results_icons i28'></div>  <div class='ui_results_icons i29'></div>  <div class='ui_results_icons i30'></div>  <div class='ui_results_icons i31'></div>  <div class='ui_results_icons i32'></div>  <div class='ui_results_icons i33'></div>  <div class='ui_results_icons i34'></div>  <div class='ui_results_icons i35'></div>  <div class='ui_results_icons i36'></div>  <div class='ui_results_icons i37'></div>  <div class='ui_results_icons i38'></div>  <div class='ui_results_icons i39'></div>  <div class='ui_results_icons i40'></div>  <div class='ui_results_icons i41'></div>  <div class='ui_results_icons i42'></div>  <div class='ui_day_number d1'>1</div>  <div class='ui_day_number d2'>2</div>  <div class='ui_day_number d3'>3</div>  <div class='ui_day_number d4'>4</div>  <div class='ui_day_number d5'>5</div>  <div class='ui_day_number d6'>6</div>  <div class='ui_day_number d7'>7</div>  <div class='ui_results_title'>CHAMPIONSHIP RESULTS</div>  <div class='ui_scroll_button u1' id='btn_up'></div>  <div class='ui_scroll_button d1' id='btn_down'></div>  \x3c!--<div class='ui_general_button_back b1' id='btn_back'></div>--\x3e  <div class='ui_dailymatch_confetti01'></div>  <div class='ui_dailymatch_confetti02'></div>  <div class='ui_dailymatch_button_skip b1' id='btn_skip'></div>   </div> </div>";
    GuiResults.superClass_.setGuiHTML.call(this)
};
GuiResults.prototype.onGetResults = function(a) {
    null !== a && (this.calendarResults = a, $("#btn_up").css("display", ""), $("#btn_down").css("display", ""), this.refreshCalendar())
};
GuiResults.prototype.refreshCalendar = function() {
    $(".ui_results_icons").css("display", "none");
    $(".ui_day_number").css("display", "none");
    for (var a = 0; a < this.m_days.length; a++) this.setDayNumber(a, this.m_currentMinDay + a)
};
GuiResults.prototype.setDayNumber = function(a, b) {
    31 > b && ($(this.m_days[a]).html(b), $(this.m_days[a]).css("display", ""));
    for (var c = 0, d = !1, e = null, c = 0; c < this.calendarResults.length; ++c)
        if (parseInt(this.calendarResults[c].Day, 10) == b) {
            e = this.calendarResults[c].Results;
            d = !0;
            break
        }
    if (!1 != d) {
        d = [];
        for (c = a * GuiResults.TOTAL_TEAMS + 1; c <= a * GuiResults.TOTAL_TEAMS + GuiResults.TOTAL_TEAMS; ++c) d.push(".ui_results_icons.i" + c);
        for (c = 0; c < d.length; ++c)
            for (var f = 0; f < e.length; f++)
                if (c + 1 == parseInt(e.charAt(f), 10)) switch ($(d[c]).css("display",
                    ""), e.charAt(f + 1)) {
                    case "W":
                        $(d[c]).css("background-position", "0px 0px");
                        break;
                    case "D":
                        $(d[c]).css("background-position", "-24px 0px");
                        break;
                    case "L":
                        $(d[c]).css("background-position", "-480px 0px")
                }
    }
};
GuiResults.prototype.init = function() {
    GuiResults.superClass_.init.call(this);
    Application.instance.onOrientationchange(null);
    this.addClickListener("btn_back");
    this.addClickListener("btn_skip");
    this.addClickListener("btn_up");
    this.addClickListener("btn_down");
    $("#btn_up").css("display", "none");
    $("#btn_down").css("display", "none");
    $(".ui_results_title").html(Application.strings.STR_CHAMPIONSHIP_RESULT_TITLE);
    $(".ui_general_teamside").css("display", "none");
    $("#img_bg_left0" + Global.selectedTeam).css("display",
        "");
    $("#img_bg_right0" + Global.selectedTeam).css("display", "");
    $(".ui_results_icons").css("display", "none");
    $(".ui_day_number").css("display", "none")
};
GuiResults.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_back":
            GuiTeamStanding.prePage = GuiManager.SC_RESULTS;
            GuiManager.instance.gotoScreen(GuiManager.SC_TEAM_STANDING);
            break;
        case "btn_skip":
            Global.championship_stage == Global.CHAMPIONSHIP_END ? GuiManager.instance.gotoScreen(GuiManager.SC_CUTSCENE_FINAL) : GuiManager.instance.gotoScreen(GuiManager.SC_DAILY_MATCH);
            break;
        case "btn_up":
            this.m_currentMinDay -= 7;
            this.m_currentMinDay = 1 > this.m_currentMinDay ? 1 :
                this.m_currentMinDay;
            this.refreshCalendar();
            break;
        case "btn_down":
            this.m_currentMinDay += 7, this.m_currentMinDay = 22 < this.m_currentMinDay ? 29 : this.m_currentMinDay, this.refreshCalendar()
    }
};
GuiResults.prototype.onPressSpaceBar = function() {
    GuiResults.superClass_.onPressSpaceBar.call(this)
};
GuiResults.TOTAL_TEAMS = 6;

function GuiEndLevel(a, b, c) {
    SScreen.call(this, a, b, c);
    this.m_txtTitle = $(".ui_general_screen_title");
    this.m_txtTitle.html(Application.strings.STR_END_GAME_TITLE);
    Global.app.stopAllSounds();
    Global.app.playSound("dko_mus_title");
    Server.instance.getMatchups(this, this.onGetMatchups);
    this.m_needToShowNotification = !1;
    this.m_notificationTime = 0;
    Global.game_mode == Global.mode_tournament && (this.m_notificationTime = GuiEndLevel.NOTIFICATION_TIME, this.m_needToShowNotification = !0);
    this.m_connectedToServer = !1
}
goog.inherits(GuiEndLevel, SScreen);
GuiEndLevel.prototype.setGuiHTML = function() {
    this.css = " .ui_endlevel_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_endlevel_background.jpg)no-repeat right top; } .ui_dailymatch_confetti01 {  position: absolute;  width: 114px;  height: 155px;  top: 32px;  left: 0px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti01.png); } .ui_dailymatch_confetti02 {  position: absolute;  width: 83px;  height: 165px;  top: 32px;  left: 667px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti02.png); } .ui_endlevel_screen_support {  position: absolute;  top: 337px;  left: 214px;  width: 324px;  height: 169px;  background: url(media/images/ui_images/screens/gui_screens_endlevel_score.png)no-repeat right top; } .ui_endlevel_button_retry {  position: absolute;  top: 194px;  left: 639px;  width: 110px;  height: 110px;  background: url(media/images/ui_images/buttons/gui_buttons_icons01.png) no-repeat right top;  cursor: pointer; } .ui_endlevel_button_retry.b1 {  background-position: -880px 0px; } .ui_endlevel_button_retry.b1:hover {  background-position: -990px 0px; } .ui_endlevel_screen_pinleft {  position: absolute;  width: 74px;  height: 76px;  background: url('media/images/ui_images/screens/gui_screens_endlevel_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 182px;  left: 218px; } .ui_endlevel_screen_pinleft.p1 {  background-position: 0px 0px; } .ui_endlevel_screen_pinleft.p2 {  background-position: -74px 0px; } .ui_endlevel_screen_pinleft.p3 {  background-position: -148px 0px; } .ui_endlevel_screen_pinleft.p4 {  background-position: -222px 0px; } .ui_endlevel_screen_pinleft.p5 {  background-position: -296px 0px; } .ui_endlevel_screen_pinleft.p6 {  background-position: -370px 0px; } .ui_endlevel_screen_pinright {  position: absolute;  width: 74px;  height: 76px;  background: url('media/images/ui_images/screens/gui_screens_endlevel_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 182px;  left: 475px; } .ui_endlevel_screen_pinright.p1 {  background-position: 0px 0px; } .ui_endlevel_screen_pinright.p2 {  background-position: -74px 0px; } .ui_endlevel_screen_pinright.p3 {  background-position: -148px 0px; } .ui_endlevel_screen_pinright.p4 {  background-position: -222px 0px; } .ui_endlevel_screen_pinright.p5 {  background-position: -296px 0px; } .ui_endlevel_screen_pinright.p6 {  background-position: -370px 0px; } .ui_endlevel_screen_cup {  position: absolute;  width: 64px;  height: 49px;  background: url('media/images/ui_images/screens/gui_screens_endlevel_trophy.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  left: 409px;  top: 204px; } .ui_endlevel_screen_cup.c1 {  top: 209px;  left: 292px; } .ui_endlevel_screen_cup.c2 {  top: 209px;  left: 410px; } .ui_endlevel_screen {  position: absolute;  left: 0px;  top: 126px;  width: 749px;  height: 46px;  color: #ccff6a;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 36px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_endlevel_screen.t1 { }  .ui_endlevel_screen.t2 {  color: #e8e8e8; } .ui_endlevel_screen.t3 {  color: #ff8989; } .ui_endlevel_team {  position: absolute;  left: 0px;  top: 140px;  width: 749px;  height: 46px;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 17px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_endlevel_team.t1 {  left: 0px;  top: 120px; }  .ui_endlevel_team.t2 {  left: 0px;  top: 141px; } .ui_endlevel_text {  position: absolute;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 17px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  width: 229px;  height: 26px; } .ui_endlevel_text.t1 {  top: 256px;  left: 142px; } .ui_endlevel_text.t2 {  top: 256px;  left: 394px; } .ui_endlevel_textscore {  position: absolute;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 40px;  top: 277px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  width: 229px;  height: 26px; } .ui_endlevel_textscore.t1 {  left: 142px; } .ui_endlevel_textscore.t2 {  left: 394px; } .ui_endlevel_textmtitle {  position: absolute;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 17px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  width: 206px;  height: 27px;  left: 279px;  top: 327px; } .ui_endlevel_textmscore {  position: absolute;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 22px;  top: 349px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  width: 229px;  height: 26px;  left: 266px; } .ui_endlevel_textttitle {  position: absolute;  color: #fff349;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 17px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  width: 264px;  height: 27px;  left: 243px;  top: 411px; } .ui_endlevel_texttscore {  position: absolute;  color: #fff349;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 40px;  top: 426px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  width: 274px;  height: 46px;  left: 243px; } .ui_endlevel_fan {  position: absolute;  left: 0px;  bottom: 0px;  width: 219px;  height: 206px;  display: table-cell; }  .ui_endlevel_fan.f1 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan01.png); }  .ui_endlevel_fan.f2 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan02.png); } .ui_endlevel_fan.f3 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan03.png); } .ui_endlevel_fan.f4 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan04.png); } .ui_endlevel_fan.f5 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan05.png); } .ui_endlevel_fan.f6 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan06.png); }  .ui_endlevel_fan02 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  left: 531px;  display: table-cell; } .ui_endlevel_fan02.f1 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character01.png); }  .ui_endlevel_fan02.f2 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character02.png); } .ui_endlevel_fan02.f3 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character03.png); } .ui_endlevel_fan02.f4 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character04.png); } .ui_endlevel_fan02.f5 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character05.png); } .ui_endlevel_fan02.f6 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character06.png); }";
    this.html =
        " <div class='ui_general_container'>  <div class='ui_endlevel_bg'>   <div class='ui_general_teamside l1' id='img_bg_left01'></div>  <div class='ui_general_teamside l2' id='img_bg_left02'></div>  <div class='ui_general_teamside l3' id='img_bg_left03'></div>  <div class='ui_general_teamside l4' id='img_bg_left04'></div>  <div class='ui_general_teamside l5' id='img_bg_left05'></div>  <div class='ui_general_teamside l6' id='img_bg_left06'></div>  <div class='ui_general_teamside r1' id='img_bg_right01'></div>  <div class='ui_general_teamside r2' id='img_bg_right02'></div>  <div class='ui_general_teamside r3' id='img_bg_right06'></div>  <div class='ui_general_teamside r4' id='img_bg_right04'></div>  <div class='ui_general_teamside r5' id='img_bg_right05'></div>  <div class='ui_general_teamside r6' id='img_bg_right06'></div>  <div class='ui_general_button_mainmenu b1' id='btn_back'></div>  <div class='ui_endlevel_screen_support' id='img_support'></div>  <div class='ui_endlevel_screen_pinleft p1' id='img_pinl01'></div>  <div class='ui_endlevel_screen_pinleft p2' id='img_pinl02'></div>  <div class='ui_endlevel_screen_pinleft p3' id='img_pinl03'></div>  <div class='ui_endlevel_screen_pinleft p4' id='img_pinl04'></div>  <div class='ui_endlevel_screen_pinleft p5' id='img_pinl05'></div>  <div class='ui_endlevel_screen_pinleft p6' id='img_pinl06'></div>  <div class='ui_endlevel_screen_pinright p1' id='img_pinr01'></div>  <div class='ui_endlevel_screen_pinright p2' id='img_pinr02'></div>  <div class='ui_endlevel_screen_pinright p3' id='img_pinr03'></div>  <div class='ui_endlevel_screen_pinright p4' id='img_pinr04'></div>  <div class='ui_endlevel_screen_pinright p5' id='img_pinr05'></div>  <div class='ui_endlevel_screen_pinright p6' id='img_pinr06'></div>  <div class='ui_endlevel_screen_cup c1' id='img_cup1'></div>  <div class='ui_endlevel_screen_cup c2' id='img_cup2'></div>  <div class='ui_endlevel_screen t1'>YOU WIN!</div>  <div class='ui_endlevel_screen t2'>DRAW!</div>  <div class='ui_endlevel_screen t3'>TRY AGAIN</div>  <div class='ui_endlevel_text t1'>team01</div>  <div class='ui_endlevel_text t2'>team02</div>  <div class='ui_endlevel_textscore t1'>0</div>  <div class='ui_endlevel_textscore t2'>0</div>  <div class='ui_endlevel_textmtitle t1'>minigame</div>  <div class='ui_endlevel_textmscore t2'>0000</div>  <div class='ui_endlevel_textttitle t1'>TOTAL SCORE</div>  <div class='ui_endlevel_texttscore t2'>0000</div>  <div class='ui_endlevel_fan f1'></div>  <div class='ui_endlevel_fan f2'></div>  <div class='ui_endlevel_fan f3'></div>  <div class='ui_endlevel_fan f4'></div>  <div class='ui_endlevel_fan f5'></div>  <div class='ui_endlevel_fan f6'></div>  <div class='ui_endlevel_fan02 f1'></div>  <div class='ui_endlevel_fan02 f2'></div>  <div class='ui_endlevel_fan02 f3'></div>  <div class='ui_endlevel_fan02 f4'></div>  <div class='ui_endlevel_fan02 f5'></div>  <div class='ui_endlevel_fan02 f6'></div>  <div class='ui_endlevel_button_retry b1' id='btn_retry'></div>  <div class='ui_general_button_next b1' id='btn_next'></div>  <div class='ui_dailymatch_confetti01'></div>  <div class='ui_dailymatch_confetti02'></div>    <div class='ui_general_advertising_support'></div>   <div class='ui_general_advertising'></div>   </div>  </div> </div>";
    GuiEndLevel.superClass_.setGuiHTML.call(this)
};
GuiEndLevel.prototype.onGetMatchups = function(a) {
    Global.matchups = [];
    if (null !== a) {
        for (var b = 0; b < a.matchups.length; ++b)
            if (0 > parseInt(a.matchups.charAt(b), 10) || parseInt(a.matchups.charAt(b), 10) > Global.TOTAL_TEAMS && -1 === a.matchups.indexOf(Global.INDEX_CHAMPIONSHIP_END)) {
                Server.instance.getMatchups(this, this.onGetMatchups);
                return
            }
        if (6 == a.matchups.length) $("#btn_tournament").css("display", ""), Global.matchups.push([parseInt(a.matchups.charAt(0), 10), parseInt(a.matchups.charAt(1), 10)]), Global.matchups.push([parseInt(a.matchups.charAt(2),
            10), parseInt(a.matchups.charAt(3), 10)]), Global.matchups.push([parseInt(a.matchups.charAt(4), 10), parseInt(a.matchups.charAt(5), 10)]), Global.championship_stage = Global.CHAMPIONSHIP_NORMAL, this.m_connectedToServer = !0;
        else if (4 == a.matchups.length) $("#btn_tournament").css("display", ""), Global.matchups.push([parseInt(a.matchups.charAt(0), 10), parseInt(a.matchups.charAt(1), 10)]), Global.matchups.push([parseInt(a.matchups.charAt(2), 10), parseInt(a.matchups.charAt(3), 10)]), Global.championship_stage = Global.CHAMPIONSHIP_SEMI,
        this.m_connectedToServer = !0;
        else if (2 == a.matchups.length) $("#btn_tournament").css("display", ""), Global.matchups.push([parseInt(a.matchups.charAt(0), 10), parseInt(a.matchups.charAt(1), 10)]), Global.championship_stage = Global.CHAMPIONSHIP_FINAL, this.m_connectedToServer = !0;
        else if (-1 !== a.matchups.indexOf(Global.INDEX_CHAMPIONSHIP_END)) $("#btn_tournament").css("display", ""), Global.championship_stage = Global.CHAMPIONSHIP_END, this.m_connectedToServer = !0;
        else {
            Server.instance.getMatchups(this, this.onGetMatchups);
            return
        }
        a = !1;
        for (b = 0; b < Global.matchups.length; ++b)
            for (var c = 0; c < Global.matchups[b].length; ++c)
                if (Global.data.selectedTeam == Global.matchups[b][c]) switch (a = !0, c) {
                    case 0:
                        Global.isTeamPlayerLocal = !0;
                        break;
                    case 1:
                        Global.isTeamPlayerLocal = !1
                }!1 == a && Global.data.selectTeam(Global.TEAM_NONE)
    }
};
GuiEndLevel.prototype.init = function() {
    GuiEndLevel.superClass_.init.call(this);
    this.addClickListener("btn_back");
    this.addClickListener("btn_retry");
    this.addClickListener("btn_next");
    $(".ui_endlevel_screen").css("display", "none");
    $(".ui_endlevel_textmtitle").html(Application.strings.STR_ENDLEVEL_MINIGAME);
    $(".ui_endlevel_textttitle").html(Application.strings.STR_ENDLEVEL_SCORE);
    var a = Global.scoreTeamLeft;
    Global.scoreTeamLeft = Global.scoreTeamRight;
    Global.scoreTeamRight = a;
    a = "";
    switch (Global.selectedTeam) {
        case Global.TEAM_MICKEY:
            a =
                Application.strings.STR_SELECTED_TEAM_MICKEY;
            break;
        case Global.TEAM_MINNIE:
            a = Application.strings.STR_SELECTED_TEAM_MINNIE;
            break;
        case Global.TEAM_DONALD:
            a = Application.strings.STR_SELECTED_TEAM_DONALD;
            break;
        case Global.TEAM_DAISY:
            a = Application.strings.STR_SELECTED_TEAM_DAISY;
            break;
        case Global.TEAM_GOOFY:
            a = Application.strings.STR_SELECTED_TEAM_GOOFY;
            break;
        case Global.TEAM_PLUTO:
            a = Application.strings.STR_SELECTED_TEAM_PLUTO
    }
    $(".ui_endlevel_text.t1").html(a);
    a = "";
    switch (Global.enemyTeam) {
        case Global.TEAM_MICKEY:
            a =
                Application.strings.STR_SELECTED_TEAM_MICKEY;
            break;
        case Global.TEAM_MINNIE:
            a = Application.strings.STR_SELECTED_TEAM_MINNIE;
            break;
        case Global.TEAM_DONALD:
            a = Application.strings.STR_SELECTED_TEAM_DONALD;
            break;
        case Global.TEAM_DAISY:
            a = Application.strings.STR_SELECTED_TEAM_DAISY;
            break;
        case Global.TEAM_GOOFY:
            a = Application.strings.STR_SELECTED_TEAM_GOOFY;
            break;
        case Global.TEAM_PLUTO:
            a = Application.strings.STR_SELECTED_TEAM_PLUTO
    }
    $(".ui_endlevel_text.t2").html(a);
    $(".ui_endlevel_fan").css("display", "none");
    $(".ui_endlevel_fan02").css("display", "none");
    Global.game_mode === Global.mode_tournament ? ($("#btn_retry").css("display", "none"), $("#btn_back").css("display", "none")) : ($("#btn_next").css("display", "none"), $("#img_support").css("display", "none"), $(".ui_endlevel_textttitle.t1").css("display", "none"), $(".ui_endlevel_texttscore.t2").css("display", "none"));
    $(".ui_general_teamside").css("display", "none");
    $("#img_bg_left0" + Global.selectedTeam).css("display", "");
    $("#img_bg_right0" + Global.selectedTeam).css("display",
        "");
    $(".ui_endlevel_screen_pinleft").css("display", "none");
    $("#img_pinl0" + Global.selectedTeam).css("display", "");
    $(".ui_endlevel_screen_pinright").css("display", "none");
    $("#img_pinr0" + Global.enemyTeam).css("display", "");
    $(".ui_endlevel_textscore.t1").html("" + Global.scoreTeamLeft);
    $(".ui_endlevel_textscore.t2").html("" + Global.scoreTeamRight);
    Global.scoreTeamLeft > Global.scoreTeamRight ? $("#img_cup2").css("display", "none") : Global.scoreTeamLeft < Global.scoreTeamRight ? $("#img_cup1").css("display", "none") :
        ($("#img_cup1").css("display", "none"), $("#img_cup2").css("display", "none"));
    Global.game_mode == Global.mode_tournament && Server.instance.sendResult(Global.selectedTeam, Global.scoreTeamLeft, Global.enemyTeam, Global.scoreTeamRight);
    $(".ui_endlevel_textmscore").html(Global.minigameScore);
    a = 0;
    Global.scoreTeamLeft > Global.scoreTeamRight && (a = Application.config.SoccerGeneral.scoreWin, $(".ui_endlevel_screen.t1").css("display", ""), $(".ui_endlevel_screen.t1").html(Application.strings.STR_ENDLEVEL_WIN), $(".ui_endlevel_fan.f" +
        Global.selectedTeam).css("display", ""));
    Global.scoreTeamLeft === Global.scoreTeamRight && (a = Application.config.SoccerGeneral.scoreDraw, $(".ui_endlevel_screen.t2").css("display", ""), $(".ui_endlevel_screen.t2").html(Application.strings.STR_ENDLEVEL_DRAW), $(".ui_endlevel_fan.f" + Global.selectedTeam).css("display", ""), $(".ui_endlevel_fan02.f" + Global.selectedTeam).css("display", ""));
    Global.scoreTeamLeft < Global.scoreTeamRight && (a = Application.config.SoccerGeneral.scoreLose, $(".ui_endlevel_screen.t3").css("display",
        ""), $(".ui_endlevel_screen.t3").html(Application.strings.STR_ENDLEVEL_LOSE), $(".ui_endlevel_fan02.f" + Global.enemyTeam).css("display", ""));
    $(".ui_endlevel_texttscore").html("" + (a + Global.minigameScore));
    Global.showAds ? (a = Common.random(1, Global.countSponsors), $(".ui_general_advertising").css("background", "url(media/images/localized/gui_logo_" + a + ".png) no-repeat right top")) : $(".ui_general_advertising").css("display", "none")
};
GuiEndLevel.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_back":
            GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU);
            break;
        case "btn_retry":
            GuiManager.instance.gotoScreen(GuiManager.SC_SELECT_TEAM);
            break;
        case "btn_next":
            if (Global.game_mode == Global.mode_tournament && !0 == this.m_needToShowNotification) {
                this.m_needToShowNotification = !1;
                GuiNotification.currentMode = GuiNotification.MODE_SUBMIT;
                this.addPopup(GuiNotification, 0, 0);
                break
            }
            Global.data.selectedTeam ==
                Global.TEAM_NONE || !1 == this.m_connectedToServer ? GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU) : GuiManager.instance.gotoScreen(GuiManager.SC_DAILY_MATCH)
    }
};
GuiEndLevel.prototype.onPressSpaceBar = function() {
    GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU);
    GuiEndLevel.superClass_.onPressSpaceBar.call(this)
};
GuiEndLevel.prototype.onEndTransition = function(a) {
    GuiEndLevel.superClass_.onEndTransition.call(this, a);
    a.params && Global.app.guiManager.gotoScreen(a.params.screen)
};
GuiEndLevel.prototype.update = function(a) {
    GuiEndLevel.superClass_.update.call(this, a);
    !0 == this.m_needToShowNotification && (this.m_notificationTime -= a, 0 > this.m_notificationTime && (this.m_needToShowNotification = !1, GuiNotification.currentMode = GuiNotification.MODE_SUBMIT, this.addPopup(GuiNotification, 0, 0)))
};
GuiEndLevel.NOTIFICATION_TIME = 1E3;

function GuiDummyLoader(a, b, c, d) {
    SScreen.call(this, b, c, d);
    GuiDummyLoader.instance = this;
    this.m_txtPercent = $(".ui_loader_percent");
    this.m_time = 0;
    this.m_fakeLoadingTime = 500;
    this.m_destinyScreen = a;
    $(".ui_loader_info").html(Application.strings.STR_LOADING)
}
goog.inherits(GuiDummyLoader, SScreen);
GuiDummyLoader.prototype.setGuiHTML = function() {
    this.css = " .ui_loader_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_loader_background.jpg); } .ui_loader_bar {  position: absolute;  top: 428px;  left: 299px;  width: 151px;  height: 13px;  background: url(media/images/ui_images/screens/gui_screens_loader_bar.jpg); }";
    this.html = " <div class='ui_general_container'>   <div class='ui_loader_bg'>  <div class='ui_loader_bar'></div> </div>  <div class='ui_general_button_next b1' id='btn_next'></div>    <div class='ui_general_advertising_support'></div>   <div class='ui_general_advertising'></div> </div>";
    GuiDummyLoader.superClass_.setGuiHTML.call(this)
};
GuiDummyLoader.prototype.init = function() {
    $(".ui_loader_bar").css("width", "0px");
    $("#btn_next").css("display", "none");
    var a = Common.random(1, Global.countSponsors);
    Global.showAds ? $(".ui_general_advertising").css("background", "url(media/images/localized/gui_logo_" + a + ".png) no-repeat right top") : $(".ui_general_advertising").css("display", "none")
};
GuiDummyLoader.prototype.update = function(a) {
    GuiDummyLoader.superClass_.update.call(this, a);
    this.m_time += a;
    this.m_time > this.m_fakeLoadingTime && ("undefined" !== typeof this.m_destinyScreen ? GuiManager.instance.gotoScreen(this.m_destinyScreen) : GuiManager.instance.gotoScreen(GuiManager.SC_GAME));
    a = 1.51 * Math.floor(this.m_time / this.m_fakeLoadingTime * 100);
    $(".ui_loader_bar").css("width", parseInt(a, 10) + "px")
};

function GuiManager() {
    var a = 0;
    this.UIAssetsInit = [];
    Global.countSponsors = window.config.sponsors[0].sponsorsGame;
    Global.countCentralLogo = window.config.sponsors[0].centralLogo;
    for (a = 0; a < UIAssets.mainMenu.length; a++) this.UIAssetsInit.push(Global.URL_UI_IMAGES + UIAssets.mainMenu[a]);
    for (a = 0; a < UIAssets.externs.length; a++) this.UIAssetsInit.push("media/" + UIAssets.externs[a]);
    for (a = 0; a < Global.countSponsors; a++) this.UIAssetsInit.push("media/images/localized/gui_logo_" + (a + 1) + ".png"), this.UIAssetsInit.push("media/images/localized/ad_logo_" +
        (a + 1) + ".png");
    for (a = 0; a < Global.countCentralLogo; a++) this.UIAssetsInit.push("media/images/localized/central_logo_" + (a + 1) + ".png");
    this.UIAssetsAndAnimo = [];
    for (a = 0; a < UIAssets.buttons.length; a++) this.UIAssetsAndAnimo.push(Global.URL_UI_IMAGES + "buttons/" + UIAssets.buttons[a]);
    for (a = 0; a < UIAssets.common.length; a++) this.UIAssetsAndAnimo.push(Global.URL_UI_IMAGES + "common/" + UIAssets.common[a]);
    for (a = 0; a < UIAssets.hud.length; a++) this.UIAssetsAndAnimo.push(Global.URL_UI_IMAGES + "hud/" + UIAssets.hud[a]);
    for (a = 0; a <
        UIAssets.popups.length; a++) this.UIAssetsAndAnimo.push(Global.URL_UI_IMAGES + "popups/" + UIAssets.popups[a]);
    for (a = 0; a < UIAssets.screens.length; a++) this.UIAssetsAndAnimo.push(Global.URL_UI_IMAGES + "screens/" + UIAssets.screens[a]);
    a = 0;
    this.animoFields = [];
    this.animoExtra = [];
    for (var b in window.Assets.assetsParams) - 1 !== window.Assets.assetsParams[b].u.indexOf("soccerbeijing_DKO_bg_beijing") || -1 !== window.Assets.assetsParams[b].u.indexOf("soccerbrazil_DKO_bg_brazil") || -1 !== window.Assets.assetsParams[b].u.indexOf("socceridaho_DKO_bg_idaho") || -1 !== window.Assets.assetsParams[b].u.indexOf("socceritaly_DKO_bg_italy") || -1 !== window.Assets.assetsParams[b].u.indexOf("soccernewyork_DKO_bg_newyork") || -1 !== window.Assets.assetsParams[b].u.indexOf("soccerparis_DKO_bg_paris") ? this.animoFields.push(Global.URL_ASSETS + window.Assets.assetsParams[b].u) : (a++, 29 >= a ? this.UIAssetsAndAnimo.push(Global.URL_ASSETS + window.Assets.assetsParams[b].u) : this.animoExtra.push(Global.URL_ASSETS + window.Assets.assetsParams[b].u));
    ScreenManager.call(this);
    GuiManager.instance =
        this;
    Server.initialize();
    Global.data = new DataManager;
    Global.savedNumData = Global.data.initLoadData()
}
goog.inherits(GuiManager, ScreenManager);
GuiManager.instance = null;
GuiManager.SOUND_PERCENT = 20;
GuiManager.SC_SOUND_LOADER = "gui_soundloader";
GuiManager.SC_LOADER = "gui_loader";
GuiManager.SC_MAIN_MENU = "gui_main_menu";
GuiManager.SC_GAME = "gui_game";
GuiManager.SC_CUTSCENE = "gui_cutscene";
GuiManager.SC_CUTSCENE_FINAL = "gui_cutscene_final";
GuiManager.SC_METAMAP = "gui_metamap";
GuiManager.SC_METAMAP2 = "gui_metamap2";
GuiManager.SC_SELECT_PLAYER = "gui_select_player";
GuiManager.SC_TROPHIES = "gui_trophies";
GuiManager.SC_END_GAME = "gui_end_game";
GuiManager.SC_TRY_AGAIN = "gui_try_again";
GuiManager.SC_DAILY_MATCH = "gui_daily_match";
GuiManager.SC_TEAM_STANDING = "gui_team_standing";
GuiManager.SC_RESULTS = "gui_results";
GuiManager.SC_END_LEVEL = "gui_end_level";
GuiManager.SC_WINNER_GAME = "gui_winner_game";
GuiManager.SC_HELP = "gui_help";
GuiManager.SC_HELP2 = "gui_help2";
GuiManager.SC_HELP3 = "gui_help3";
GuiManager.SC_SELECT_VENUE = "gui_select_venue";
GuiManager.SC_SELECT_TEAM = "gui_select_team";
GuiManager.SC_DUMMY_LOADER = "gui_dummy_loader";
GuiManager.SC_EXHIBITION_MATCH = "gui_exhibition_match";
GuiManager.prototype.gotoScreen = function(a) {
    GuiManager.superClass_.gotoScreen.call(this, a);
    switch (a) {
        case GuiManager.SC_SOUND_LOADER:
            this.m_currentScreen = new GuiLoader(null, GuiManager.SC_MAIN_MENU, 0, GuiManager.SOUND_PERCENT);
            break;
        case GuiManager.SC_MAIN_MENU:
            this.UIAssetsInit ? (this.m_currentScreen = new GuiLoader(this.UIAssetsInit, GuiManager.SC_MAIN_MENU, GuiManager.SOUND_PERCENT), this.UIAssetsInit = null) : this.m_currentScreen = new GuiMainMenu;
            break;
        case GuiManager.SC_GAME:
            this.animoExtra ? (this.m_currentScreen =
                new GuiLoader(this.animoExtra, GuiManager.SC_GAME, GuiManager.SOUND_PERCENT), this.animoExtra = null) : this.m_currentScreen = new GuiGame;
            break;
        case GuiManager.SC_CUTSCENE:
            this.m_currentScreen = new GuiCutscene;
            break;
        case GuiManager.SC_CUTSCENE_FINAL:
            this.m_currentScreen = new GuiCutsceneFinal;
            break;
        case GuiManager.SC_SELECT_TEAM:
            this.UIAssetsAndAnimo ? (this.m_currentScreen = new GuiLoader(this.UIAssetsAndAnimo, GuiManager.SC_SELECT_TEAM, GuiManager.SOUND_PERCENT), this.UIAssetsAndAnimo = null) : this.m_currentScreen =
                new GuiSelectTeam;
            break;
        case GuiManager.SC_SELECT_VENUE:
            this.m_currentScreen = new GuiSelectVenue;
            break;
        case GuiManager.SC_TROPHIES:
            this.m_currentScreen = new GuiTrophies;
            break;
        case GuiManager.SC_END_GAME:
            this.m_currentScreen = new GuiEndGame;
            break;
        case GuiManager.SC_WINNER_GAME:
            this.m_currentScreen = new GuiWinner;
            break;
        case GuiManager.SC_DAILY_MATCH:
            if (this.UIAssetsAndAnimo) this.m_currentScreen = new GuiLoader(this.UIAssetsAndAnimo, GuiManager.SC_DAILY_MATCH, GuiManager.SOUND_PERCENT), this.UIAssetsAndAnimo =
                null;
            else switch (Global.championship_stage) {
                case Global.CHAMPIONSHIP_NORMAL:
                    this.m_currentScreen = new GuiDailyMatchChampionship;
                    break;
                case Global.CHAMPIONSHIP_SEMI:
                    this.m_currentScreen = new GuiSemifinalChampionship;
                    break;
                case Global.CHAMPIONSHIP_FINAL:
                    this.m_currentScreen = new GuiFinalChampionship
            }
            break;
        case GuiManager.SC_TEAM_STANDING:
            this.m_currentScreen = new GuiTeamStanding;
            break;
        case GuiManager.SC_RESULTS:
            this.m_currentScreen = new GuiResults;
            break;
        case GuiManager.SC_HELP:
            this.animoFields ? (this.m_currentScreen =
                new GuiLoader(this.animoFields, GuiManager.SC_HELP, GuiManager.SOUND_PERCENT), this.animoFields = null) : this.m_currentScreen = new GuiHelp;
            break;
        case GuiManager.SC_HELP2:
            this.m_currentScreen = new GuiHelp2;
            break;
        case GuiManager.SC_HELP3:
            this.m_currentScreen = new GuiHelp3;
            break;
        case GuiManager.SC_END_LEVEL:
            this.m_currentScreen = new GuiEndLevel;
            break;
        case GuiManager.SC_DUMMY_LOADER:
            this.m_currentScreen = new GuiDummyLoader;
            break;
        case GuiManager.SC_EXHIBITION_MATCH:
            this.UIAssetsAndAnimo ? (this.m_currentScreen = new GuiLoader(this.UIAssetsAndAnimo,
                GuiManager.SC_EXHIBITION_MATCH, GuiManager.SOUND_PERCENT), this.UIAssetsAndAnimo = null) : (this.m_currentScreen = new GuiDailyMatch, GuiDailyMatch.instance.setMode("exhibition"))
    }
};
GuiManager.prototype.onKeyDown = function(a) {
    GuiManager.superClass_.onKeyDown.call(this, a);
    Cheats.onKeyDown(a)
};
GuiManager.prototype.free = function() {
    GuiManager.instance = null;
    GuiManager.superClass_.free.call(this)
};

function GuiWinner(a, b, c) {
    SScreen.call(this, a, b, c);
    Server.instance.getRankings(this, this.initBoard)
}
goog.inherits(GuiWinner, SScreen);
GuiWinner.prototype.setGuiHTML = function() {
    this.css = " .ui_winner_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_selectvenue_background.jpg); } .ui_winner_bg_image {  position: absolute;  top: 112px;  left: 85px;  width: 576px;  height: 344px;  background: url(media/images/ui_images/screens/gui_screens_winner_bg.png) no-repeat top left; } .ui_winner_character {  position: absolute;  top: 346px;  left: 0px;  width: 571px;  height: 154px;  background: url(media/images/ui_images/screens/gui_screens_selectvenue_character.png); } .ui_winner_player01 {  position: absolute;  top: 126px;  left: 277px;  width: 205px;  height: 245px;  background: url(media/images/ui_images/screens/gui_screens_winner_character01.png); } .ui_winner_player02 {  position: absolute;  top: 126px;  left: 277px;  width: 205px;  height: 245px;  background: url(media/images/ui_images/screens/gui_screens_winner_character02.png); } .ui_winner_player03 {  position: absolute;  top: 126px;  left: 277px;  width: 205px;  height: 245px;  background: url(media/images/ui_images/screens/gui_screens_winner_character03.png); } .ui_winner_player04 {  position: absolute;  top: 126px;  left: 277px;  width: 205px;  height: 245px;  background: url(media/images/ui_images/screens/gui_screens_winner_character04.png); } .ui_winner_player05 {  position: absolute;  top: 126px;  left: 277px;  width: 205px;  height: 245px;  background: url(media/images/ui_images/screens/gui_screens_winner_character05.png); } .ui_winner_player06 {  position: absolute;  top: 126px;  left: 277px;  width: 205px;  height: 245px;  background: url(media/images/ui_images/screens/gui_screens_winner_character06.png); } .ui_winner_screen_title {  position: absolute;  left: 20px;  top: 34px;  width: 749px;  height: 34px;  color: #adfcff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 28px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_winner_screen_title_small {  position: absolute;  left: 20px;  top: 66px;  width: 749px;  height: 24px;  color: #adfcff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 16px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_winner_title {  position: absolute;  width: 362px;  height: 35px;  color: #3b586c;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 20px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 197px;  top: 437px; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_winner_bg'>   <div class='ui_winner_bg_image'></div>    <div class='ui_general_teamside l1' id='img_bg_left01'></div>  <div class='ui_general_teamside l2' id='img_bg_left02'></div>  <div class='ui_general_teamside l3' id='img_bg_left03'></div>  <div class='ui_general_teamside l4' id='img_bg_left04'></div>  <div class='ui_general_teamside l5' id='img_bg_left05'></div>  <div class='ui_general_teamside l6' id='img_bg_left06'></div>  <div class='ui_general_teamside r1' id='img_bg_right01'></div>  <div class='ui_general_teamside r2' id='img_bg_right02'></div>  <div class='ui_general_teamside r3' id='img_bg_right03'></div>  <div class='ui_general_teamside r4' id='img_bg_right04'></div>  <div class='ui_general_teamside r5' id='img_bg_right05'></div>  <div class='ui_general_teamside r6' id='img_bg_right06'></div>  <div class='ui_winner_player01' id='img_player01'></div>  <div class='ui_winner_player02' id='img_player02'></div>  <div class='ui_winner_player03' id='img_player03'></div>  <div class='ui_winner_player04' id='img_player04'></div>  <div class='ui_winner_player05' id='img_player05'></div>  <div class='ui_winner_player06' id='img_player06'></div>  <div class='ui_winner_screen_title'>WINNER</div>  <div class='ui_winner_screen_title_small'>DISNEY KICKOFF CHAMPIONSHIP</div>  <div class='ui_general_button_back b1' id='btn_back'></div>  <div class='ui_general_button_ok b1' id='btn_ok'></div>  <div class='ui_winner_character'></div>   <div class='ui_winner_title'>TEAM NAME!</div>   </div> </div>";
    GuiWinner.superClass_.setGuiHTML.call(this)
};
GuiWinner.prototype.initBoard = function(a) {
    if (null !== a) {
        a.sort(function(a, b) {
            return parseInt(a.Rank, 10) < parseInt(b.Rank, 10) ? -1 : 1
        });
        var b = "";
        a = a[0].Id;
        switch (a) {
            case 1:
                b = Application.strings.STR_TEAM_MICKEY;
                break;
            case 2:
                b = Application.strings.STR_TEAM_MINNIE;
                break;
            case 3:
                b = Application.strings.STR_TEAM_DONALD;
                break;
            case 4:
                b = Application.strings.STR_TEAM_DAISY;
                break;
            case 5:
                b = Application.strings.STR_TEAM_GOOFY;
                break;
            case 6:
                b = Application.strings.STR_TEAM_PLUTO
        }
        $(".ui_winner_title").html(b);
        $("#img_bg_left0" +
            a).css("display", "");
        $("#img_bg_right0" + a).css("display", "");
        $("#img_player0" + a).css("display", "")
    }
};
GuiWinner.prototype.init = function() {
    GuiWinner.superClass_.init.call(this);
    this.addClickListener("btn_back");
    this.addClickListener("btn_ok");
    $(".ui_winner_screen_title").html(Application.strings.WINNER_GAME_TITLE);
    $(".ui_winner_screen_title_small").html(Application.strings.WINNER_GAME_TITLE_SMALL);
    $(".ui_winner_title").html("");
    $(".ui_general_teamside.l1").css("display", "none");
    $(".ui_general_teamside.l2").css("display", "none");
    $(".ui_general_teamside.l3").css("display", "none");
    $(".ui_general_teamside.l4").css("display",
        "none");
    $(".ui_general_teamside.l5").css("display", "none");
    $(".ui_general_teamside.l6").css("display", "none");
    $(".ui_general_teamside.r1").css("display", "none");
    $(".ui_general_teamside.r2").css("display", "none");
    $(".ui_general_teamside.r3").css("display", "none");
    $(".ui_general_teamside.r4").css("display", "none");
    $(".ui_general_teamside.r5").css("display", "none");
    $(".ui_general_teamside.r6").css("display", "none");
    $(".ui_winner_player01").css("display", "none");
    $(".ui_winner_player02").css("display",
        "none");
    $(".ui_winner_player03").css("display", "none");
    $(".ui_winner_player04").css("display", "none");
    $(".ui_winner_player05").css("display", "none");
    $(".ui_winner_player06").css("display", "none")
};
GuiWinner.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_back":
            GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU);
            break;
        case "btn_ok":
            GuiManager.instance.gotoScreen(GuiManager.SC_TEAM_STANDING)
    }
};
GuiWinner.prototype.onPressSpaceBar = function() {
    GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU);
    GuiWinner.superClass_.onPressSpaceBar.call(this)
};
GuiWinner.prototype.onEndTransition = function(a) {
    GuiWinner.superClass_.onEndTransition.call(this, a);
    a.params && Global.app.guiManager.gotoScreen(a.params.screen)
};
GuiWinner.prototype.update = function(a) {
    GuiWinner.superClass_.update.call(this, a)
};

function GuiPopupHelpMinigame(a, b, c) {
    SScreen.call(this, a, b, c);
    this.name = "pause"
}
goog.inherits(GuiPopupHelpMinigame, SScreen);
GuiPopupHelpMinigame.prototype.setGuiHTML = function() {
    this.css = " .ui_helpminigame_popup_support {  position: absolute;  top: 64px;  left: 73px;  width: 596px;  height: 374px;  background: url(media/images/ui_images/popups/gui_popups_help_minigame_base.png) no-repeat right top; } .ui_helpminigame_popup_title {  position: absolute;  left: 102px;  top: 113px;  width: 545px;  height: 75px;  z-index: 2;  color: #235c84;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 28px;  display: table-cell;  text-align: center;  font-smooth: always; } .ui_helpminigame_popup_image01 {  position: absolute;  top: 170px;  left: 134px;  width: 193px;  height: 219px;  background: url(media/images/ui_images/popups/gui_popups_help_minigame01.png) no-repeat right top; } .ui_helpminigame_popup_image02 {  position: absolute;  top: 193px;  left: 110px;  width: 233px;  height: 183px;  background: url(media/images/ui_images/popups/gui_popups_help_minigame02.png) no-repeat right top; } .ui_helpminigame_popup_image03 {  position: absolute;  top: 188px;  left: 146px;  width: 165px;  height: 187px;  background: url(media/images/ui_images/popups/gui_popups_help_minigame03.png) no-repeat right top; } .ui_helpminigame_popup_info {  position: absolute;  width: 225px;  height: 164px;  color: #000000;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 19px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always;  left: 385px;  top: 208px; } .ui_helpminigame_popup_image03info {  position: absolute;  width: 227px;  height: 47px;  color: #056db6;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 20px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 101px;  top: 353px;  padding-left: 25px }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_general_popup_bg'></div>  <div class='ui_helpminigame_popup_title'>" + Application.strings.STR_POPUP_MSN + "</div>    <div class='ui_helpminigame_popup_support'></div>    <div class='ui_helpminigame_popup_image01'></div>  <div class='ui_helpminigame_popup_image02'></div>  <div class='ui_helpminigame_popup_image03'></div>  <div class='ui_helpminigame_popup_image03info'>X3<br>EXTRA LIFE!</div>  <div class='ui_helpminigame_popup_info'>srt_info</div>  <div class='ui_general_button_ok b1' id='btn_ok'></div> </div>";
    GuiPopupHelpMinigame.superClass_.setGuiHTML.call(this)
};
GuiPopupHelpMinigame.prototype.init = function() {
    GuiPopupHelpMinigame.superClass_.init.call(this);
    this.addClickListener("btn_ok");
    $(".ui_helpminigame_popup_image01").css("display", "none");
    $(".ui_helpminigame_popup_image02").css("display", "none");
    $(".ui_helpminigame_popup_image03").css("display", "none");
    $(".ui_helpminigame_popup_image03info").css("display", "none");
    switch (GuiPopupHelpMinigame.minigame_select) {
        case GuiPopupHelpMinigame.MINIGAME_1:
            $(".ui_helpminigame_popup_image01").css("display", "");
            $(".ui_helpminigame_popup_title").html(Application.strings.STR_MINIGAME_SODA);
            $(".ui_helpminigame_popup_info").html(Application.strings.STR_MINIGAME_1_INFO_1);
            break;
        case GuiPopupHelpMinigame.MINIGAME_2:
            $(".ui_helpminigame_popup_image02").css("display", "");
            $(".ui_helpminigame_popup_title").html(Application.strings.STR_MINIGAME_WAVE);
            $(".ui_helpminigame_popup_info").html(Application.strings.STR_MINIGAME_2_INFO_1);
            break;
        case GuiPopupHelpMinigame.MINIGAME_3:
            $(".ui_helpminigame_popup_image03").css("display", ""), $(".ui_helpminigame_popup_image03info").css("display", ""), $(".ui_helpminigame_popup_title").html(Application.strings.STR_MINIGAME_RUNNER),
            $(".ui_helpminigame_popup_info").html(Application.strings.STR_MINIGAME_3_INFO_1), $(".ui_helpminigame_popup_image03info").html(Application.strings.STR_MINIGAME_3_INFO_2)
    }
};
GuiPopupHelpMinigame.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_ok":
            this.screenParent.dropPopup(), Global.game.setPause && Global.game.setPause(!1)
    }
};
GuiPopupHelpMinigame.prototype.onEndTransition = function(a) {
    GuiPopupHelpMinigame.superClass_.onEndTransition.call(this, a);
    a.params && Global.app.guiManager.gotoScreen(a.params.screen)
};
GuiPopupHelpMinigame.prototype.update = function(a) {
    GuiPopupHelpMinigame.superClass_.update.call(this, a)
};
GuiPopupHelpMinigame.prototype.onMouseUp = function(a) {
    GuiPopupHelpMinigame.superClass_.onMouseUp.call(this, a)
};
GuiPopupHelpMinigame.prototype.onPressSpaceBar = function() {
    GuiPopupHelpMinigame.superClass_.onPressSpaceBar.call(this);
    GuiManager.instance.gotoScreen(GuiManager.SC_GAME)
};
GuiPopupHelpMinigame.minigame_select = -1;
GuiPopupHelpMinigame.MINIGAME_1 = 1;
GuiPopupHelpMinigame.MINIGAME_2 = 2;
GuiPopupHelpMinigame.MINIGAME_3 = 3;

function GuiDailyMatchChampionship(a, b, c) {
    Global.game_mode === Global.mode_tournament && this.selectEnemyTeam();
    SScreen.call(this, a, b, c);
    GuiDailyMatchChampionship.instance = this;
    this.exhibitionMode = !1;
    if (!0 == Global.isTeamPlayerLocal) switch (Global.selectedTeam) {
        case Global.TEAM_MICKEY:
            Global.selectedVenue = Global.VENUE_ITALY;
            break;
        case Global.TEAM_MINNIE:
            Global.selectedVenue = Global.VENUE_IDAHO;
            break;
        case Global.TEAM_DONALD:
            Global.selectedVenue = Global.VENUE_BEIJING;
            break;
        case Global.TEAM_DAISY:
            Global.selectedVenue =
                Global.VENUE_PARIS;
            break;
        case Global.TEAM_GOOFY:
            Global.selectedVenue = Global.VENUE_TOKYO;
            break;
        case Global.TEAM_PLUTO:
            Global.selectedVenue = Global.VENUE_NEW_YORK
    } else switch (Global.enemyTeam) {
        case Global.TEAM_MICKEY:
            Global.selectedVenue = Global.VENUE_ITALY;
            break;
        case Global.TEAM_MINNIE:
            Global.selectedVenue = Global.VENUE_IDAHO;
            break;
        case Global.TEAM_DONALD:
            Global.selectedVenue = Global.VENUE_BEIJING;
            break;
        case Global.TEAM_DAISY:
            Global.selectedVenue = Global.VENUE_PARIS;
            break;
        case Global.TEAM_GOOFY:
            Global.selectedVenue =
                Global.VENUE_TOKYO;
            break;
        case Global.TEAM_PLUTO:
            Global.selectedVenue = Global.VENUE_NEW_YORK
    }
    Global.championship_stage == Global.CHAMPIONSHIP_FINAL && (Global.selectedVenue = Global.VENUE_NONE)
}
goog.inherits(GuiDailyMatchChampionship, SScreen);
GuiDailyMatchChampionship.prototype.setGuiHTML = function() {
    this.css = " .ui_dailymatch_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_dailymatch_background.jpg); } .ui_dailymatch_support {  position: absolute;  width: 620px;  height: 90px;  top: 11px;  left: 56px;  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_support.png); } .ui_dailymatch_confetti01 {  position: absolute;  width: 114px;  height: 155px;  top: 9px;  left: 0px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti01.png); } .ui_dailymatch_confetti02 {  position: absolute;  width: 83px;  height: 165px;  top: 9px;  left: 667px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti02.png); } .ui_dailymatch_pinleft {  position: absolute;  width: 127px;  height: 127px;  background: url('media/images/ui_images/screens/gui_screens_dailymatch_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 161px;  left: 141px; } .ui_dailymatch_pinleft.s1 {  background-position: 0px 0px; } .ui_dailymatch_pinleft.s2 {  background-position: -127px 0px; } .ui_dailymatch_pinleft.s3 {  background-position: -254px 0px; } .ui_dailymatch_pinleft.s5 {  background-position: -381px 0px; } .ui_dailymatch_pinleft.s4 {  background-position: -508px 0px; } .ui_dailymatch_pinleft.s6 {  background-position: -635px 0px; } .ui_dailymatch_pinright {  position: absolute;  width: 127px;  height: 127px;  background: url('media/images/ui_images/screens/gui_screens_dailymatch_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 162px;  left: 486px; } .ui_dailymatch_pinright.s1 {  background-position: 0px 0px; } .ui_dailymatch_pinright.s2 {  background-position: -127px 0px; } .ui_dailymatch_pinright.s3 {  background-position: -254px 0px; } .ui_dailymatch_pinright.s5 {  background-position: -381px 0px; } .ui_dailymatch_pinright.s4 {  background-position: -508px 0px; } .ui_dailymatch_pinright.s6 {  background-position: -635px 0px; } .ui_dailymatch_player01 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  left: 0px;  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan01.png); } .ui_dailymatch_player02 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  left: 0px;  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan02.png); } .ui_dailymatch_player03 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  left: 0px;  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan03.png); } .ui_dailymatch_player04 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  left: 0px;  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan04.png); } .ui_dailymatch_player05 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  left: 0px;  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan05.png); } .ui_dailymatch_player06 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  left: 0px;  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan06.png); } .ui_dailymatch_enemy01 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  right: 0px;  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character01.png); } .ui_dailymatch_enemy02 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  right: 0px;  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character02.png); } .ui_dailymatch_enemy03 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  right: 0px;  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character03.png); } .ui_dailymatch_enemy04 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  right: 0px;  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character04.png); } .ui_dailymatch_enemy05 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  right: 0px;  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character05.png); } .ui_dailymatch_enemy06 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  right: 0px;  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character06.png); } .ui_dailymatch_button_play {  position: absolute;  top: 194px;  left: 639px;  width: 110px;  height: 110px;  background: url(media/images/ui_images/buttons/gui_buttons_icons01.png) no-repeat right top;  cursor: pointer; } .ui_dailymatch_button_play.b1 {  background-position: -660px 0px; } .ui_dailymatch_button_play.b1:hover {  background-position: -770px 0px; } .ui_dailymatch_button_text {  background: url('media/images/ui_images/buttons/gui_buttons_text02.png') no-repeat scroll right top rgba(0, 0, 0, 0);  color: #ffffff;  cursor: pointer;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 14px;  padding-top: 27px;  position: absolute;  text-align: center;  top: 399px;  width: 310px;  height: 80px;  left: 226px; } .ui_dailymatch_button_text.b1 {  background-position: 0px 0px; } .ui_dailymatch_button_text.b1:hover {  background-position: -310px 0px;  font-size: 16px; } .ui_dailymatch_text {  position: absolute;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 18px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  top: 296px;  width: 221px;  height: 44px; } .ui_dailymatch_text.t1 {  left: 97px; } .ui_dailymatch_text.t2 {  left: 441px; } .ui_dailymatch_versus {  position: absolute;  left: 0px;  top: 205px;  width: 749px;  height: 46px;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 50px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_dailymatch_versus.t1 {  left: 0px;  top: 209px;  color: #a82b00; }  .ui_dailymatch_versus.t2 {  left: 0px;  top: 218px;  color: #1e362f ; } .ui_dailymatch_versus.t2 {  left: 0px;  top: 211px; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_dailymatch_bg'>    <div class='ui_dailymatch_support'></div>  <div class='ui_general_dailymatch_title'>DAILY MATCH</div>  <div class='ui_general_dailymatch_date'>DAY 00</div>  <div class='ui_dailymatch_text t1'>team01</div>  <div class='ui_dailymatch_text t2'>team02</div>  <div class='ui_dailymatch_button_text b1' id='btn_teamstanding'>TEAM STANDING</div>   <div class='ui_general_teamside l1' id='img_bg_left01'></div>  <div class='ui_general_teamside l2' id='img_bg_left02'></div>  <div class='ui_general_teamside l3' id='img_bg_left03'></div>  <div class='ui_general_teamside l4' id='img_bg_left04'></div>  <div class='ui_general_teamside l5' id='img_bg_left05'></div>  <div class='ui_general_teamside l6' id='img_bg_left06'></div>  <div class='ui_general_teamside r1' id='img_bg_right01'></div>  <div class='ui_general_teamside r2' id='img_bg_right02'></div>  <div class='ui_general_teamside r3' id='img_bg_right03'></div>  <div class='ui_general_teamside r4' id='img_bg_right04'></div>  <div class='ui_general_teamside r5' id='img_bg_right05'></div>  <div class='ui_general_teamside r6' id='img_bg_right06'></div>  <div class='ui_dailymatch_pinleft s1' id='img_pinl01'></div>  <div class='ui_dailymatch_pinleft s2' id='img_pinl02'></div>  <div class='ui_dailymatch_pinleft s3' id='img_pinl03'></div>  <div class='ui_dailymatch_pinleft s4' id='img_pinl04'></div>  <div class='ui_dailymatch_pinleft s5' id='img_pinl05'></div>  <div class='ui_dailymatch_pinleft s6' id='img_pinl06'></div>  <div class='ui_dailymatch_pinright s1' id='img_pinr01'></div>  <div class='ui_dailymatch_pinright s2' id='img_pinr02'></div>  <div class='ui_dailymatch_pinright s3' id='img_pinr03'></div>  <div class='ui_dailymatch_pinright s4' id='img_pinr04'></div>  <div class='ui_dailymatch_pinright s5' id='img_pinr05'></div>  <div class='ui_dailymatch_pinright s6' id='img_pinr06'></div>  <div class='ui_dailymatch_versus t3'>VS</div>  <div class='ui_dailymatch_versus t2'>VS</div>  <div class='ui_dailymatch_versus t1'>VS</div>  <div class='ui_general_button_back b1' id='btn_back'></div>  <div class='ui_dailymatch_button_play b1' id='btn_play'></div>    <div class='ui_dailymatch_confetti01'></div>  <div class='ui_dailymatch_confetti02'></div>  <div class='ui_dailymatch_player01' id='img_player1'></div>  <div class='ui_dailymatch_player02' id='img_player2'></div>  <div class='ui_dailymatch_player03' id='img_player3'></div>  <div class='ui_dailymatch_player04' id='img_player4'></div>  <div class='ui_dailymatch_player05' id='img_player5'></div>  <div class='ui_dailymatch_player06' id='img_player6'></div>  <div class='ui_dailymatch_enemy01' id='img_enemy1'></div>  <div class='ui_dailymatch_enemy02' id='img_enemy2'></div>  <div class='ui_dailymatch_enemy03' id='img_enemy3'></div>  <div class='ui_dailymatch_enemy04' id='img_enemy4'></div>  <div class='ui_dailymatch_enemy05' id='img_enemy5'></div>  <div class='ui_dailymatch_enemy06' id='img_enemy6'></div>   </div> </div>";
    GuiDailyMatchChampionship.superClass_.setGuiHTML.call(this)
};
GuiDailyMatchChampionship.prototype.init = function() {
    GuiDailyMatchChampionship.superClass_.init.call(this);
    $(".ui_general_dailymatch_title").html(Application.strings.STR_MATCH);
    $(".ui_general_dailymatch_date").html(Application.strings.STR_MATCH_DAY);
    $(".ui_dailymatch_versus").html(Application.strings.STR_MATCH_VS);
    Application.instance.onOrientationchange(null);
    $(".ui_general_teamside").css("display", "none");
    $("#img_bg_left0" + Global.selectedTeam).css("display", "");
    $("#img_bg_right0" + Global.selectedTeam).css("display",
        "");
    $(".ui_dailymatch_pinleft").css("display", "none");
    $("#img_pinl0" + Global.selectedTeam).css("display", "");
    $(".ui_dailymatch_pinright").css("display", "none");
    $("#img_pinr0" + Global.enemyTeam).css("display", "");
    this.addClickListener("btn_back");
    this.addClickListener("btn_play");
    this.addClickListener("btn_teamstanding");
    $("#btn_teamstanding").html(Application.strings.STR_TEAM_STANDING_BUTTON_TITLE);
    $("#btn_teamstanding").css("display", "block");
    $(".ui_dailymatch_player01").css("display", "none");
    $(".ui_dailymatch_player02").css("display",
        "none");
    $(".ui_dailymatch_player03").css("display", "none");
    $(".ui_dailymatch_player04").css("display", "none");
    $(".ui_dailymatch_player05").css("display", "none");
    $(".ui_dailymatch_player06").css("display", "none");
    $(".ui_dailymatch_enemy01").css("display", "none");
    $(".ui_dailymatch_enemy02").css("display", "none");
    $(".ui_dailymatch_enemy03").css("display", "none");
    $(".ui_dailymatch_enemy04").css("display", "none");
    $(".ui_dailymatch_enemy05").css("display", "none");
    $(".ui_dailymatch_enemy06").css("display",
        "none");
    $(".ui_dailymatch_player0" + Global.selectedTeam).css("display", "");
    $(".ui_dailymatch_enemy0" + Global.enemyTeam).css("display", "");
    var a = "";
    if ("number" === typeof Global.selectedTeam && Global.selectedTeam > Global.TEAM_NONE && Global.selectedTeam <= Global.TEAM_PLUTO) switch (Global.selectedTeam) {
        case Global.TEAM_MICKEY:
            a = Application.strings.STR_SELECTED_TEAM_MICKEY;
            break;
        case Global.TEAM_MINNIE:
            a = Application.strings.STR_SELECTED_TEAM_MINNIE;
            break;
        case Global.TEAM_DONALD:
            a = Application.strings.STR_SELECTED_TEAM_DONALD;
            break;
        case Global.TEAM_DAISY:
            a = Application.strings.STR_SELECTED_TEAM_DAISY;
            break;
        case Global.TEAM_GOOFY:
            a = Application.strings.STR_SELECTED_TEAM_GOOFY;
            break;
        case Global.TEAM_PLUTO:
            a = Application.strings.STR_SELECTED_TEAM_PLUTO
    }
    $(".ui_dailymatch_text.t1").html("" + a);
    a = "";
    if ("number" === typeof Global.enemyTeam && Global.enemyTeam > Global.TEAM_NONE && Global.enemyTeam <= Global.TEAM_PLUTO) switch (Global.enemyTeam) {
        case Global.TEAM_MICKEY:
            a = Application.strings.STR_SELECTED_TEAM_MICKEY;
            break;
        case Global.TEAM_MINNIE:
            a =
                Application.strings.STR_SELECTED_TEAM_MINNIE;
            break;
        case Global.TEAM_DONALD:
            a = Application.strings.STR_SELECTED_TEAM_DONALD;
            break;
        case Global.TEAM_DAISY:
            a = Application.strings.STR_SELECTED_TEAM_DAISY;
            break;
        case Global.TEAM_GOOFY:
            a = Application.strings.STR_SELECTED_TEAM_GOOFY;
            break;
        case Global.TEAM_PLUTO:
            a = Application.strings.STR_SELECTED_TEAM_PLUTO
    }
    $(".ui_dailymatch_text.t2").html("" + a)
};
GuiDailyMatchChampionship.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_back":
            GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU);
            break;
        case "btn_teamstanding":
            GuiTeamStanding.prePage = GuiManager.SC_DAILY_MATCH;
            GuiManager.instance.gotoScreen(GuiManager.SC_TEAM_STANDING);
            break;
        case "btn_play":
            GuiManager.instance.gotoScreen(GuiManager.SC_HELP)
    }
};
GuiDailyMatchChampionship.prototype.onPressSpaceBar = function() {
    GuiDailyMatchChampionship.superClass_.onPressSpaceBar.call(this)
};
GuiDailyMatchChampionship.prototype.selectEnemyTeam = function() {
    for (var a = 0; a < Global.matchups.length; ++a)
        for (var b = 0; b < Global.matchups[a].length; ++b)
            if (Global.matchups[a][b] == Global.selectedTeam) switch (b) {
                case 0:
                    Global.enemyTeam = parseInt(Global.matchups[a][1], 10);
                    break;
                case 1:
                    Global.enemyTeam = parseInt(Global.matchups[a][0], 10)
            }
};

function GuiSemifinalChampionship(a, b) {
    Global.game_mode === Global.mode_tournament && this.selectEnemyTeam();
    SScreen.call(this, a, b);
    !0 == Global.data.showMessageSemifinal && (GuiNotification.currentMode = GuiNotification.MODE_SEMIFINAL_POS, this.addPopup(GuiNotification, 0, 0), Global.data.onShowMessageSemifinal());
    if (!0 == Global.isTeamPlayerLocal) switch (Global.selectedTeam) {
        case Global.TEAM_MICKEY:
            Global.selectedVenue = Global.VENUE_ITALY;
            break;
        case Global.TEAM_MINNIE:
            Global.selectedVenue = Global.VENUE_IDAHO;
            break;
        case Global.TEAM_DONALD:
            Global.selectedVenue = Global.VENUE_BEIJING;
            break;
        case Global.TEAM_DAISY:
            Global.selectedVenue = Global.VENUE_PARIS;
            break;
        case Global.TEAM_GOOFY:
            Global.selectedVenue = Global.VENUE_TOKYO;
            break;
        case Global.TEAM_PLUTO:
            Global.selectedVenue = Global.VENUE_NEW_YORK
    } else switch (Global.enemyTeam) {
        case Global.TEAM_MICKEY:
            Global.selectedVenue = Global.VENUE_ITALY;
            break;
        case Global.TEAM_MINNIE:
            Global.selectedVenue = Global.VENUE_IDAHO;
            break;
        case Global.TEAM_DONALD:
            Global.selectedVenue = Global.VENUE_BEIJING;
            break;
        case Global.TEAM_DAISY:
            Global.selectedVenue = Global.VENUE_PARIS;
            break;
        case Global.TEAM_GOOFY:
            Global.selectedVenue = Global.VENUE_TOKYO;
            break;
        case Global.TEAM_PLUTO:
            Global.selectedVenue = Global.VENUE_NEW_YORK
    }
}
goog.inherits(GuiSemifinalChampionship, SScreen);
GuiSemifinalChampionship.prototype.setGuiHTML = function() {
    this.css = " .ui_dailymatch_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_dailymatch_semifinal_background.jpg); } .ui_dailymatch_confetti01 {  position: absolute;  width: 114px;  height: 155px;  top: 32px;  left: 0px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti01.png); } .ui_dailymatch_confetti02 {  position: absolute;  width: 83px;  height: 165px;  top: 32px;  left: 667px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti02.png); } .ui_dailymatch_pin1 {  position: absolute;  width: 59px;  height: 59px;  background: url('media/images/ui_images/screens/gui_screens_dailymatch_semifinal_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 130px;  left: 136px; } .ui_dailymatch_pin2 {  position: absolute;  width: 59px;  height: 59px;  background: url('media/images/ui_images/screens/gui_screens_dailymatch_semifinal_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 302px;  left: 136px; } .ui_dailymatch_pin5 {  position: absolute;  width: 59px;  height: 59px;  background: url('media/images/ui_images/screens/gui_screens_dailymatch_semifinal_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 130px;  left: 560px; } .ui_dailymatch_pin6 {  position: absolute;  width: 59px;  height: 59px;  background: url('media/images/ui_images/screens/gui_screens_dailymatch_semifinal_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 302px;  left: 560px; } .ui_dailymatch_button_play {  position: absolute;  top: 194px;  left: 639px;  width: 110px;  height: 110px;  background: url(media/images/ui_images/buttons/gui_buttons_icons01.png) no-repeat right top;  cursor: pointer; } .ui_dailymatch_button_play.b1 {  background-position: -660px 0px; } .ui_dailymatch_button_play.b1:hover {  background-position: -770px 0px; } .ui_dailymatch_button_text {  background: url('media/images/ui_images/buttons/gui_buttons_text02.png') no-repeat scroll right top rgba(0, 0, 0, 0);  color: #ffffff;  cursor: pointer;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 14px;  padding-top: 27px;  position: absolute;  text-align: center;  top: 399px;  width: 310px;  height: 80px;  left: 226px; } .ui_dailymatch_button_text.b1 {  background-position: 0px 0px; } .ui_dailymatch_button_text.b1:hover {  background-position: -310px 0px;  font-size: 16px; } .ui_dailymatch_text {  position: absolute;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 13px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  width: 103px;  height: 36px; } .ui_dailymatch_text.t1 {  top: 195px;  left: 114px; } .ui_dailymatch_text.t2 {  top: 367px;  left: 114px; } .ui_dailymatch_text.t5 {  top: 195px;  left: 538px; } .ui_dailymatch_text.t6 {  top: 367px;  left: 538px; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_dailymatch_bg'>  <div class='ui_dailymatch_text t1'>team 01</div>  <div class='ui_dailymatch_text t2'>team 02</div>  <div class='ui_dailymatch_text t5'>team 05</div>  <div class='ui_dailymatch_text t6'>team 06</div>  <div class='ui_general_dailymatch_title'>FINAL</div>  <div class='ui_general_dailymatch_date'>DAY 00</div>  <div class='ui_dailymatch_button_text b1' id='btn_teamstanding'>TEAM STANDING</div>   <div class='ui_general_teamside l1' id='img_bg_left01'></div>  <div class='ui_general_teamside l2' id='img_bg_left02'></div>  <div class='ui_general_teamside l3' id='img_bg_left03'></div>  <div class='ui_general_teamside l4' id='img_bg_left04'></div>  <div class='ui_general_teamside l5' id='img_bg_left05'></div>  <div class='ui_general_teamside l6' id='img_bg_left06'></div>  <div class='ui_general_teamside r1' id='img_bg_right01'></div>  <div class='ui_general_teamside r2' id='img_bg_right02'></div>  <div class='ui_general_teamside r3' id='img_bg_right03'></div>  <div class='ui_general_teamside r4' id='img_bg_right04'></div>  <div class='ui_general_teamside r5' id='img_bg_right05'></div>  <div class='ui_general_teamside r6' id='img_bg_right06'></div>  <div class='ui_dailymatch_pin1 p1' id='img_pin01'></div>  <div class='ui_dailymatch_pin2 p1' id='img_pin02'></div>  <div class='ui_dailymatch_pin5 p1' id='img_pin05'></div>  <div class='ui_dailymatch_pin6 p1' id='img_pin06'></div>  <div class='ui_general_button_back b1' id='btn_back'></div>  <div class='ui_dailymatch_button_play b1' id='btn_play'></div>    <div class='ui_dailymatch_confetti01'></div>  <div class='ui_dailymatch_confetti02'></div>   </div> </div>";
    GuiSemifinalChampionship.superClass_.setGuiHTML.call(this)
};
GuiSemifinalChampionship.prototype.init = function() {
    GuiSemifinalChampionship.superClass_.init.call(this);
    $(".ui_general_dailymatch_title").html(Application.strings.STR_SEMI_FINAL);
    $(".ui_general_dailymatch_date").html(Application.strings.STR_SEMI_FINAL_DAY);
    this.addClickListener("btn_back");
    this.addClickListener("btn_play");
    this.addClickListener("btn_teamstanding");
    $("#btn_teamstanding").html(Application.strings.STR_TEAM_STANDING_BUTTON_TITLE);
    $("#btn_teamstanding").css("display", "block");
    $(".ui_general_teamside").css("display",
        "none");
    $("#img_bg_left0" + Global.selectedTeam).css("display", "");
    $("#img_bg_right0" + Global.selectedTeam).css("display", "");
    var a = "";
    $(".ui_dailymatch_text.t1").html(this.getTeamName(Global.matchups[0][0]));
    a = (59 * (Global.matchups[0][0] - 1)).toString();
    $("#img_pin01").css("background-position", "-" + a + "px 0px");
    $(".ui_dailymatch_text.t2").html(this.getTeamName(Global.matchups[0][1]));
    a = (59 * (Global.matchups[0][1] - 1)).toString();
    $("#img_pin02").css("background-position", "-" + a + "px 0px");
    $(".ui_dailymatch_text.t5").html(this.getTeamName(Global.matchups[1][0]));
    a = (59 * (Global.matchups[1][0] - 1)).toString();
    $("#img_pin05").css("background-position", "-" + a + "px 0px");
    $(".ui_dailymatch_text.t6").html(this.getTeamName(Global.matchups[1][1]));
    a = (59 * (Global.matchups[1][1] - 1)).toString();
    $("#img_pin06").css("background-position", "-" + a + "px 0px")
};
GuiSemifinalChampionship.prototype.getTeamName = function(a) {
    var b = "";
    switch (a) {
        case Global.TEAM_MICKEY:
            b = Application.strings.STR_SELECTED_TEAM_MICKEY;
            break;
        case Global.TEAM_MINNIE:
            b = Application.strings.STR_SELECTED_TEAM_MINNIE;
            break;
        case Global.TEAM_DONALD:
            b = Application.strings.STR_SELECTED_TEAM_DONALD;
            break;
        case Global.TEAM_DAISY:
            b = Application.strings.STR_SELECTED_TEAM_DAISY;
            break;
        case Global.TEAM_GOOFY:
            b = Application.strings.STR_SELECTED_TEAM_GOOFY;
            break;
        case Global.TEAM_PLUTO:
            b = Application.strings.STR_SELECTED_TEAM_PLUTO
    }
    return b
};
GuiSemifinalChampionship.prototype.setTeamBadge = function(a, b) {};
GuiSemifinalChampionship.prototype.update = function(a) {
    GuiSemifinalChampionship.superClass_.update.call(this, a)
};
GuiSemifinalChampionship.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_back":
            GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU);
            break;
        case "btn_teamstanding":
            GuiTeamStanding.prePage = GuiManager.SC_DAILY_MATCH;
            GuiManager.instance.gotoScreen(GuiManager.SC_TEAM_STANDING);
            break;
        case "btn_play":
            GuiManager.instance.gotoScreen(GuiManager.SC_HELP)
    }
};
GuiSemifinalChampionship.prototype.selectEnemyTeam = function() {
    for (var a = 0; a < Global.matchups.length; ++a)
        for (var b = 0; b < Global.matchups[a].length; ++b)
            if (Global.matchups[a][b] == Global.selectedTeam) switch (b) {
                case 0:
                    Global.enemyTeam = parseInt(Global.matchups[a][1], 10);
                    break;
                case 1:
                    Global.enemyTeam = parseInt(Global.matchups[a][0], 10)
            }
};

function GuiFinalChampionship(a, b) {
    Global.game_mode === Global.mode_tournament && this.selectEnemyTeam();
    SScreen.call(this, a, b);
    !0 == Global.data.showMessageFinal && (GuiNotification.currentMode = GuiNotification.MODE_FINAL_POS, this.addPopup(GuiNotification, 0, 0), Global.data.onShowMessageFinal());
    Global.selectedVenue = Global.VENUE_NONE
}
goog.inherits(GuiFinalChampionship, SScreen);
GuiFinalChampionship.prototype.setGuiHTML = function() {
    this.css = " .ui_dailymatch_bg {  position: absolute;  top: 0px;  left: 0px;  width: 750px;  height: 500px;  background: url(media/images/ui_images/screens/gui_screens_dailymatch_semifinal_background.jpg); } .ui_dailymatch_confetti01 {  position: absolute;  width: 114px;  height: 155px;  top: 32px;  left: 0px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti01.png); } .ui_dailymatch_confetti02 {  position: absolute;  width: 83px;  height: 165px;  top: 32px;  left: 667px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti02.png); } .ui_dailymatch_loser1 {  position: absolute;  width: 112px;  height: 111px;  left: 110px;  background: url(media/images/ui_images/screens/gui_screens_dailymatch_semifinal_defeat.png);  background-position: 0px 0px; } .ui_dailymatch_loser1.t1 {  top: 123px; } .ui_dailymatch_loser1.t2 {  top: 296px; } .ui_dailymatch_loser2 {  position: absolute;  width: 112px;  height: 111px;  left: 536px;  background: url(media/images/ui_images/screens/gui_screens_dailymatch_semifinal_defeat.png);  background-position: -112px 0px; } .ui_dailymatch_loser2.t1 {  top: 123px; } .ui_dailymatch_loser2.t2 {  top: 296px; } .ui_dailymatch_pinleft {  position: absolute;  width: 74px;  height: 76px;  background: url('media/images/ui_images/screens/gui_screens_endlevel_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 215px;  left: 260px; } .ui_dailymatch_pinleft.p1 {  background-position: 0px 0px; } .ui_dailymatch_pinleft.p2 {  background-position: -74px 0px; } .ui_dailymatch_pinleft.p3 {  background-position: -148px 0px; } .ui_dailymatch_pinleft.p4 {  background-position: -222px 0px; } .ui_dailymatch_pinleft.p5 {  background-position: -296px 0px; } .ui_dailymatch_pinleft.p6 {  background-position: -370px 0px; } .ui_dailymatch_pinright {  position: absolute;  width: 74px;  height: 76px;  background: url('media/images/ui_images/screens/gui_screens_endlevel_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 215px;  left: 400px; } .ui_dailymatch_pinright.p1 {  background-position: 0px 0px; } .ui_dailymatch_pinright.p2 {  background-position: -74px 0px; } .ui_dailymatch_pinright.p3 {  background-position: -148px 0px; } .ui_dailymatch_pinright.p4 {  background-position: -222px 0px; } .ui_dailymatch_pinright.p5 {  background-position: -296px 0px; } .ui_dailymatch_pinright.p6 {  background-position: -370px 0px; } .ui_dailymatch_pin1 {  position: absolute;  width: 59px;  height: 59px;  background: url('media/images/ui_images/screens/gui_screens_dailymatch_semifinal_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 130px;  left: 136px;  opacity: 0.3; } .ui_dailymatch_pin2 {  position: absolute;  width: 59px;  height: 59px;  background: url('media/images/ui_images/screens/gui_screens_dailymatch_semifinal_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 302px;  left: 136px;  opacity: 0.3; } .ui_dailymatch_pin5 {  position: absolute;  width: 59px;  height: 59px;  background: url('media/images/ui_images/screens/gui_screens_dailymatch_semifinal_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 130px;  left: 560px;  opacity: 0.3; } .ui_dailymatch_pin6 {  position: absolute;  width: 59px;  height: 59px;  background: url('media/images/ui_images/screens/gui_screens_dailymatch_semifinal_pin.png'); o-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 302px;  left: 560px;  opacity: 0.3; } .ui_dailymatch_button_play {  position: absolute;  top: 194px;  left: 639px;  width: 110px;  height: 110px;  background: url(media/images/ui_images/buttons/gui_buttons_icons01.png) no-repeat right top;  cursor: pointer; } .ui_dailymatch_button_play.b1 {  background-position: -660px 0px; } .ui_dailymatch_button_play.b1:hover {  background-position: -770px 0px; } .ui_dailymatch_button_text {  background: url('media/images/ui_images/buttons/gui_buttons_text02.png') no-repeat scroll right top rgba(0, 0, 0, 0);  color: #ffffff;  cursor: pointer;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 14px;  padding-top: 27px;  position: absolute;  text-align: center;  top: 399px;  width: 310px;  height: 80px;  left: 226px; } .ui_dailymatch_button_text.b1 {  background-position: 0px 0px; } .ui_dailymatch_button_text.b1:hover {  background-position: -310px 0px;  font-size: 16px; } .ui_dailymatch_text {  position: absolute;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 13px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  width: 117px;  height: 42px; } .ui_dailymatch_text.t1 {  top: 195px;  left: 108px;  opacity: 0.3; } .ui_dailymatch_text.t2 {  top: 366px;  left: 107px;  opacity: 0.3; } .ui_dailymatch_text.t3 {  top: 297px;  left: 237px; } .ui_dailymatch_text.t4 {  top: 297px;  left: 375px; } .ui_dailymatch_text.t5 {  top: 195px;  left: 530px;  opacity: 0.3; } .ui_dailymatch_text.t6 {  top: 366px;  left: 530px;  opacity: 0.3; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_dailymatch_bg'>  <div class='ui_dailymatch_text t1'>team 01</div>  <div class='ui_dailymatch_text t2'>team 02</div>  <div class='ui_dailymatch_text t3'>team 03</div>  <div class='ui_dailymatch_text t4'>team 04</div>  <div class='ui_dailymatch_text t5'>team 05</div>  <div class='ui_dailymatch_text t6'>team 06</div>  <div class='ui_general_dailymatch_title'>SEMIFINAL</div>  <div class='ui_general_dailymatch_date'>DAY 00</div>  <div class='ui_dailymatch_button_text b1' id='btn_teamstanding'>TEAM STANDING</div>   <div class='ui_general_teamside l1' id='img_bg_left01'></div>  <div class='ui_general_teamside l2' id='img_bg_left02'></div>  <div class='ui_general_teamside l3' id='img_bg_left03'></div>  <div class='ui_general_teamside l4' id='img_bg_left04'></div>  <div class='ui_general_teamside l5' id='img_bg_left05'></div>  <div class='ui_general_teamside l6' id='img_bg_left06'></div>  <div class='ui_general_teamside r1' id='img_bg_right01'></div>  <div class='ui_general_teamside r2' id='img_bg_right02'></div>  <div class='ui_general_teamside r3' id='img_bg_right03'></div>  <div class='ui_general_teamside r4' id='img_bg_right04'></div>  <div class='ui_general_teamside r5' id='img_bg_right05'></div>  <div class='ui_general_teamside r6' id='img_bg_right06'></div>  <div class='ui_dailymatch_pin1 p1' id='img_pin01'></div>  <div class='ui_dailymatch_pin2 p1' id='img_pin02'></div>  <div class='ui_dailymatch_pinleft p1' id='img_pinl01'></div>  <div class='ui_dailymatch_pinleft p2' id='img_pinl02'></div>  <div class='ui_dailymatch_pinleft p3' id='img_pinl03'></div>  <div class='ui_dailymatch_pinleft p4' id='img_pinl04'></div>  <div class='ui_dailymatch_pinleft p5' id='img_pinl05'></div>  <div class='ui_dailymatch_pinleft p6' id='img_pinl06'></div>  <div class='ui_dailymatch_pinright p1' id='img_pinr01'></div>  <div class='ui_dailymatch_pinright p2' id='img_pinr02'></div>  <div class='ui_dailymatch_pinright p3' id='img_pinr03'></div>  <div class='ui_dailymatch_pinright p4' id='img_pinr04'></div>  <div class='ui_dailymatch_pinright p5' id='img_pinr05'></div>  <div class='ui_dailymatch_pinright p6' id='img_pinr06'></div>  <div class='ui_dailymatch_pin5 p1' id='img_pin05'></div>  <div class='ui_dailymatch_pin6 p1' id='img_pin06'></div>  <div class='ui_general_button_back b1' id='btn_back'></div>  <div class='ui_dailymatch_button_play b1' id='btn_play'></div>    <div class='ui_dailymatch_confetti01'></div>  <div class='ui_dailymatch_confetti02'></div>    <div class='ui_dailymatch_loser1 t1'></div>    <div class='ui_dailymatch_loser1 t2'></div>  <div class='ui_dailymatch_loser2 t1'></div>    <div class='ui_dailymatch_loser2 t2'></div>   </div> </div>";
    GuiFinalChampionship.superClass_.setGuiHTML.call(this)
};
GuiFinalChampionship.prototype.init = function() {
    GuiFinalChampionship.superClass_.init.call(this);
    var a = 0;
    $(".ui_general_dailymatch_title").html(Application.strings.STR_FINAL);
    $(".ui_general_dailymatch_date").html(Application.strings.STR_FINAL_DAY);
    this.addClickListener("btn_back");
    this.addClickListener("btn_play");
    this.addClickListener("btn_teamstanding");
    $("#btn_teamstanding").html(Application.strings.STR_TEAM_STANDING_BUTTON_TITLE);
    $("#btn_teamstanding").css("display", "block");
    $(".ui_general_teamside").css("display",
        "none");
    $("#img_bg_left0" + Global.selectedTeam).css("display", "");
    $("#img_bg_right0" + Global.selectedTeam).css("display", "");
    if (-1 === Global.data.semifinalMatchs.indexOf("0000")) {
        a = "";
        $(".ui_dailymatch_text.t1").html(this.getTeamName(parseInt(Global.data.semifinalMatchs.charAt(0), 10)));
        a = (59 * (parseInt(Global.data.semifinalMatchs.charAt(0), 10) - 1)).toString();
        $("#img_pin01").css("background-position", "-" + a + "px 0px");
        $(".ui_dailymatch_text.t2").html(this.getTeamName(parseInt(Global.data.semifinalMatchs.charAt(1),
            10)));
        a = (59 * (parseInt(Global.data.semifinalMatchs.charAt(1), 10) - 1)).toString();
        $("#img_pin02").css("background-position", "-" + a + "px 0px");
        $(".ui_dailymatch_text.t5").html(this.getTeamName(parseInt(Global.data.semifinalMatchs.charAt(2), 10)));
        a = (59 * (parseInt(Global.data.semifinalMatchs.charAt(2), 10) - 1)).toString();
        $("#img_pin05").css("background-position", "-" + a + "px 0px");
        $(".ui_dailymatch_text.t6").html(this.getTeamName(parseInt(Global.data.semifinalMatchs.charAt(3), 10)));
        a = (59 * (parseInt(Global.data.semifinalMatchs.charAt(3),
            10) - 1)).toString();
        $("#img_pin06").css("background-position", "-" + a + "px 0px");
        for (a = 0; a < Global.data.semifinalMatchs.length; ++a)
            if (parseInt(Global.data.semifinalMatchs.charAt(a), 10) == Global.matchups[0][0]) {
                this.eraseLose(a);
                break
            }
        for (a = 0; a < Global.data.semifinalMatchs.length; ++a)
            if (parseInt(Global.data.semifinalMatchs.charAt(a), 10) == Global.matchups[0][1]) {
                this.eraseLose(a);
                break
            }
    } else $(".ui_dailymatch_text.t1").css("display", "none"), $("#img_pin01").css("display", "none"), $(".ui_dailymatch_text.t2").css("display",
        "none"), $("#img_pin02").css("display", "none"), $(".ui_dailymatch_text.t5").css("display", "none"), $("#img_pin05").css("display", "none"), $(".ui_dailymatch_text.t6").css("display", "none"), $("#img_pin06").css("display", "none");
    $(".ui_dailymatch_pinleft").css("display", "none");
    $(".ui_dailymatch_pinleft.p" + Global.matchups[0][0]).css("display", "");
    $(".ui_dailymatch_text.t3").html(this.getTeamName(Global.matchups[0][0]));
    $(".ui_dailymatch_pinright").css("display", "none");
    $(".ui_dailymatch_pinright.p" + Global.matchups[0][1]).css("display",
        "");
    $(".ui_dailymatch_text.t4").html(this.getTeamName(Global.matchups[0][1]))
};
GuiFinalChampionship.prototype.eraseLose = function(a) {
    switch (a) {
        case 0:
            $(".ui_dailymatch_loser1.t1").css("display", "none");
            break;
        case 1:
            $(".ui_dailymatch_loser1.t2").css("display", "none");
            break;
        case 2:
            $(".ui_dailymatch_loser2.t1").css("display", "none");
            break;
        case 3:
            $(".ui_dailymatch_loser2.t2").css("display", "none")
    }
};
GuiFinalChampionship.prototype.getTeamName = function(a) {
    var b = "";
    switch (a) {
        case Global.TEAM_MICKEY:
            b = Application.strings.STR_SELECTED_TEAM_MICKEY;
            break;
        case Global.TEAM_MINNIE:
            b = Application.strings.STR_SELECTED_TEAM_MINNIE;
            break;
        case Global.TEAM_DONALD:
            b = Application.strings.STR_SELECTED_TEAM_DONALD;
            break;
        case Global.TEAM_DAISY:
            b = Application.strings.STR_SELECTED_TEAM_DAISY;
            break;
        case Global.TEAM_GOOFY:
            b = Application.strings.STR_SELECTED_TEAM_GOOFY;
            break;
        case Global.TEAM_PLUTO:
            b = Application.strings.STR_SELECTED_TEAM_PLUTO
    }
    return b
};
GuiFinalChampionship.prototype.update = function(a) {
    GuiFinalChampionship.superClass_.update.call(this, a)
};
GuiFinalChampionship.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_back":
            GuiManager.instance.gotoScreen(GuiManager.SC_MAIN_MENU);
            break;
        case "btn_teamstanding":
            GuiTeamStanding.prePage = GuiManager.SC_DAILY_MATCH;
            GuiManager.instance.gotoScreen(GuiManager.SC_TEAM_STANDING);
            break;
        case "btn_play":
            GuiManager.instance.gotoScreen(GuiManager.SC_HELP)
    }
};
GuiFinalChampionship.prototype.selectEnemyTeam = function() {
    for (var a = 0; a < Global.matchups.length; ++a)
        for (var b = 0; b < Global.matchups[a].length; ++b)
            if (Global.matchups[a][b] == Global.selectedTeam) switch (b) {
                case 0:
                    Global.enemyTeam = parseInt(Global.matchups[a][1], 10);
                    break;
                case 1:
                    Global.enemyTeam = parseInt(Global.matchups[a][0], 10)
            }
};

function GuiPopupMinigameReward(a, b, c) {
    SScreen.call(this, a, b, c);
    this.instructionsMsg = $(".ui_hud_tutorialtext");
    this.m_messageTime = -1;
    this.m_showingMessage = !1;
    this.targetCallback = this.onEndMessage = null;
    Global.app.stopAllSounds();
    Global.app.playSound("dko_mus_win")
}
goog.inherits(GuiPopupMinigameReward, SScreen);
GuiPopupMinigameReward.prototype.setGuiHTML = function() {
    this.css = " .ui_popupminigame_info1 {  position: absolute;  width: 167px;  height: 33px;  color: #000000;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 20px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 234px;  top: 215px; } .ui_popupminigame_info2 {  position: absolute;  width: 166px;  height: 56px;  color: #056db6;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 26px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 234px;  top: 245px; } .ui_popupminigame_confetti01 {  position: absolute;  width: 114px;  height: 155px;  top: 0px;  left: 0px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti01.png); } .ui_popupminigame_confetti02 {  position: absolute;  width: 83px;  height: 165px;  top: 0px;  left: 667px;  background: url(media/images/ui_images/screens/gui_screens_common_confetti02.png); } .ui_popupminigame_cross {  position: absolute;  top: 224px;  left: 412px;  width: 36px;  height: 36px;  background: url(media/images/ui_images/popups/gui_popups_minigame_plus.png) no-repeat right top; } .ui_popupminigame_image01 {  position: absolute;  top: 224px;  left: 500px;  width: 45px;  height: 46px;  background: url(media/images/ui_images/popups/gui_popups_minigame_powerup01.png) no-repeat right top; } .ui_popupminigame_image02 {  position: absolute;  top: 224px;  left: 540px;  width: 45px;  height: 49px;  background: url(media/images/ui_images/popups/gui_popups_minigame_powerup02.png) no-repeat right top; } .ui_popupminigame_image03 {  position: absolute;  top: 224px;  left: 461px;  width: 45px;  height: 49px;  background: url(media/images/ui_images/popups/gui_popups_minigame_powerup02.png) no-repeat right top; } .ui_popupminigame_image04 {  position: absolute;  top: 190px;  left: 500px;  width: 45px;  height: 49px;  background: url(media/images/ui_images/popups/gui_popups_minigame_powerup02.png) no-repeat right top; } .ui_popupminigame_title {  position: absolute;  left: 192px;  top: 112px;  width: 445px;  height: 66px;  z-index: 2;  color: #235c84;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 28px;  display: table-cell;  text-align: center;  font-smooth: always; }";
    this.html =
        " <div class='ui_general_container'>   <div class='ui_general_popup_bg'></div>  <div class='ui_general_popup_support'></div>  <div class='ui_general_popup_title'>" + Application.strings.STR_POPUP_MSN + "</div>    <div class='ui_general_button_ok b1' id='btn_ok'></div>     <div class='ui_popupminigame_info1'>srt_info</div>     <div class='ui_popupminigame_info2'>srt_info</div>  <div class='ui_popupminigame_cross'></div>  <div class='ui_popupminigame_image01'></div>  <div class='ui_popupminigame_image02'></div>     <div class='ui_popupminigame_image03'></div>  <div class='ui_popupminigame_image04'></div>  <div class='ui_popupminigame_confetti01'></div>  <div class='ui_popupminigame_confetti02'></div>";
    GuiPopupMinigameReward.superClass_.setGuiHTML.call(this)
};
GuiPopupMinigameReward.prototype.init = function() {
    GuiPopupMinigameReward.superClass_.init.call(this);
    this.addClickListener("btn_ok");
    $(".ui_popupminigame_image01").css("display", "none");
    $(".ui_popupminigame_image02").css("display", "none");
    $(".ui_popupminigame_image03").css("display", "none");
    1 == Global.boostOn && ($(".ui_popupminigame_image01").css("display", "block"), $(".ui_popupminigame_image02").css("display", "none"), $(".ui_popupminigame_image03").css("display", "none"), $(".ui_popupminigame_image04").css("display",
        "none"));
    1 == Global.mickeyEarned ? ($(".ui_popupminigame_image04").css("display", "block"), $(".ui_popupminigame_image04").css("top", "220px"), $(".ui_popupminigame_image02").css("display", "none"), $(".ui_popupminigame_image03").css("display", "none"), $(".ui_popupminigame_image01").css("display", "none")) : 2 == Global.mickeyEarned ? ($(".ui_popupminigame_image02").css("display", "block"), $(".ui_popupminigame_image03").css("display", "block"), $(".ui_popupminigame_image02").css("top", "220px"), $(".ui_popupminigame_image03").css("top",
        "220px"), $(".ui_popupminigame_image04").css("display", "none"), $(".ui_popupminigame_image01").css("display", "none")) : 3 == Global.mickeyEarned && ($(".ui_popupminigame_image02").css("display", "block"), $(".ui_popupminigame_image03").css("display", "block"), $(".ui_popupminigame_image04").css("display", "block"), $(".ui_popupminigame_image01").css("display", "none"));
    $(".ui_general_popup_title").html(Application.strings.STR_REWARD_TITLE);
    $(".ui_popupminigame_info1").html(Application.strings.STR_TIME);
    var a = Global.extraTime +
        Application.strings.STR_MINIGAME_TIMEFORMAT_DELIMITER + "00",
        a = 10 > Global.extraTime ? "0" + a : a;
    $(".ui_popupminigame_info2").html(a);
    a = 1E3 * Application.config.SoccerGeneral.halfTimeDuration;
    Global.extraTime *= 6E4;
    Global.extraTimeGame = Global.extraTime * a / GuiPopupMinigameReward.TIME_HALF
};
GuiPopupMinigameReward.prototype.update = function(a) {
    GuiPopupMinigameReward.superClass_.update.call(this, a)
};
GuiPopupMinigameReward.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_ok":
            this.screenParent.dropPopup()
    }
};
GuiPopupMinigameReward.TIME_HALF = 27E5;

function GuiNotification(a, b, c) {
    SScreen.call(this, a, b, c);
    this.screenParent.dropPopup()
}
goog.inherits(GuiNotification, SScreen);
GuiNotification.prototype.setGuiHTML = function() {
    this.css = " .ui_notification_info {  position: absolute;  width: 350px;  height: 155px;  color: #000000;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 19px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always;  left: 240px;  top: 146px; }";
    this.html = " <div class='ui_general_container'>   <div class='ui_general_popup_bg'></div>  <div class='ui_general_popup_character'></div>  <div class='ui_general_popup_support'></div>  <div class='ui_general_button_ok b1' id='btn_ok2'></div>     <div class='ui_notification_info'>srt_info</div> </div>";
    GuiNotification.superClass_.setGuiHTML.call(this)
};
GuiNotification.prototype.init = function() {
    GuiNotification.superClass_.init.call(this);
    this.addClickListener("btn_ok2");
    $(".ui_notification_info").css("pointer-events", "none");
    switch (GuiNotification.currentMode) {
        case GuiNotification.MODE_CHAMPIONSHIP:
            $(".ui_notification_info").html(Application.strings.INFO_CHAMPIONSHIP);
            break;
        case GuiNotification.MODE_SEMIFINAL_POS:
            $(".ui_notification_info").html(Application.strings.INFO_SEMIFINAL_POS);
            break;
        case GuiNotification.MODE_SEMIFINAL_NEG:
            $(".ui_notification_info").html(Application.strings.INFO_SEMIFINAL_NEG);
            break;
        case GuiNotification.MODE_FINAL_POS:
            $(".ui_notification_info").html(Application.strings.INFO_FINAL_POS);
            break;
        case GuiNotification.MODE_FINAL_NEG:
            $(".ui_notification_info").html(Application.strings.INFO_FINAL_NEG);
            break;
        case GuiNotification.MODE_SUBMIT:
            $(".ui_notification_info").html(Application.strings.STR_NOTIFICATION_SUBMIT);
            break;
        case GuiNotification.MODE_COMING_SOON:
            $(".ui_notification_info").html(Application.strings.STR_COMING_SOON);
            break;
        case GuiNotification.MODE_SERVER_ISSUES:
            $(".ui_notification_info").html(Application.strings.STR_SERVER_ISSUES)
    }
};
GuiNotification.prototype.onClick = function(a) {
    Global.app.playSound("dko_snd_ui_buttons");
    switch (a.id) {
        case "btn_ok2":
            this.screenParent.dropPopup()
    }
};
GuiNotification.MODE_CHAMPIONSHIP = 1;
GuiNotification.MODE_SEMIFINAL_POS = 2;
GuiNotification.MODE_SEMIFINAL_NEG = 3;
GuiNotification.MODE_FINAL_POS = 4;
GuiNotification.MODE_FINAL_NEG = 5;
GuiNotification.MODE_SUBMIT = 6;
GuiNotification.MODE_COMING_SOON = 7;
GuiNotification.MODE_SERVER_ISSUES = 8;
GuiNotification.currentMode = GuiNotification.MODE_CHAMPIONSHIP;

function ActorM1(a, b, c, d) {
    this.m_canvas = a;
    this.m_world = b;
    this.m_character = null;
    this.m_x = c;
    this.m_y = d;
    this.m_state = -1;
    this.m_clip = null;
    this.m_isAwaitingDelete = !1;
    this.m_bounds = new Rectangle;
    this.m_flipX = !1
}
ActorM1.prototype.free = function() {
    this.m_bounds = this.m_world = this.m_canvas = null;
    null !== this.m_character && (this.m_character.free(), this.m_character = null);
    this.m_clip = null
};
ActorM1.prototype.update = function(a) {
    this.m_clip.setX(this.m_x);
    this.m_clip.setY(this.m_y)
};
ActorM1.prototype.reset = function(a, b, c, d) {
    this.m_canvas = a;
    this.m_world = b;
    this.m_character = null;
    this.m_x = c;
    this.m_y = d;
    this.m_state = -1;
    this.m_clip = null;
    this.m_isAwaitingDelete = !1;
    this.m_bounds = new Rectangle
};
ActorM1.prototype.clip = function() {
    return this.m_clip
};
ActorM1.prototype.getBounds = function() {
    return null !== this.m_clip ? (this.m_bounds.x = this.m_x - this.m_clip.cx, this.m_bounds.y = this.m_y - this.m_clip.cy, this.m_bounds.w = this.m_clip.width, this.m_bounds.h = this.m_clip.height, this.m_bounds) : null
};
ActorM1.prototype.hitTestPoint = function(a, b) {
    var c = this.getBounds();
    return null != c ? c.intersectPoint(a, b) : !1
};
ActorM1.prototype.gotoState = function(a) {
    this.m_state != a && (this.m_state = a, this.m_character.gotoState(a), this.m_clip = this.m_character.actor().clip())
};
ActorM1.prototype.x = function() {
    return this.m_x
};
ActorM1.prototype.y = function() {
    return this.m_y
};
ActorM1.prototype.setX = function(a) {
    this.m_x = a
};
ActorM1.prototype.setY = function(a) {
    this.m_y = a
};
ActorM1.prototype.isAwaitingDelete = function() {
    return this.m_isAwaitingDelete
};
ActorM1.prototype.setAwaitingDelete = function(a) {
    this.m_isAwaitingDelete = a
};
ActorM1.prototype.flipX = function(a) {
    this.m_flipX = a
};

function SpectatorM1(a, b, c, d, e, f, g, h) {
    ActorM1.call(this, a, b, d, e);
    this.m_row = f;
    this.m_col = g;
    this.m_group = c;
    this.m_requestDuration = 0;
    this.m_requestedSoda = GameM1.SODA_GREEN;
    this.m_timeCounter = 0;
    b = Application.config.minigame1;
    this.m_greenRequestProbability = b[GameM1.BASE].greenRequestProbability;
    this.m_greenRequestDurationRatio = b[GameM1.BASE].greenRequestDurationRatio;
    this.m_pinkRequestDurationRatio = b[GameM1.BASE].pinkRequestDurationRatio;
    this.m_changeRequestProbability = b[GameM1.BASE].changeRequestProbability;
    this.m_maxChangeRequestTolerance = b[GameM1.BASE].maxPercentToChange;
    this.m_minChangeRequestTolerance = b[GameM1.BASE].minPercentToChange;
    this.m_character = null;
    this.initCharacter(d, e, a, h);
    this.m_currentPercent = 0;
    this.m_hasChangedrRequest = !1;
    this.m_percentThreshold = 0.5;
    this.m_showBounds = !1;
    this.m_boundsDisplay = new SNode;
    this.showActorBounds(!1);
    this.m_patienceMessage = new PatienceMessage(GuiGame.instance.canvasMessage, this, h.npcSkinID);
    this.m_gamefinished = !1
}
goog.inherits(SpectatorM1, ActorM1);
SpectatorM1.ST_STAND = 1;
SpectatorM1.ST_REQUEST = 2;
SpectatorM1.ST_GRAB = 3;
SpectatorM1.ST_ANGRY = 4;
SpectatorM1.ST_MAKING_WAVE = 5;
SpectatorM1.ST_GRAB2 = 6;
SpectatorM1.prototype.initCharacter = function(a, b, c, d) {
    var e = "mcEnemy1Stand",
        f = "mcEnemy1Defend",
        g = "mcEnemy1Die",
        h = "mcEnemy1Die",
        k = "mcEnemy1Dizzy",
        l = "mcPlayer1Win";
    "undefined" !== typeof d && (e = "mcNpc0" + d.npcSkinID + "Stand", f = "mcNpc0" + d.npcSkinID + "Ask", g = "mcNpc0" + d.npcSkinID + "DrinkGreen", h = "mcNpc0" + d.npcSkinID + "DrinkPink", k = "mcNpc0" + d.npcSkinID + "Angry", l = "mcNpc0" + d.npcSkinID + "Celebrate");
    this.m_character = new Character(a, b, c);
    this.m_character.addState(SpectatorM1.ST_STAND, e);
    this.m_character.addState(SpectatorM1.ST_REQUEST,
        f);
    this.m_character.addState(SpectatorM1.ST_GRAB, g);
    this.m_character.addState(SpectatorM1.ST_GRAB2, h);
    this.m_character.addState(SpectatorM1.ST_ANGRY, k);
    this.m_character.addState(SpectatorM1.ST_MAKING_WAVE, l);
    this.m_character.onEndAnimation = "onEndAnimation";
    this.m_character.worldActor = this;
    this.gotoState(SpectatorM1.ST_STAND)
};
SpectatorM1.prototype.free = function() {
    this.m_group = null;
    SpectatorM1.superClass_.free.call(this)
};
SpectatorM1.prototype.gotoState = function(a) {
    SpectatorM1.superClass_.gotoState.call(this, a);
    this.m_bounds = this.getBounds()
};
SpectatorM1.prototype.update = function(a) {
    this.m_character.update(a);
    this.m_patienceMessage.update(a);
    if (this.m_state == SpectatorM1.ST_REQUEST) {
        var b = this.m_world.sodaList();
        if (0 < b.length)
            for (var c = b.length - 1; 0 <= c; --c)
                if (this.hitTestPoint(b[c].x(), b[c].y())) {
                    this.m_requestedSoda === GameM1.instance.getSodaPicked() ? (b[c].onSpectatorCollision(), this.m_group.onFinishRequest(), this.m_requestedSoda === GameM1.SODA_GREEN ? this.gotoState(SpectatorM1.ST_GRAB) : this.m_requestedSoda === GameM1.SODA_PINK && this.gotoState(SpectatorM1.ST_GRAB2),
                        this.m_hasChangedrRequest = !1, GameM1.instance.setSodaCounter(GameM1.instance.getSodaCounter() + 1), HudM1.instance.setSodaCounter(GameM1.instance.getSodaCounter()), Global.app.playSound("dko_snd_power1")) : (this.m_timeCounter = 0, b[c].onSpectatorCollision(), this.m_group.onFinishRequest(), this.gotoState(SpectatorM1.ST_ANGRY), GameM1.instance.addLife(-1), this.m_hasChangedrRequest = !1, Global.app.playSound("dko_minigame_error"));
                    this.m_patienceMessage.stopRequest();
                    return
                }
        this.m_timeCounter += a;
        this.m_currentPercent =
            1 - this.m_timeCounter / this.m_requestDuration;
        this.setBarPercentage(1 - this.m_timeCounter / this.m_requestDuration);
        !1 === this.m_hasChangedrRequest && this.m_currentPercent < this.m_percentThreshold && Math.random() > this.m_changeRequestProbability && 2 < GameM1.instance.getRequestCounter() && (this.changeRequest(), this.m_patienceMessage.changeRequest());
        this.m_timeCounter >= this.m_requestDuration && (this.m_timeCounter = 0, this.m_group.onFinishRequest(), this.gotoState(SpectatorM1.ST_ANGRY), this.m_patienceMessage.stopRequest(),
            GameM1.instance.addLife(-1), this.m_hasChangedrRequest = !1)
    }
    SpectatorM1.superClass_.update.call(this, a)
};
SpectatorM1.prototype.getNextRequestedSoda = function() {
    var a = GameM1.instance.getRequestCounter();
    if (2 > a) {
        var b = GameM1.instance.getTutorialRequests()[a];
        "green" === b ? this.m_requestedSoda = GameM1.SODA_GREEN : "pink" === b && (this.m_requestedSoda = GameM1.SODA_PINK)
    } else this.m_requestedSoda = Math.random() > this.m_greenRequestProbability ? GameM1.SODA_PINK : GameM1.SODA_GREEN;
    GameM1.instance.setRequestCounter(a + 1)
};
SpectatorM1.prototype.startRequest = function(a) {
    if (this.m_state !== SpectatorM1.ST_REQUEST && this.m_state !== SpectatorM1.ST_GRAB) {
        this.m_percentThreshold = this.m_minChangeRequestTolerance + (this.m_maxChangeRequestTolerance - this.m_minChangeRequestTolerance) * Math.random();
        this.m_currentPercent = 1;
        this.getNextRequestedSoda();
        this.gotoState(SpectatorM1.ST_REQUEST);
        switch (this.m_requestedSoda) {
            case GameM1.SODA_GREEN:
                this.m_requestDuration = a * this.m_greenRequestDurationRatio;
                this.m_patienceMessage.startRequest(PatienceMessage.REQUEST_GREEN);
                break;
            case GameM1.SODA_PINK:
                this.m_requestDuration = a * this.m_pinkRequestDurationRatio, this.m_patienceMessage.startRequest(PatienceMessage.REQUEST_PINK)
        }
        this.m_timeCounter = 0;
        this.m_group.onStartRequest();
        this.setBarPercentage(1);
        Global.app.playSound("dko_minigame_request1");
        return !0
    }
    return !1
};
SpectatorM1.prototype.changeRequest = function() {
    this.m_hasChangedrRequest = !0;
    this.m_requestedSoda === GameM1.SODA_GREEN ? (this.m_requestedSoda = GameM1.SODA_PINK, this.setBarPercentage(this.m_currentPercent)) : this.m_requestedSoda === GameM1.SODA_PINK && (this.m_requestedSoda = GameM1.SODA_GREEN, this.setBarPercentage(this.m_currentPercent))
};
SpectatorM1.prototype.cancelRequest = function() {
    this.setBarPercentage(0);
    this.m_state == SpectatorM1.ST_REQUEST && (this.m_patienceMessage.stopRequest(), this.setBarPercentage(0), this.gotoState(SpectatorM1.ST_STAND))
};
SpectatorM1.prototype.onEndAnimation = function(a) {
    a === SpectatorM1.ST_MAKING_WAVE && !1 === this.m_gamefinished && this.gotoState(SpectatorM1.ST_STAND)
};
SpectatorM1.prototype.setBarPercentage = function(a) {
    this.m_patienceMessage.setPercent(a)
};
SpectatorM1.prototype.showActorBounds = function(a) {
    (this.m_showBounds = a) ? (null === this.m_boundsDisplay && (this.m_boundsDisplay = new SNode), this.m_canvas.addChild(this.m_boundsDisplay), this.m_boundsDisplay.addDrawListener(this, "onDrawBounds")) : null !== this.m_boundsDisplay && this.m_canvas.removeChild(this.m_boundsDisplay)
};
SpectatorM1.prototype.onDrawBounds = function(a) {
    !0 === this.m_showBounds && null !== this.m_bounds && "undefined" !== typeof this.m_bounds && SGraphics.drawRect(a, this.m_bounds)
};
SpectatorM1.prototype.onGameEnd = function(a) {
    this.m_gamefinished = !0;
    a ? this.gotoState(SpectatorM1.ST_MAKING_WAVE) : this.gotoState(SpectatorM1.ST_ANGRY)
};

function SodaM1(a, b, c, d, e, f, g) {
    ActorM1.call(this, a, b, c, d);
    this.m_sodaType = g;
    this.m_dirX = e.x;
    this.m_dirY = e.y;
    this.m_speed = f;
    this.m_character = new Character(c, d, a);
    a = "mcM1Soda";
    if ("undefined" !== typeof this.m_sodaType) switch (this.m_sodaType) {
        case GameM1.SODA_GREEN:
            a = "mcM1SodaGreen";
            break;
        case GameM1.SODA_PINK:
            a = "mcM1SodaPink"
    }
    this.m_character.addState(SodaM1.ST_STAND, a);
    this.gotoState(SodaM1.ST_STAND)
}
goog.inherits(SodaM1, ActorM1);
SodaM1.ST_STAND = 1;
SodaM1.prototype.free = function() {
    SodaM1.superClass_.free.call(this);
    this.m_direction = null
};
SodaM1.prototype.update = function(a) {
    this.m_x += this.m_dirX * this.m_speed * a;
    this.m_y += this.m_dirY * this.m_speed * a;
    this.m_world.checkWorldBoundaries(this.m_x, this.m_y) || this.m_isAwaitingDelete ? (this.m_character.update(a), SodaM1.superClass_.update.call(this, a)) : (this.m_isAwaitingDelete = !0, this.m_world.unregisterSoda(this), this.m_world.sodaPool().recycleSoda(this))
};
SodaM1.prototype.resetSoda = function(a, b, c, d, e, f, g) {
    this.reset(a, b, c, d);
    this.m_dirX = e.x;
    this.m_dirY = e.y;
    this.m_speed = f;
    this.m_character = new Character(c, d, a);
    a = "mcM1Soda";
    if ("undefined" !== typeof g) switch (g) {
        case GameM1.SODA_GREEN:
            a = "mcM1SodaGreen";
            break;
        case GameM1.SODA_PINK:
            a = "mcM1SodaPink"
    }
    this.m_character.addState(SodaM1.ST_STAND, a);
    this.gotoState(SodaM1.ST_STAND)
};
SodaM1.prototype.onSpectatorCollision = function() {
    this.m_isAwaitingDelete || (this.m_isAwaitingDelete = !0, this.m_world.unregisterSoda(this), this.m_world.sodaPool().recycleSoda(this))
};

function PatienceMessage(a, b, c) {
    this.m_x = b.m_x;
    this.m_y = b.m_y - b.m_clip.cy;
    this.m_y = 2 !== c ? this.m_y - 50 : this.m_y - 26;
    this.m_sodaBasePositionX = this.m_x + 0;
    this.m_sodaBasePositionY = this.m_y - 5;
    this.m_patienceBarPositionX = this.m_x;
    this.m_patienceBarPositionY = this.m_y + 5;
    this.m_canvas = a;
    this.m_state = 0;
    this.m_clipBase = Application.instance.getClip("mcM1PatienceBarContainer");
    this.m_clipBase.setX(this.m_x);
    this.m_clipBase.setY(this.m_y);
    this.m_canvas.addChild(this.m_clipBase.sprite);
    this.m_clipBase.setVisible(!1);
    this.m_sodaCharacter = new Character(this.m_sodaBasePositionX, this.m_sodaBasePositionY, this.m_canvas);
    this.m_sodaCharacter.addState(PatienceMessage.STATE_IDLE, "mcM1Soda");
    this.m_sodaCharacter.addState(PatienceMessage.STATE_REQUESTING_GREEN, "mcM1PatienceSodaGreen");
    this.m_sodaCharacter.addState(PatienceMessage.STATE_REQUESTING_PINK, "mcM1PatienceSodaPink");
    this.m_sodaCharacter.onEndAnimation = "onEndAnimationSoda";
    this.m_sodaCharacter.worldActor = this;
    this.m_sodaCharacter.gotoState(PatienceMessage.STATE_IDLE);
    this.m_patienceBarCharacter = new Character(this.m_patienceBarPositionX, this.m_patienceBarPositionY, this.m_canvas);
    this.m_patienceBarCharacter.addState(PatienceMessage.STATE_IDLE, "mcM1PatienceBarGreen");
    this.m_patienceBarCharacter.addState(PatienceMessage.STATE_REQUESTING_GREEN, "mcM1PatienceBarGreen");
    this.m_patienceBarCharacter.addState(PatienceMessage.STATE_REQUESTING_PINK, "mcM1PatienceBarPink");
    this.m_patienceBarCharacter.onEndAnimation = "onEndAnimationBar";
    this.m_patienceBarCharacter.worldActor =
        this;
    this.m_patienceBarCharacter.gotoState(PatienceMessage.STATE_IDLE);
    this.m_barPercent = 0;
    this.gotoState(PatienceMessage.STATE_IDLE)
}
PatienceMessage.STATE_IDLE = 1;
PatienceMessage.STATE_REQUESTING_GREEN = 2;
PatienceMessage.STATE_REQUESTING_PINK = 3;
PatienceMessage.REQUEST_GREEN = 11;
PatienceMessage.REQUEST_PINK = 12;
PatienceMessage.prototype.update = function(a) {
    this.m_clipBase.update(a);
    this.m_sodaCharacter.update(a);
    this.m_patienceBarCharacter.update(a)
};
PatienceMessage.prototype.gotoState = function(a) {
    if (this.m_state !== a)
        if (this.m_state = a, this.m_sodaCharacter.gotoState(this.m_state), this.m_patienceBarCharacter.gotoState(this.m_state), this.m_state === PatienceMessage.STATE_IDLE) this.m_clipBase.setVisible(!1), this.m_sodaCharacter.m_currentActor.clip().setVisible(!1), this.m_patienceBarCharacter.m_currentActor.clip().setVisible(!1);
        else if (this.m_state === PatienceMessage.STATE_REQUESTING_GREEN || this.m_state === PatienceMessage.STATE_REQUESTING_PINK) this.m_clipBase.setVisible(!0),
    this.setPercent(0), this.m_sodaCharacter.m_currentActor.clip().setVisible(!0), this.m_patienceBarCharacter.m_currentActor.clip().setVisible(!1)
};
PatienceMessage.prototype.startRequest = function(a) {
    a === PatienceMessage.REQUEST_GREEN ? this.gotoState(PatienceMessage.STATE_REQUESTING_GREEN) : a === PatienceMessage.REQUEST_PINK && this.gotoState(PatienceMessage.STATE_REQUESTING_PINK)
};
PatienceMessage.prototype.changeRequest = function() {
    this.m_state === PatienceMessage.STATE_REQUESTING_GREEN ? this.gotoState(PatienceMessage.STATE_REQUESTING_PINK) : this.m_state === PatienceMessage.STATE_REQUESTING_PINK && this.gotoState(PatienceMessage.STATE_REQUESTING_GREEN)
};
PatienceMessage.prototype.stopRequest = function() {
    this.gotoState(PatienceMessage.STATE_IDLE)
};
PatienceMessage.prototype.setPercent = function(a) {
    this.m_barPercent = a;
    if (this.m_state === PatienceMessage.STATE_REQUESTING_GREEN || this.m_state === PatienceMessage.STATE_REQUESTING_PINK) {
        this.m_patienceBarCharacter.m_currentActor.clip().setScaleX(a);
        var b = this.m_patienceBarCharacter.m_currentActor.clip().width;
        this.m_patienceBarCharacter.m_currentActor.clip().setX(this.m_patienceBarPositionX - b * (1 - 0.5 * a))
    }
};
PatienceMessage.prototype.onEndAnimationSoda = function(a) {};
PatienceMessage.prototype.onEndAnimationBar = function(a) {};

function SodaPoolM1() {
    this.m_availableObjects = [];
    this.m_maxInstances = 1;
    this.m_workingInstances = 0
}
SodaPoolM1.prototype.free = function() {
    this.m_availableObjects = null
};
SodaPoolM1.prototype.getInstance = function(a, b, c, d, e, f, g) {
    var h = null;
    return 0 < this.m_availableObjects.length ? (this.m_workingInstances++, h = this.m_availableObjects.pop(), h.resetSoda(a, b, c, d, e, f, g), h) : this.m_workingInstances < this.m_maxInstances ? (this.m_workingInstances++, h = new SodaM1(a, b, c, d, e, f, g)) : null
};
SodaPoolM1.prototype.recycleSoda = function(a) {
    GameM1.instance.addSodaToTable();
    a.free();
    this.m_availableObjects.push(a);
    this.m_workingInstances--
};

function GroupSpectatorM1(a, b, c, d, e) {
    this.m_canvas = a;
    this.m_world = b;
    this.m_data = c;
    this.m_x = d;
    this.m_y = e;
    this.m_numOfRows = 3;
    this.m_numOfCols = 13;
    this.m_isTimeToRest = !1;
    this.m_restTimeCounter = 0;
    this.m_restingPeriod = this.m_data[GameM1.BASE].restingPeriod;
    this.m_restingDuration = this.m_data[GameM1.BASE].restingDuration;
    this.m_skinsGrid = [];
    this.m_skinsIdsData = Application.config.sodaCrowd;
    this.m_spectators = [];
    this.m_requestDuration = this.m_maxRequests = this.m_requestsActived = this.m_period = this.m_timeElapsed =
        this.m_timeCounter = 0;
    this.m_gameFinished = this.m_gameEnded = !1;
    this.m_colMakingWave = 0;
    this.m_finishedMakingWave = !1;
    this.m_xSpacing = Application.config.minigame1[0].xSpacing;
    this.m_ySpacing = Application.config.minigame1[0].ySpacing;
    this.m_marginTop = Application.config.minigame1[0].marginTop;
    this.m_marginLeft = Application.config.minigame1[0].marginLeft;
    this.m_deltaMargins = [];
    a = Application.config.minigame1[0].deltaMargin2;
    b = Application.config.minigame1[0].deltaMargin3;
    this.m_deltaMargins.push(Application.config.minigame1[0].deltaMargin1);
    this.m_deltaMargins.push(a);
    this.m_deltaMargins.push(b);
    this.initSpectators()
}
GroupSpectatorM1.COLUMNS = 13;
GroupSpectatorM1.ROWS = 3;
GroupSpectatorM1.prototype.free = function() {
    for (this.m_data = this.m_world = this.m_canvas = null; 0 < this.m_spectators.length;) this.m_spectators.pop();
    this.m_spectators = null
};
GroupSpectatorM1.prototype.makeActorsGoToState = function(a) {
    for (var b = 0; b < this.m_spectators.length; b++) this.m_spectators[b].gotoState(a), this.m_spectators[b].cancelRequest()
};
GroupSpectatorM1.prototype.makeColumnGoToState = function(a) {
    for (var b = 0; b < this.m_spectators.length; b++) this.m_spectators[b].m_col === a && this.m_spectators[b].gotoState(SpectatorM1.ST_MAKING_WAVE)
};
GroupSpectatorM1.prototype.waveLogic = function() {
    !0 === this.hasColumnFinishedWave() && (this.m_colMakingWave += 1, this.makeColumnGoToState(this.m_colMakingWave), this.m_colMakingWave > this.m_numOfCols && (this.m_colMakingWave = 0, this.m_finishedMakingWave = !0))
};
GroupSpectatorM1.prototype.hasColumnFinishedWave = function() {
    for (var a = 0; a < this.m_spectators.length; a++) {
        var b = !1;
        if (this.m_spectators[a].m_col === this.m_colMakingWave && (b = !0, this.m_spectators[a].m_state === SpectatorM1.ST_STAND)) return !0
    }
    return !1 === b ? !0 : !1
};
GroupSpectatorM1.prototype.update = function(a) {
    if (!this.m_gameEnded)
        if (this.m_timeCounter += a, this.m_timeElapsed += a, this.m_restTimeCounter += a, this.m_period = this.m_data[GameM1.BASE].requestPeriod + this.m_data[GameM1.FACTOR].requestPeriod * this.m_timeElapsed * 0.001, !0 == this.m_isTimeToRest) this.waveLogic(), this.m_timeCounter = 0, !0 === this.m_finishedMakingWave && (this.m_isTimeToRest = this.m_finishedMakingWave = !1, this.makeActorsGoToState(SpectatorM1.ST_STAND), this.m_restTimeCounter = 0, Global.app.playSound("dko_snd_crowd_cheer"));
        else {
            if (this.m_restTimeCounter / 1E3 > this.m_restingPeriod) {
                this.m_colMakingWave = 1;
                this.m_timeCounter = this.m_restTimeCounter = 0;
                this.m_isTimeToRest = !0;
                for (a = 0; a < this.m_spectators.length; a++) this.m_spectators[a].cancelRequest();
                this.makeColumnGoToState(this.m_colMakingWave)
            }
            if (this.m_timeCounter > this.m_period && (this.m_timeCounter = 0, this.m_maxRequests = this.m_data[GameM1.BASE].maxRequests + this.m_data[GameM1.FACTOR].maxRequests * this.m_timeElapsed * 0.001, this.m_requestDuration = this.m_data[GameM1.BASE].requestDuration +
                this.m_data[GameM1.FACTOR].requestDuration * this.m_timeElapsed * 0.001, this.m_requestsActived < this.m_maxRequests - 1)) {
                do a = Common.getRandomFromArray(this.m_spectators); while (!a.startRequest(this.m_requestDuration))
            }
        }
};
GroupSpectatorM1.prototype.hasGameFinished = function() {
    return this.m_gameFinished
};
GroupSpectatorM1.prototype.onGameEnd = function(a) {
    this.m_gameEnded = this.m_gameFinished = !0;
    for (var b = this.m_spectators.length - 1; 0 <= b; --b) this.m_spectators[b].cancelRequest(), this.m_spectators[b].onGameEnd(a)
};
GroupSpectatorM1.prototype.initSpectators = function() {
    this.m_numOfRows = this.m_data[GameM1.BASE].numOfRows;
    this.m_numOfCols = this.m_data[GameM1.BASE].numOfCols;
    if ("number" !== typeof this.m_numOfRows || "number" !== typeof this.m_numOfCols) this.m_numOfRows = 3, this.m_numOfCols = 13;
    this.parseSkinsData();
    for (var a = null, b = 1; b <= this.m_numOfCols; b++)
        for (var c = 1; c <= this.m_numOfRows; c++) 0 == (b + c) % 2 && (a = {
            npcSkinID: this.m_skinsGrid[c - 1][b - 1]
        }, 0 !== a.npcSkinID && (a = this.m_world.addActor(new SpectatorM1(this.m_canvas, this.m_world,
            this, this.m_marginLeft + (b - 1) * this.m_xSpacing, this.m_deltaMargins[c - 1] + (c - 1) * this.m_ySpacing + this.m_marginTop, c, b, a)), this.m_spectators.push(a)))
};
GroupSpectatorM1.prototype.onStartRequest = function() {
    this.m_requestsActived++
};
GroupSpectatorM1.prototype.onFinishRequest = function() {
    this.m_requestsActived--
};
GroupSpectatorM1.prototype.parseSkinsData = function() {
    for (var a = 0; a < this.m_numOfRows; a++) {
        for (var b = this.m_skinsIdsData[a], c = [], d = 0; d < this.m_numOfCols; d++) c.push(b["col" + d]);
        this.m_skinsGrid.push(c)
    }
};

function GameM1(a) {
    SGame.call(this, a);
    this.m_reset = this.inTransition = this.playerWin = this.isPaused = this.win = !1;
    this.m_world = null;
    this.m_finish = !1;
    this.m_data = Application.config.minigame1;
    this.m_requestForTutorial = [this.m_data[GameM1.BASE].firstRequest, this.m_data[GameM1.BASE].secondRequest];
    this.m_requestCounter = 0;
    this.m_config = Application.config.configMinigames;
    this.m_lives = this.m_maxLives = this.m_config.livesMinigame1;
    this.m_showSpectatorsCollisions = Application.config.minigame1[GameM1.BASE].showCollisions;
    this.m_showSpectatorsCollisions = "undefined" !== typeof this.m_showSpectatorsCollisions ? 1 == this.m_showSpectatorsCollisions : !0;
    this.m_sodaCounter = 0;
    this.m_lifeScoreMultiplier = this.m_config.minigame1LifeScore;
    this.m_sodaScoreMultiplier = this.m_config.minigame1SodaScore;
    this.m_minigameLowThreshold = this.m_config.minigameLowThreshold;
    this.m_minigameMidThreshold = this.m_config.minigameMidThreshold;
    this.m_minigameHighThreshold = this.m_config.minigameHighThreshold;
    this.m_totalTime = 1E3 * this.m_config.timeMinigame1;
    this.m_score = 0;
    GameM1.instance = this;
    this.m_timeElapsed = 0;
    ControlTouch.instance.setMultitouchGame(!1);
    this.reset();
    this.m_sodaPicked = GameM1.SODA_GREEN;
    this.m_sodaTableClip = null;
    this.m_hasPickedSoda = !1;
    this.m_canvasMessage = GuiGame.instance.canvasMessage;
    this.m_coolerClip = Application.instance.getClip("mcM1Cooler");
    this.m_coolerClip.setX(this.m_world.player().x() + 70);
    this.m_coolerClip.setY(this.m_world.player().y());
    this.m_canvas.addChild(this.m_coolerClip.sprite);
    this.m_coolerClip.setVisible(!0);
    this.addSodaToTable();
    this.m_livesClips = [];
    this.m_lives_initx = 50;
    this.m_lives_offsetX = 10;
    this.m_lives_inity = 50;
    this.m_gameState = GameM1.STATE_NORMAL;
    this.m_timeToPauseGame = 1;
    this.m_gameFinished = this.m_isSkip = !1;
    Global.app.stopAllSounds();
    Global.app.playSound("dko_mus_minigame")
}
goog.inherits(GameM1, SGame);
GameM1.SODA_GREEN = 1;
GameM1.SODA_PINK = 2;
GameM1.MAX_DELTA = 50;
GameM1.BASE = 0;
GameM1.FACTOR = 1;
GameM1.instance = null;
GameM1.STATE_NORMAL = 10;
GameM1.STATE_OOPS = 11;
GameM1.prototype.setGameState = function(a) {
    this.m_gameState = a
};
GameM1.prototype.getGameState = function() {
    return this.m_gameState
};
GameM1.prototype.initLives = function() {
    for (var a = 0; a < this.m_lives; a++) this.m_livesClips.push(Application.instance.getClip("mcLifeGreenMushroom"));
    for (a = 0; a < this.m_livesClips.length; a++) this.m_livesClips[a].setX(this.m_lives_initx + this.m_livesClips[a].width * a + this.m_lives_offsetX), this.m_livesClips[a].setY(this.m_lives_inity), this.m_livesClips[a].setVisible(!0), this.m_canvas.addChild(this.m_livesClips[a].sprite)
};
GameM1.prototype.getTutorialRequests = function() {
    return this.m_requestForTutorial
};
GameM1.prototype.getRequestCounter = function() {
    return this.m_requestCounter
};
GameM1.prototype.setRequestCounter = function(a) {
    this.m_requestCounter = a
};
GameM1.prototype.getSodaPicked = function() {
    return this.m_sodaPicked
};
GameM1.prototype.setSodaPicked = function(a) {
    this.m_sodaPicked = a
};
GameM1.prototype.free = function() {
    this.m_world.free();
    GameM1.superClass_.free.call(this)
};
GameM1.prototype.world = function() {
    return this.m_world
};
GameM1.prototype.totalTime = function() {
    return this.m_totalTime
};
GameM1.prototype.config = function() {
    return this.m_config
};
GameM1.prototype.init = function() {
    this.m_hud = new HudM1
};
GameM1.prototype.timeElapsed = function() {
    return this.m_timeElapsed
};
GameM1.prototype.addScore = function(a) {
    this.m_score += a;
    HudM1.instance.setScore(this.m_score)
};
GameM1.prototype.setScore = function(a) {
    this.m_score = a;
    HudM1.instance.setScore(this.m_score)
};
GameM1.prototype.removeLife = function() {};
GameM1.prototype.onSkipMinigame = function() {
    !1 === this.m_gameFinished && (this.m_isSkip = !0, this.onGameEnd(!1))
};
GameM1.prototype.addLife = function(a) {
    this.m_lives += a;
    HudM1.instance.onRefreshLives();
    if (0 > a)
        if (1 > this.m_lives) this.onGameEnd(!1);
        else this.m_gameState = GameM1.STATE_OOPS, this.m_world.player().gotoState(PlayerM1.ST_OOPS), HudM1.instance.setLives(this.m_lives);
        else HudM1.instance.setLives(this.m_lives)
};
GameM1.prototype.onGameEnd = function(a) {
    var b = a;
    this.m_gameFinished = a = !0;
    !0 == this.m_isSkip ? (this.m_world.onGameEnd(!1), HudM1.instance.callback = "onEndGameCallback", HudM1.instance.targetCallback = this, HudM1.instance.doMsg("", Application.config.configMinigames.minigame1EndTime)) : (this.m_world.onGameEnd(a), HudM1.instance.callback = "onEndGameCallback", HudM1.instance.targetCallback = this, a = b ? Application.strings.STR_MINIGAME1_GOOD_JOB : Application.strings.STR_MINIGAME1_GOOD_ENOUGH, HudM1.instance.doMsg(a, 1.5 *
            Application.config.configMinigames.minigame1EndTime), this.m_score += this.m_sodaScoreMultiplier * this.m_sodaCounter, this.m_score += this.m_lifeScoreMultiplier * this.m_lives, Global.minigameScore = this.m_score, Global.mickeyEarned = 0, this.m_score >= this.m_config.minigameHighThreshold ? (Global.mickeyEarned = 3, 3 <= Global.mickeyShots ? Global.extraMickeyShot = 1 : (Global.mickeyEarned = 3 - Global.mickeyShots, Global.mickeyShots = 3), Global.extraTime = this.m_config.minigameHighPrizeTime) : this.m_score >= this.m_config.minigameMidThreshold ?
        (3 === Global.mickeyShots ? Global.boostOn = 1 : (Global.mickeyEarned = 1, Global.mickeyShots++), Global.extraTime = this.m_config.minigameMidPrizeTime) : this.m_score >= this.m_config.minigameLowThreshold && (Global.boostOn = 1, Global.extraTime = this.m_config.minigameLowPrizeTime))
};
GameM1.prototype.reset = function() {
    this.m_world && (this.m_world.free(), this.m_world = null);
    this.m_world = new WorldM1(this.m_canvas, this, this.m_data);
    this.setScore(0);
    HudM1.instance.setLives(this.m_lives);
    this.m_reset = !1
};
GameM1.prototype.update = function(a) {
    this.m_reset ? this.reset() : this.m_finish ? GuiGame.instance && (Global.level = 1, GuiManager.instance.gotoScreen(GuiManager.SC_GAME)) : (a > GameM1.MAX_DELTA && (a = GameM1.MAX_DELTA), GameM1.superClass_.update.call(this, a), this.m_world.update(a), this.m_timeElapsed += a, this.m_timeElapsed > this.m_totalTime && !1 === this.m_gameFinished && (this.onGameEnd(!0), this.m_world.onGameEnd(!0)))
};
GameM1.prototype.onEndGameCallback = function() {
    !1 === this.m_isSkip && GuiGame.instance.addPopup(GuiPopupMinigameReward, 0, 0);
    this.m_finish = !0
};
GameM1.prototype.onKeyDown = function(a) {
    GameM1.superClass_.onKeyDown.call(this, a);
    a == Common.KEY_1 ? Global.game_mode !== Global.mode_tournament && (this.onGameEnd(!0), Global.level = 2, GuiManager.instance.gotoScreen(GuiManager.SC_GAME)) : a == Common.KEY_2 ? Global.game_mode !== Global.mode_tournament && (this.onGameEnd(!0), Global.level = 3, GuiManager.instance.gotoScreen(GuiManager.SC_GAME)) : a == Common.KEY_3 && Global.game_mode !== Global.mode_tournament && (this.onGameEnd(!0), Global.level = 4, GuiManager.instance.gotoScreen(GuiManager.SC_GAME));
    if (!1 == this.m_finish) this.m_world.onKeyDown(a)
};
GameM1.prototype.onKeyUp = function(a) {
    GameM1.superClass_.onKeyUp.call(this, a)
};
GameM1.prototype.onMouseMove = function(a) {
    GameM1.superClass_.onMouseMove.call(this, a);
    this.m_world.onMouseMove(a)
};
GameM1.prototype.onMouseDown = function(a) {
    GameM1.superClass_.onMouseDown.call(this, a);
    this.m_world.onMouseDown(a)
};
GameM1.prototype.onMouseUp = function(a) {
    GameM1.superClass_.onMouseUp.call(this, a);
    this.m_world.onMouseUp(a)
};
GameM1.prototype.onTouchStart = function(a, b, c) {
    this.m_world.onTouchStart(a, b, c)
};
GameM1.prototype.onTouchEnd = function(a, b, c) {
    this.m_world.onTouchEnd(a, b, c)
};
GameM1.prototype.addSodaToTable = function() {
    var a = "mcM1Soda";
    this.m_sodaPicked === GameM1.SODA_GREEN ? a = "mcM1SodaGreen" : this.m_sodaPicked === GameM1.SODA_PINK && (a = "mcM1SodaPink");
    null !== this.m_sodaTableClip && (this.m_canvasMessage.removeChild(this.m_sodaTableClip.sprite), this.m_sodaTableClip = null);
    this.m_sodaTableClip = Application.instance.getClip(a);
    this.m_sodaTableClip.setX(this.m_world.player().x() + 40);
    this.m_sodaTableClip.setY(this.m_world.player().y() - 45);
    this.m_sodaTableClip.setVisible(!0);
    this.m_canvasMessage.addChild(this.m_sodaTableClip.sprite)
};
GameM1.prototype.removeSodaFromTable = function() {
    this.m_canvasMessage.removeChild(this.m_sodaTableClip.sprite)
};
GameM1.prototype.getLives = function() {
    return this.m_lives
};
GameM1.prototype.setLives = function(a) {
    this.m_lives = a
};
GameM1.prototype.getMaxLives = function() {
    return this.m_maxLives
};
GameM1.prototype.getSodaCounter = function() {
    return this.m_sodaCounter
};
GameM1.prototype.setSodaCounter = function(a) {
    this.m_sodaCounter = a
};
GameM1.prototype.showSpectatorCollisions = function() {
    return this.m_showSpectatorsCollisions
};

function HudM1(a, b) {
    SScreen.call(this, a, b);
    HudM1.instance = this;
    this.m_currentTime = 0;
    this.txtPlayerLive = $(".ui_hud_lifes");
    this.m_txtScore = $(".ui_hud_score");
    this.m_txtTime = $(".ui_general_time.t1");
    this.m_txtTime2 = $(".ui_general_time.t3");
    this.m_txtSodaCounter = $(".ui_hud_counter");
    this.m_maxLives = 3;
    this.m_lifeBaseName = ".ui_general_lifes.l";
    this.m_lifeElements = [];
    for (var c = 0; c < this.m_maxLives; c++) this.m_lifeElements.push(this.m_lifeBaseName + (c + 1));
    this.initLives();
    this.m_state = HudM1.STATE_NORMAL;
    this.m_timeInState =
        0;
    this.m_hasMsgFinished = !0;
    this.m_txtMessage = $(".ui_hud_messagetext");
    this.m_txtMessageShadow = $(".ui_hud_messagebase");
    this.m_msgTime = 0;
    this.m_maxAlpha = 1;
    this.m_minAlpha = 0.1;
    this.m_currentAlpha = this.m_maxAlpha;
    this.m_alphaStep = 0;
    this.targetCallback = this.callback = null;
    this.m_message = ""
}
goog.inherits(HudM1, SScreen);
HudM1.instance = null;
HudM1.MsgTime = 2E3;
HudM1.STATE_NORMAL = 0;
HudM1.STATE_SHOWING_MESSAGE = 1;
HudM1.ACTION_GOTO_NORMAL = 10;
HudM1.ACTION_DO_MESSAGE = 11;
HudM1.prototype.setGuiHTML = function() {
    this.css = " .ui_general_screen_bg {  top:0;  left:0;  width: 750px;  height: 500px;  background:url(media/images/ui_images/hud/gui_mini1.png); } .ui_hud_support_soda {  position: absolute;  pointer-events: none;  width: 20px;  height: 35px;  left: 18px;  top: 38px;  background: url(media/images/ui_images/hud/gui_hud_minigame_collect.png); } .ui_hud_buttons_soda {  position: absolute;  top: 403px;  left: 491px;  width: 110px;  height: 110px;  background: url(media/images/ui_images/buttons/gui_buttons_coke.png) no-repeat right top;  cursor: pointer; } .ui_general_time.t1 {  width: 47px;  height: 27px;  text-align: right; } .ui_general_time.t3 {  left: 163px;  top: 25px;  width: 47px;  height: 27px;  text-align: left; } .ui_hud_buttons_soda.s1 {  background-position: 0px 0px; } .ui_hud_buttons_soda.s1:hover {  background-position: -110px  0px; } .ui_hud_buttons_soda.s2 {  background-position: -220px  0px; } .ui_hud_buttons_soda.s2:hover {  background-position: -330px  0px; } .ui_hud_counter {  position: absolute;  left: 54px;  top: 42px;  width: 70px;  height: 30px;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 26px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always; } .ui_hud_messagetext {  position: absolute;  left: 110px;  top: 197px;  width: 566px;  height: 51px;  color: #005189;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 38px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always; } .ui_hud_messagebase {  position: absolute;  pointer-events: none;  width: 565px;  height: 208px;  left: 94px;  top: 119px;  background: url(media/images/ui_images/popups/gui_popups_message1.png); }";
    this.html = "   <div class='ui_general_button_skip b1' id='btn_skip'></div>   <div class='ui_general_support'></div>   <div class='ui_hud_support_soda'></div>   <div class='ui_general_lifes l1'></div>   <div class='ui_general_lifes l2'></div>   <div class='ui_general_lifes l3'></div>   <div class='ui_hud_counter'>00</div>   <div class='ui_hud_counter'>00</div>       <div class='ui_general_time t1'>00</div>       <div class='ui_general_time t2'>:</div>   <div class='ui_general_time t3'>00</div>    <div class='ui_hud_buttons_soda s1' id='btn_soda1'></div>    <div class='ui_hud_buttons_soda s2' id='btn_soda2'></div>   <div class='ui_hud_messagebase'></div>   <div class='ui_hud_messagetext'>GREAT</div>";
    HudM1.superClass_.setGuiHTML.call(this)
};
HudM1.prototype.free = function() {
    this.m_timeElapse = null;
    HudM1.superClass_.free.call(this)
};
HudM1.prototype.setScore = function(a) {
    this.m_txtScore.html(a)
};
HudM1.prototype.setLives = function(a) {};
HudM1.prototype.onDraw = function(a) {};
HudM1.prototype.init = function() {
    HudM1.superClass_.init.call(this);
    $(".ui_hud_baseplayer").css("pointer-events", "none");
    $(".ui_enemybase").css("pointer-events", "none");
    $(".ui_hud_messagebase").css("pointer-events", "none");
    $(".ui_hud_messagetext").css("pointer-events", "none");
    $(".ui_hud_combobase").css("pointer-events", "none");
    $(".ui_hud_messagebase").css("opacity", "1");
    this.addClickListener("btn_pause");
    this.addClickListener("btn_soda1");
    this.addClickListener("btn_soda2");
    this.addClickListener("btn_skip");
    $("#btn_soda2").css("display", "none");
    $(".ui_hud_messagetext").css("display", "none");
    $(".ui_hud_messagebase").css("display", "none");
    $(".ui_general_time.t2").html(Application.strings.STR_HUD_TIMER)
};
HudM1.prototype.onClick = function(a) {
    switch (a.id) {
        case "btn_pause":
            GuiGame.instance.addPopup(GuiPopupPause, 0, 0);
            break;
        case "btn_soda1":
            $("#btn_soda1").css("display", "none");
            $("#btn_soda2").css("display", "block");
            GameM1.instance.setSodaPicked(GameM1.SODA_PINK);
            GameM1.instance.addSodaToTable();
            Global.app.playSound("dko_snd_ui_buttons");
            break;
        case "btn_soda2":
            $("#btn_soda1").css("display", "block");
            $("#btn_soda2").css("display", "none");
            GameM1.instance.setSodaPicked(GameM1.SODA_GREEN);
            GameM1.instance.addSodaToTable();
            Global.app.playSound("dko_snd_ui_buttons");
            break;
        case "btn_skip":
            GameM1.instance.onSkipMinigame()
    }
};
HudM1.prototype.doMsg = function(a, b) {
    this.m_message = a;
    this.m_hasMsgFinished = !1;
    this.m_txtMessage.html(a);
    this.m_msgTime = b;
    this.m_alphaStep = (this.m_maxAlpha - this.m_minAlpha) / this.m_msgTime;
    this.transition(HudM1.ACTION_DO_MESSAGE)
};
HudM1.prototype.transition = function(a) {
    switch (this.m_state) {
        case HudM1.STATE_NORMAL:
            a === HudM1.ACTION_DO_MESSAGE && (this.m_timeInState = 0, this.m_hasMsgFinished = !1, this.m_state = HudM1.STATE_SHOWING_MESSAGE, "" !== this.m_message ? (this.m_txtMessage.css("display", "block"), this.m_txtMessageShadow.css("display", "block")) : (this.m_txtMessage.css("display", "none"), this.m_txtMessageShadow.css("display", "none")));
            break;
        case HudM1.STATE_SHOWING_MESSAGE:
            a === HudM1.ACTION_GOTO_NORMAL && (this.m_timeInState = 0, this.m_state =
                HudM1.STATE_NORMAL, this.m_txtMessage.css("display", "none"), this.m_txtMessageShadow.css("display", "none"))
    }
};
HudM1.prototype.update = function(a) {
    HudM1.superClass_.update.call(this, a);
    this.m_timeInState += a / 1E3;
    switch (this.m_state) {
        case HudM1.STATE_NORMAL:
            var b = this.m_currentTime = GameM1.instance.totalTime() - GameM1.instance.timeElapsed();
            a = parseInt(b / 6E4, 10);
            a = 10 > a ? "0" + a : "" + a;
            b = parseInt(b % 6E4, 10);
            b = parseInt(b / 1E3, 10);
            b = 10 > b ? "0" + b : "" + b;
            this.m_txtTime.html(a);
            this.m_txtTime2.html(b);
            break;
        case HudM1.STATE_SHOWING_MESSAGE:
            if (this.m_currentAlpha = this.m_maxAlpha - this.m_alphaStep * this.m_timeInState, 0.8 < this.m_currentAlpha &&
                (this.m_currentAlpha = this.m_maxAlpha), this.m_currentAlpha < this.m_minAlpha && (this.m_currentAlpha = this.m_minAlpha), this.m_timeInState > this.m_msgTime && (this.m_hasMsgFinished = !0, this.transition(HudM1.ACTION_GOTO_NORMAL), this.callback && this.targetCallback)) this.targetCallback[this.callback]()
    }
};
HudM1.prototype.onKeyDown = function(a) {
    HudM1.superClass_.onKeyDown.call(this, a);
    if (SGame.instance) SGame.instance.onKeyDown(a)
};
HudM1.prototype.onKeyUp = function(a) {
    HudM1.superClass_.onKeyUp.call(this, a);
    if (SGame.instance) SGame.instance.onKeyUp(a)
};
HudM1.prototype.onMouseUp = function(a) {
    HudM1.superClass_.onMouseUp.call(this, a);
    if (SGame.instance) SGame.instance.onMouseUp(a)
};
HudM1.prototype.onMouseDown = function(a) {
    HudM1.superClass_.onMouseDown.call(this, a);
    if (SGame.instance) SGame.instance.onMouseDown(a)
};
HudM1.prototype.onMouseMove = function(a) {
    HudM1.superClass_.onMouseMove.call(this, a);
    if (SGame.instance) SGame.instance.onMouseMove(a)
};
HudM1.prototype.initLives = function() {
    for (var a = 0; a < this.m_maxLives; a++) this.setElementVisibility(this.m_lifeElements[a], !0)
};
HudM1.prototype.setElementVisibility = function(a, b) {
    !0 === b ? $(a).css("display", "block") : $(a).css("display", "none")
};
HudM1.prototype.onRefreshLives = function() {
    var a = GameM1.instance.getLives() - 1;
    if (0 <= a)
        for (var b = 0; b < this.m_maxLives; b++) b <= a ? this.setElementVisibility(this.m_lifeElements[b], !0) : this.setElementVisibility(this.m_lifeElements[b], !1);
    else
        for (b = 0; b < this.m_maxLives; b++) this.setElementVisibility(this.m_lifeElements[b], !1)
};
HudM1.prototype.setSodaCounter = function(a) {
    var b = "" + a;
    10 > a && (b = "0" + b);
    this.m_txtSodaCounter.html(b)
};

function PlayerM1(a, b, c, d) {
    ActorM1.call(this, a, b, c, d);
    this.m_character = new Character(c, d, a);
    this.m_character.addState(PlayerM1.ST_STAND, "mcPlayer0" + Global.selectedTeam + "Stand");
    this.m_character.addState(PlayerM1.ST_LAUNCH, "mcPlayer0" + Global.selectedTeam + "Throw");
    this.m_character.addState(PlayerM1.ST_WIN, "mcPlayer0" + Global.selectedTeam + "Celebration");
    this.m_character.addState(PlayerM1.ST_LOSE, "mcPlayer0" + Global.selectedTeam + "Sad");
    this.m_character.addState(PlayerM1.ST_OOPS, "mcPlayer0" + Global.selectedTeam +
        "Hit");
    this.m_character.onEndAnimation = "onEndAnimation";
    this.m_character.worldActor = this;
    this.gotoState(PlayerM1.ST_STAND);
    this.m_throwDirection = new Vector2D;
    this.m_minThrowSpeed = GameM1.instance.config().minSodaSpeedM1;
    this.m_maxThrowSpeed = GameM1.instance.config().maxSodaSpeedM1;
    this.sodaPosY = this.m_y - 50;
    this.sodaPosX = this.m_x;
    this.m_isWinner = this.m_gameEndedFlag = !1
}
goog.inherits(PlayerM1, ActorM1);
PlayerM1.ST_STAND = 1;
PlayerM1.ST_LAUNCH = 2;
PlayerM1.ST_WIN = 3;
PlayerM1.ST_LOSE = 4;
PlayerM1.ST_OOPS = 5;
PlayerM1.BASE_SWAP_DISTANCE = 50;
PlayerM1.prototype.update = function(a) {
    this.m_character.update(a);
    PlayerM1.superClass_.update.call(this, a);
    this.m_gameEndedFlag && (this.m_gameEndedFlag = !1, this.m_isWinner ? this.gotoState(PlayerM1.ST_WIN) : this.gotoState(PlayerM1.ST_LOSE))
};
PlayerM1.prototype.gotoState = function(a) {
    PlayerM1.superClass_.gotoState.call(this, a);
    null !== this.m_clip && this.m_clip.setScaleX(this.m_flipX ? -this.m_clip.scaleX : this.m_clip.scaleX)
};
PlayerM1.prototype.onGameEnd = function(a) {
    this.m_gameEndedFlag = !0;
    this.m_isWinner = a
};
PlayerM1.prototype.onThrow = function(a, b, c) {
    this.m_state != PlayerM1.ST_WIN && this.m_state != PlayerM1.ST_LOSE && this.m_state != PlayerM1.ST_OOPS && (c = 0, this.flipX(0 > a), this.gotoState(PlayerM1.ST_LAUNCH), this.m_throwDirection.x = a, this.m_throwDirection.y = b, a = Math.sqrt(a * a + b * b), this.m_throwDirection.normalize(), c = a / PlayerM1.BASE_SWAP_DISTANCE * this.m_minThrowSpeed, c < this.m_minThrowSpeed && (c = this.m_minThrowSpeed), c > this.m_maxThrowSpeed && (c = this.m_maxThrowSpeed), this.m_throwDirection.normalize(), a = this.m_world.sodaPool().getInstance(this.m_canvas,
        this.m_world, this.sodaPosX, this.sodaPosY, this.m_throwDirection, c, GameM1.instance.getSodaPicked()), null !== a && (this.m_world.registerSoda(a), this.m_world.addActor(a)))
};
PlayerM1.prototype.checkClicked = function(a, b) {
    if (a < this.m_clip.x + 3 * this.m_clip.width && a > this.m_clip.x - 3 * this.m_clip.width && b < this.m_clip.y + 1.5 * this.m_clip.height && b > this.m_clip.y - 2 * this.m_clip.height) this.m_world.onClickedPlayer(a, b)
};
PlayerM1.prototype.onEndAnimation = function(a) {
    switch (a) {
        case PlayerM1.ST_LAUNCH:
            this.gotoState(PlayerM1.ST_STAND);
            break;
        case PlayerM1.ST_OOPS:
            this.gotoState(PlayerM1.ST_STAND), GameM1.instance.setGameState(GameM1.STATE_NORMAL)
    }
};

function WorldM1(a, b, c) {
    this.m_canvas = a;
    this.m_canvasTop = GuiGame.instance.canvasMessage;
    this.m_data = c;
    a = Application.instance.getClip("mcBgMinigame1");
    this.m_canvas.addChild(a.sprite);
    this.m_actors = [];
    this.m_sodas = [];
    this.m_player = this.m_sodaPool = this.m_spectatorManager = null;
    this.m_width = Application.APP_WIDTH;
    this.m_height = Application.APP_HEIGHT;
    this.m_currentId = -1;
    this.m_initMousePos = new Vector2D;
    this.m_mouseState = WorldM1.MOUSE_DISABLED;
    this.m_mouseTime = 0;
    this.m_playerX = Application.config.minigame1[0].playerX -
        5;
    this.m_playerY = Application.config.minigame1[0].playerY + 20;
    this.initActors();
    GuiPopupHelpMinigame.minigame_select = GuiPopupHelpMinigame.MINIGAME_1;
    GuiGame.instance.addPopup(GuiPopupHelpMinigame, 0, 0)
}
WorldM1.prototype.free = function() {
    this.m_data = this.m_canvas = null;
    for (var a = this.m_actors.length - 1; 0 <= a; --a) this.m_actors[a].free(), this.m_actors[a] = null, this.m_actors.splice(a, 1)
};
WorldM1.prototype.update = function(a) {
    if (0 < this.m_actors.length)
        for (var b = this.m_actors.length - 1; 0 <= b; --b) this.m_actors[b].isAwaitingDelete() ? (this.m_actors[b].free(), this.m_actors[b] = null, this.m_actors.splice(b, 1)) : this.m_actors[b].update(a);
    this.m_mouseState == WorldM1.MOUSE_ACTIVE && (this.m_mouseTime += a);
    GameM1.instance.getGameState() !== GameM1.STATE_OOPS && this.m_spectatorManager.update(a)
};
WorldM1.prototype.player = function() {
    return this.m_player
};
WorldM1.prototype.sodaList = function() {
    return this.m_sodas
};
WorldM1.prototype.registerSoda = function(a) {
    this.m_sodas.push(a)
};
WorldM1.prototype.unregisterSoda = function(a) {
    for (var b = this.m_sodas.length - 1; 0 <= b; --b) this.m_sodas[b] === a && this.m_sodas.splice(b, 1)
};
WorldM1.prototype.checkWorldBoundaries = function(a, b) {
    return 0 > a || 0 > b || a > this.m_width || b > this.m_height ? !1 : !0
};
WorldM1.prototype.data = function() {
    return this.m_data
};
WorldM1.prototype.sodaPool = function() {
    return this.m_sodaPool
};
WorldM1.prototype.initActors = function() {
    this.m_sodaPool = new SodaPoolM1;
    this.m_spectatorManager = new GroupSpectatorM1(this.m_canvas, this, this.m_data, 0, 100);
    this.m_player = new PlayerM1(this.m_canvasTop, this, this.m_playerX, this.m_playerY);
    this.addActor(this.m_player)
};
WorldM1.prototype.addActor = function(a) {
    null !== a && this.m_actors.push(a);
    return a
};
WorldM1.prototype.onGameEnd = function(a) {
    this.m_player.onGameEnd(a);
    this.m_spectatorManager.onGameEnd(a)
};
WorldM1.prototype.onKeyDown = function(a) {};
WorldM1.prototype.onKeyUp = function(a) {};
WorldM1.prototype.onMouseMove = function(a) {};
WorldM1.prototype.onMouseDown = function(a) {
    this.m_mouseState = WorldM1.MOUSE_ACTIVE;
    this.m_mouseState == WorldM1.MOUSE_ACTIVE && (this.m_mouseState = WorldM1.MOUSE_DISABLED, this.m_player.onThrow(a.offsetX - this.m_player.sodaPosX, a.offsetY - this.m_player.sodaPosY, 1E3 / this.m_mouseTime), GameM1.instance.removeSodaFromTable())
};
WorldM1.prototype.onMouseUp = function(a) {};
WorldM1.prototype.onTouchStart = function(a, b, c) {
    -1 == this.m_currentId && (this.m_player.checkClicked(a, b), this.m_currentId = c)
};
WorldM1.prototype.onTouchEnd = function(a, b, c) {
    if (c == this.m_currentId) {
        var d = c = 0;
        this.m_mouseState == WorldM1.MOUSE_ACTIVE && (this.m_mouseState = WorldM1.MOUSE_DISABLED, c = a - this.m_initMousePos.x, d = b - this.m_initMousePos.y, c * c + d * d > WorldM1.MIN_THROW_SQUARE_DISTANCE && (this.m_player.onThrow(a - this.m_player.sodaPosX, b - this.m_player.sodaPosY, 1E3 / this.m_mouseTime), GameM1.instance.removeSodaFromTable()));
        this.m_currentId = -1
    }
};
WorldM1.prototype.onClickedPlayer = function(a, b) {
    this.m_mouseState = WorldM1.MOUSE_ACTIVE;
    this.m_mouseTime = 1;
    this.m_initMousePos.x = a;
    this.m_initMousePos.y = b
};
WorldM1.prototype.getSpectatorManager = function() {
    return this.m_spectatorManager
};
WorldM1.MOUSE_ACTIVE = 1;
WorldM1.MOUSE_DISABLED = 2;
WorldM1.MIN_THROW_SQUARE_DISTANCE = 400;
WorldM1.PLAYER_INIT_X = 350;
WorldM1.PLAYER_INIT_Y = 450;

function BalloonTutorial(a, b, c, d) {
    this.m_y = this.m_x = 0;
    this.m_state = -1;
    this.m_clip = null;
    this.m_game = b;
    this.m_canvas = a;
    this.m_character = new Character(this.m_x, this.m_y, a);
    this.m_character.addState(BalloonTutorial.ST_SHADOW_STAND, "mcBallShadow");
    this.gotoState(BalloonTutorial.ST_SHADOW_STAND);
    this.m_ballonClip = null;
    this.m_visible = !0;
    this.m_displace = new Displace(this.m_x, this.m_y);
    this.m_displace.onEndDisplaceCallback = "onEndDisplace";
    this.m_displace.targetCallback = this;
    this.m_displaceZ = new JumpControl;
    this.m_displaceZ.onCompleteJumpCallback = "onCompleteJump";
    this.m_displaceZ.targetCallback = this;
    this.ballonGotoState(BalloonTutorial.ST_STAND);
    this.m_dribbleDirection = 1;
    this.m_dribbleDisplaceCurrent = 0;
    this.m_lastAcceleration = -1;
    this.m_onCenter = this.m_onSuperShoot = this.m_onGoal = !1;
    this.m_frictionShoot = parseInt(Application.config.SoccerGeneral.frictionShoot, 10);
    this.m_frictionPass = parseInt(Application.config.SoccerGeneral.frictionPass, 10);
    this.m_frictionAir = parseInt(Application.config.SoccerGeneral.frictionAir,
        10);
    this.m_shootElevationSpeedMin = parseInt(Application.config.SoccerGeneral.shootElevationSpeedMin, 10);
    this.m_shootElevationMin = parseInt(Application.config.SoccerGeneral.shootElevationMin, 10);
    this.m_shootElevationSpeedMax = parseInt(Application.config.SoccerGeneral.shootElevationSpeedMax, 10);
    this.m_shootElevationMax = parseInt(Application.config.SoccerGeneral.shootElevationMax, 10)
}
BalloonTutorial.prototype.setVisible = function(a) {
    this.m_ballonClip.setVisible(a);
    this.m_character.actor().clip().setVisible(a);
    this.m_visible = a
};
BalloonTutorial.prototype.gotoState = function(a) {
    var b = 0,
        c = 0;
    null !== this.m_clip && (b = this.m_clip.x, c = this.m_clip.y);
    this.m_character.gotoState(a);
    this.m_clip = this.m_character.actor().clip();
    this.m_clip.setScaleX(BalloonTutorial.BALLOON_SCALE);
    this.m_clip.setScaleY(BalloonTutorial.BALLOON_SCALE);
    this.m_clip.setX(b);
    this.m_clip.setY(c)
};
BalloonTutorial.prototype.xDribble = function() {
    return this.m_x
};
BalloonTutorial.prototype.x = function() {
    switch (this.m_state) {
        case BalloonTutorial.ST_WITH_PLAYER_STAND:
        case BalloonTutorial.ST_WITH_PLAYER_MOVE:
            return this.player.x()
    }
    return this.m_x
};
BalloonTutorial.prototype.y = function() {
    return this.m_y
};
BalloonTutorial.prototype.onSuperShoot = function() {
    this.ballonGotoState(BalloonTutorial.ST_SUPER_SHOOT);
    this.m_onSuperShoot = !0
};
BalloonTutorial.prototype.setPlayer = function(a) {
    this.player = a;
    this.m_onGoal = !1;
    this.ballonGotoState(BalloonTutorial.ST_WITH_PLAYER_STAND)
};
BalloonTutorial.prototype.applyForce = function(a, b, c, d) {
    this.m_onCenter = !1;
    !1 == a && !0 == d && (this.m_onCenter = !0);
    this.m_displace.resetPosition(this.m_x, this.m_y);
    this.m_lastAcceleration = this.m_frictionPass;
    !0 == a && (this.m_lastAcceleration = this.m_frictionShoot);
    this.m_displace.gotoDirection(9999, c, b, this.m_lastAcceleration, 1);
    !0 == d && (this.m_displace.updateAcceleration(this.m_frictionAir), this.m_displaceZ.applyImpulse(BalloonTutorial.ELEVATION_IMPULSE));
    !0 == a ? (this.ballonGotoState(BalloonTutorial.ST_FREE_MOVE_SHOOT),
        a = 0, b > this.m_shootElevationSpeedMax && (a = this.m_shootElevationMax), b > this.m_shootElevationSpeedMin && b < this.m_shootElevationSpeedMax && (a = this.m_shootElevationMin + (b - this.m_shootElevationSpeedMin) / (this.m_shootElevationSpeedMax - this.m_shootElevationSpeedMin) * (this.m_shootElevationMax - this.m_shootElevationMin)), 0 < a && this.m_displaceZ.applyImpulse(-a)) : this.ballonGotoState(BalloonTutorial.ST_FREE_MOVE)
};
BalloonTutorial.prototype.update = function(a) {
    this.m_character.update(a);
    null !== this.m_clip && (this.m_clip.setX(this.m_x - this.m_game.cameraX()), this.m_clip.setY(this.m_y - this.m_game.cameraY()), this.m_clip.sprite._depth = 1E3 * this.m_y);
    null !== this.m_ballonClip && (this.m_ballonClip.update(a), this.m_ballonClip.setX(this.m_x - this.m_game.cameraX()), this.m_ballonClip.setY(this.m_y + BalloonTutorial.SPRITE_TO_SHADOW_GAP + this.m_displaceZ.getCurrentHeight() - this.m_game.cameraY()), this.m_ballonClip.sprite._depth =
        1E3 * this.m_y + 10);
    switch (this.m_state) {
        case BalloonTutorial.ST_STAND:
            this.validateCollisionWithPlayer();
            break;
        case BalloonTutorial.ST_FREE_MOVE:
        case BalloonTutorial.ST_FREE_MOVE_SHOOT:
            this.m_displaceZ.update(a);
            this.m_displace.update(a);
            if (!0 == this.ballonInsideGoal() && (this.m_displace.y() < this.m_game.limitMinY + BalloonTutorial.INSIDE_GOAL_GAP || this.m_displace.y() > this.m_game.limitMaxY - BalloonTutorial.INSIDE_GOAL_GAP || 0 > this.m_displace.x() || this.m_displace.x() > this.m_game.width())) {
                this.m_displace.cancel();
                this.ballonGotoState(BalloonTutorial.ST_STAND);
                return
            }
            this.m_x = this.m_displace.x();
            this.m_y = this.m_displace.y();
            !0 == this.m_onCenter ? this.m_x > this.m_game.players[1].x() - BalloonTutorial.CENTER_GAP && this.m_x < this.m_game.players[1].x() + BalloonTutorial.CENTER_GAP && this.m_y > this.m_game.players[1].y() - BalloonTutorial.CENTER_GAP / 2 && this.m_y < this.m_game.players[1].y() + BalloonTutorial.CENTER_GAP / 2 && (this.m_state = BalloonTutorial.ST_WAIT, this.m_game.onCenterWait()) : this.validateCollisionWithPlayer();
            break;
        case BalloonTutorial.ST_SUPER_SHOOT:
            this.m_displaceZ.update(a);
            this.m_displace.update(a);
            this.m_x = this.m_displace.x();
            this.m_y = this.m_displace.y();
            if (!0 == this.ballonInsideGoal() && (this.m_displace.y() < this.m_game.limitMinY + BalloonTutorial.INSIDE_GOAL_GAP || this.m_displace.y() > this.m_game.limitMaxY - BalloonTutorial.INSIDE_GOAL_GAP || 0 > this.m_displace.x() || this.m_displace.x() > this.m_game.width())) {
                this.m_displace.cancel();
                this.ballonGotoState(BalloonTutorial.ST_STAND);
                return
            }
            break;
        case BalloonTutorial.ST_WITH_PLAYER_STAND:
        case BalloonTutorial.ST_WITH_PLAYER_MOVE:
            var b =
                1;
            this.player.isLookingLeft() && (b = -1);
            !0 == this.player.isRunning() && (this.m_dribbleDisplaceCurrent += this.m_dribbleDirection * BalloonTutorial.DRIBBLE_SPEED * a, this.m_dribbleDisplaceCurrent < -BalloonTutorial.DRIBBLE_MAX_DISPLACE && (this.m_dribbleDisplaceCurrent = -BalloonTutorial.DRIBBLE_MAX_DISPLACE, this.m_dribbleDirection = 1), this.m_dribbleDisplaceCurrent > BalloonTutorial.DRIBBLE_MAX_DISPLACE && (this.m_dribbleDisplaceCurrent = BalloonTutorial.DRIBBLE_MAX_DISPLACE, this.m_dribbleDirection = -1));
            this.m_x = this.player.x() +
                b * BalloonTutorial.DRIBBLE_OFFSET + this.m_dribbleDisplaceCurrent;
            this.m_y = this.player.y()
    }!1 == this.m_onGoal && this.m_y > this.m_game.goalMinY && this.m_y < this.m_game.goalMaxY && (this.m_x < this.m_game.limitMinX && (this.m_game.onGoal(), this.m_displaceZ.cancel(), this.m_onSuperShoot = !1, this.m_onGoal = !0), this.m_x > this.m_game.limitMaxX && (this.m_game.onGoal(), this.m_displaceZ.cancel(), this.m_onSuperShoot = !1, this.m_onGoal = !0))
};
BalloonTutorial.prototype.ballonInsideGoal = function() {
    return this.m_y > this.m_game.goalMinY && this.m_y < this.m_game.goalMaxY && (this.m_x < this.m_game.limitMinX || this.m_x > this.m_game.limitMaxX) ? !0 : !1
};
BalloonTutorial.prototype.ballonGotoState = function(a) {
    if (this.m_state != a) {
        this.m_state = a;
        null !== this.m_ballonClip && (this.m_canvas.removeChild(this.m_ballonClip.sprite), this.m_ballonClip = null);
        switch (this.m_state) {
            case BalloonTutorial.ST_STAND:
                this.m_ballonClip = Application.instance.getClip("mcBallStand");
                this.player = null;
                break;
            case BalloonTutorial.ST_FREE_MOVE:
                this.m_ballonClip = Application.instance.getClip("mcBallRun1");
                this.m_displace.resetPosition(this.m_x, this.m_y);
                this.player = null;
                break;
            case BalloonTutorial.ST_FREE_MOVE_SHOOT:
                this.m_ballonClip =
                    Application.instance.getClip("mcBallShoot");
                this.m_displace.resetPosition(this.m_x, this.m_y);
                this.player = null;
                break;
            case BalloonTutorial.ST_WITH_PLAYER_STAND:
                this.m_ballonClip = Application.instance.getClip("mcBallStand");
                this.m_displaceZ.cancel();
                break;
            case BalloonTutorial.ST_WITH_PLAYER_MOVE:
                this.m_ballonClip = Application.instance.getClip("mcBallPlayerRun");
                this.m_displaceZ.cancel();
                break;
            case BalloonTutorial.ST_SUPER_SHOOT:
                this.m_ballonClip = Application.instance.getClip("mcBallSpecialShoot"), this.player =
                    null
        }
        this.m_ballonClip.setX(this.m_x - this.m_game.cameraX());
        this.m_ballonClip.setY(this.m_y - this.m_game.cameraY());
        this.m_canvas.addChild(this.m_ballonClip.sprite);
        this.m_ballonClip.sprite.setScale(BalloonTutorial.BALLOON_SCALE);
        this.setVisible(this.m_visible)
    }
};
BalloonTutorial.prototype.validateCollisionWithPlayer = function() {
    for (var a = 0; a < this.m_game.players.length; ++a)
        if (0 <= this.m_displaceZ.getCurrentHeight() && this.m_x > this.m_game.players[a].x() - BalloonTutorial.SPRITE_TO_PLAYER_GAP && this.m_x < this.m_game.players[a].x() + BalloonTutorial.SPRITE_TO_PLAYER_GAP && this.m_y > this.m_game.players[a].y() - BalloonTutorial.SPRITE_TO_PLAYER_GAP / 2 && this.m_y < this.m_game.players[a].y() + BalloonTutorial.SPRITE_TO_PLAYER_GAP / 2) {
            this.setPlayer(this.m_game.players[a]);
            this.m_game.onSetPlayerByCollision();
            break
        }
};
BalloonTutorial.prototype.onEndDisplace = function() {
    this.ballonGotoState(BalloonTutorial.ST_STAND)
};
BalloonTutorial.prototype.onCompleteJump = function() {
    this.m_displace.updateAcceleration(this.m_lastAcceleration)
};
BalloonTutorial.prototype.free = function() {
    null !== this.m_ballonClip && (this.m_canvas.removeChild(this.m_ballonClip.sprite), this.m_ballonClip = null)
};
BalloonTutorial.CENTER_GAP = 25;
BalloonTutorial.SPRITE_TO_PLAYER_GAP = 25;
BalloonTutorial.SPRITE_TO_SHADOW_GAP = 5;
BalloonTutorial.DRIBBLE_MAX_DISPLACE = 15;
BalloonTutorial.DRIBBLE_OFFSET = 35;
BalloonTutorial.DRIBBLE_SPEED = 0.12;
BalloonTutorial.ELEVATION_IMPULSE = -45;
BalloonTutorial.ACTION_RANGE = 100;
BalloonTutorial.BALLOON_SCALE = 0.7;
BalloonTutorial.ST_SHADOW_STAND = 1;
BalloonTutorial.ST_STAND = 1;
BalloonTutorial.ST_FREE_MOVE = 2;
BalloonTutorial.ST_FREE_MOVE_SHOOT = 3;
BalloonTutorial.ST_WITH_PLAYER_STAND = 4;
BalloonTutorial.ST_WITH_PLAYER_MOVE = 5;
BalloonTutorial.ST_SUPER_SHOOT = 6;
BalloonTutorial.ST_WAIT = 7;
BalloonTutorial.INSIDE_GOAL_GAP = 3;

function EnemyTutorial(a, b, c, d) {
    this.m_x = c;
    this.m_y = d;
    this.skin = "";
    this.m_state = -1;
    this.m_clip = null;
    this.m_game = b;
    this.m_canvas = a;
    this.m_flipX = !0;
    b = Application.config.teams;
    for (c = 0; c < b.length; ++c) b[c].team == Global.enemyTeam && 3 == b[c].idPlayer && (this.skin = b[c].skin);
    this.m_character = new Character(this.m_x, this.m_y, a);
    this.m_character.addState(EnemyTutorial.ST_PLAYER_STAND, this.skin + "_Stand");
    this.m_character.addState(EnemyTutorial.ST_PLAYER_HIT, this.skin + "_Hit");
    this.m_character.onEndAnimation = "onEndAnimation";
    this.m_character.worldActor = this;
    this.gotoState(EnemyTutorial.ST_PLAYER_STAND)
}
EnemyTutorial.prototype.x = function() {
    return this.m_x
};
EnemyTutorial.prototype.y = function() {
    return this.m_y
};
EnemyTutorial.prototype.onHit = function() {
    this.gotoState(EnemyTutorial.ST_PLAYER_HIT)
};
EnemyTutorial.prototype.isLookingLeft = function() {
    return this.m_flipX
};
EnemyTutorial.prototype.isRunning = function() {
    return !1
};
EnemyTutorial.prototype.update = function(a) {
    this.m_character.update(a);
    null !== this.m_clip && (this.m_clip.setX(this.m_x - this.m_game.cameraX()), this.m_clip.setY(this.m_y - this.m_game.cameraY()), this.m_clip.sprite._depth = 1E3 * this.m_y)
};
EnemyTutorial.prototype.onEndAnimation = function(a) {
    switch (a) {
        case EnemyTutorial.ST_PLAYER_HIT:
            this.gotoState(EnemyTutorial.ST_PLAYER_STAND), this.m_game.onEndHitAnimation()
    }
};
EnemyTutorial.prototype.gotoState = function(a) {
    if (this.m_state != a) {
        this.m_state = a;
        var b = 0,
            c = 0;
        null !== this.m_clip && (b = this.m_clip.x, c = this.m_clip.y);
        this.m_character.gotoState(a);
        this.m_clip = this.m_character.actor().clip();
        this.m_clip.setScaleX(this.m_flipX ? -EnemyTutorial.CLIP_SCALE : EnemyTutorial.CLIP_SCALE);
        this.m_clip.setScaleY(EnemyTutorial.CLIP_SCALE);
        this.m_clip.setX(b);
        this.m_clip.setY(c)
    }
};
EnemyTutorial.prototype.free = function() {
    null !== this.m_clip && (this.m_canvas.removeChild(this.m_clip.sprite), this.m_clip = null)
};
EnemyTutorial.CLIP_SCALE = 0.7;
EnemyTutorial.ST_PLAYER_STAND = 1;
EnemyTutorial.ST_PLAYER_HIT = 2;

function GameTutorial(a, b) {
    this.m_canvas = a;
    this.m_worldData = window[b];
    var c = this.m_worldData.properties;
    this.m_mapWidth = c.width;
    this.m_mapHeight = c.height;
    this.limitMinX = c.limitLeft;
    this.limitMaxX = c.limitRight;
    this.limitMinY = c.limitUp;
    this.limitMaxY = c.limitDown;
    this.goalMinY = c.goalYInit;
    this.goalMaxY = c.goalYEnd;
    this.m_currentTutorial = GameTutorial.TUTORIAL_MOVE;
    this.m_clipTutorial = null;
    this.m_clipTutorialPos = new Point(0, 0);
    GameTutorial.instance = this;
    this.m_waitEndTutorial = !1;
    this.m_tapMovementCount =
        GameTutorial.TAP_MOVEMENT_MAX;
    this.m_onWaitRepetition = this.m_waitRepetition = this.m_passes = this.m_sweeps = this.m_moves = 0;
    this.m_timeSwipe = GameTutorial.TIME_SWIPE;
    this.m_movementCountTime = GameTutorial.MOVEMENT_COUNT_TIME;
    this.initCamera();
    this.initLayers();
    this.hud = new HudTutorial;
    this.m_balloon = new BalloonTutorial(this.m_objectsCanvas, this, 0, 0);
    this.players = [];
    this.player = null;
    this.enemies = [];
    this.goals = [];
    this.items = [];
    this.initTutorial();
    this.m_waitSpecialTap = !1;
    this.m_targetPointDrag = GameTutorial.DRAG_TARGET_1;
    this.m_dragMoveCount = 0;
    this.goals.push(new GoalTutorial(this.m_objectsCanvas, this, ActorManagerSoccer.GOAL_LEFT_POSITION.x, ActorManagerSoccer.GOAL_LEFT_POSITION.y, !0));
    this.goals.push(new GoalTutorial(this.m_objectsCanvas, this, ActorManagerSoccer.GOAL_RIGHT_POSITION.x, ActorManagerSoccer.GOAL_RIGHT_POSITION.y, !1));
    this.m_touchInitY = this.m_touchInitX = this.m_mouseHoldTime = this.m_powerUps = 0;
    this.m_lines = [];
    this.m_lastLine = void 0;
    this.m_mouseState = GameTutorial.MOUSE_WAIT;
    this.m_mouseCurrentPos = new Point;
    this.m_clipTap = null;
    this.m_clipTapPosition = new Point(0, 0);
    this.m_swipeDetectMin = GameTutorial.DETECT_SWIPE_MIN;
    Global.data.onTutorial();
    ControlTouch.instance.setMultitouchGame(!1);
    ControlTouch.instance.resetTouchControl()
}
GameTutorial.prototype.balloon = function() {
    return this.m_balloon
};
GameTutorial.prototype.width = function() {
    return this.m_mapWidth
};
GameTutorial.prototype.height = function() {
    return this.m_mapHeight
};
GameTutorial.prototype.selectPlayer = function(a) {
    this.player = a;
    this.player.setSelected(!0)
};
GameTutorial.prototype.onCenterWait = function() {
    this.m_currentTutorial == GameTutorial.TUTORIAL_SPECIAL_SHOT && (this.hud.setTutorialMessage(Application.strings.TUTORIAL_SCISSOR_2), this.players[0].setSelected(!0), this.players[1].setSelected(!0), this.player = this.players[1], this.m_waitSpecialTap = !0, null !== this.m_clipTutorial && (this.m_objectsCanvas.removeChild(this.m_clipTutorial.sprite), this.m_clipTutorial = null), this.m_clipTutorialPos.x = this.players[1].x(), this.m_clipTutorialPos.y = this.players[1].y(), this.m_clipTutorial =
        Application.instance.getClip("gui_tutorial_swipe_goal"), this.m_clipTutorial.setX(this.m_clipTutorialPos.x - this.m_camX), this.m_clipTutorial.setY(this.m_clipTutorialPos.y - this.m_camY), this.m_clipTutorial.sprite._depth = 0, this.m_objectsCanvas.addChild(this.m_clipTutorial.sprite))
};
GameTutorial.prototype.onGetPowerUp = function() {
    this.m_currentTutorial == GameTutorial.TUTORIAL_SUPER_SHOT && (null !== this.m_clipTutorial && (this.m_objectsCanvas.removeChild(this.m_clipTutorial.sprite), this.m_clipTutorial = null), this.m_powerUps++, this.m_mouseState = GameTutorial.MOUSE_WAIT, this.player.cancelDisplace(), 1 == this.m_powerUps && (this.m_clipTutorialPos.x = 800, this.m_clipTutorialPos.y = 370, this.m_clipTutorial = Application.instance.getClip("gui_tutorial_drag02"), this.m_clipTutorial.setX(this.m_clipTutorialPos.x -
        this.m_camX), this.m_clipTutorial.setY(this.m_clipTutorialPos.y - this.m_camY), this.m_clipTutorial.sprite._depth = 0, this.m_objectsCanvas.addChild(this.m_clipTutorial.sprite), this.items.push(new ItemTutorial(this.m_objectsCanvas, this, 870, 440))), 2 == this.m_powerUps && (this.m_clipTutorialPos.x = 960, this.m_clipTutorialPos.y = 360, this.m_clipTutorial = Application.instance.getClip("gui_tutorial_drag"), this.m_clipTutorial.setX(this.m_clipTutorialPos.x - this.m_camX), this.m_clipTutorial.setY(this.m_clipTutorialPos.y -
        this.m_camY), this.m_clipTutorial.sprite._depth = 0, this.m_objectsCanvas.addChild(this.m_clipTutorial.sprite), this.items.push(new ItemTutorial(this.m_objectsCanvas, this, 1030, 290))), 3 == this.m_powerUps && (this.m_clipTutorialPos.x = this.player.x(), this.m_clipTutorialPos.y = this.player.y() - 20, this.m_clipTutorial = Application.instance.getClip("gui_tutorial_swipe_goal"), this.m_clipTutorial.setX(this.m_clipTutorialPos.x - this.m_camX), this.m_clipTutorial.setY(this.m_clipTutorialPos.y - this.m_camY), this.m_clipTutorial.sprite._depth =
        999999, this.m_objectsCanvas.addChild(this.m_clipTutorial.sprite), this.hud.setTutorialMessage(Application.strings.TUTORIAL_SUPER_2), this.m_timeSwipe = GameTutorial.TIME_SWIPE_MAX), this.hud.setSpecialCount(this.m_powerUps))
};
GameTutorial.prototype.onGoal = function() {
    if (this.m_currentTutorial == GameTutorial.TUTORIAL_SHOOT) {
        for (var a = 0; a < this.goals.length; ++a) this.goals[a].onGoal();
        this.ondEndTutorial()
    }
    if (this.m_currentTutorial == GameTutorial.TUTORIAL_SPECIAL_SHOT) {
        for (a = 0; a < this.goals.length; ++a) this.goals[a].onGoal();
        this.ondEndTutorial()
    }
    if (this.m_currentTutorial == GameTutorial.TUTORIAL_SUPER_SHOT) {
        for (a = 0; a < this.goals.length; ++a) this.goals[a].onGoal();
        this.ondEndTutorial()
    }
};
GameTutorial.prototype.onSetPlayerByCollision = function() {
    if (this.m_currentTutorial == GameTutorial.TUTORIAL_PASS && (this.m_passes++, 1 == this.m_passes && (this.players[1].doFlipX(), this.players[0].setSelected(!1), this.players[1].setSelected(!1), this.player = this.players[1], null !== this.m_clipTutorial && (this.m_objectsCanvas.removeChild(this.m_clipTutorial.sprite), this.m_clipTutorial = null), this.m_clipTutorialPos.x = this.players[0].x() + 40, this.m_clipTutorialPos.y = this.players[0].y() + 5, this.m_clipTutorial = Application.instance.getClip("gui_tutorial_tap"),
        this.m_clipTutorial.setX(this.m_clipTutorialPos.x - this.m_camX), this.m_clipTutorial.setY(this.m_clipTutorialPos.y - this.m_camY), this.m_clipTutorial.sprite._depth = 999999, this.m_objectsCanvas.addChild(this.m_clipTutorial.sprite)), this.m_passes >= GameTutorial.MAX_PASSES)) this.ondEndTutorial()
};
GameTutorial.prototype.onEndHitAnimation = function() {
    if (this.m_currentTutorial == GameTutorial.TUTORIAL_SWEEP)
        if (this.m_sweeps++, this.m_sweeps >= GameTutorial.MAX_SWEEPS) this.ondEndTutorial();
        else this.m_waitRepetition = GameTutorial.WAIT_REPETITION, this.m_onWaitRepetition = !0
};
GameTutorial.prototype.onEndPlayerDisplace = function() {};
GameTutorial.prototype.ondEndTutorial = function(a) {
    this.m_waitSpecialTap = !1;
    !1 === ("undefined" === typeof a ? !1 : a) ? (this.hud.showMessage(GameTutorial.MESSAGE_TIME, Application.strings.TUTORIAL_SUCCEED_1, Application.strings.TUTORIAL_SUCCEED_2), this.hud.onEndMessage = "onEndMessageSucceed", this.hud.targetCallback = this, this.m_waitEndTutorial = !0, this.m_mouseState = GameTutorial.MOUSE_WAIT, null !== this.m_clipTutorial && (this.m_objectsCanvas.removeChild(this.m_clipTutorial.sprite), this.m_clipTutorial = null)) : this.gotoGame()
};
GameTutorial.prototype.onEndMessageSucceed = function() {
    this.m_currentTutorial++;
    this.m_currentTutorial > GameTutorial.TOTAL_TUTORIALS ? this.gotoGame() : this.initTutorial()
};
GameTutorial.prototype.gotoGame = function() {
    GuiManager.instance.gotoScreen(GuiManager.SC_DUMMY_LOADER)
};
GameTutorial.prototype.initTutorial = function() {
    ControlTouch.instance.resetTouchControl();
    this.m_balloon.setVisible(!0);
    Global.app.playSound("dko_snd_whistle3");
    this.m_waitEndTutorial = !1;
    for (var a = 0, a = 0; a < this.players.length; ++a) this.players[a].free(), this.players[a] = null;
    this.players = [];
    for (a = 0; a < this.enemies.length; ++a) this.enemies[a].free(), this.enemies[a] = null;
    this.enemies = [];
    for (a = 0; a < this.items.length; ++a) this.items[a].free(), this.items[a] = null;
    this.items = [];
    this.m_timeSwipe = GameTutorial.TIME_SWIPE_MAX;
    null !== this.m_clipTutorial && (this.m_objectsCanvas.removeChild(this.m_clipTutorial.sprite), this.m_clipTutorial = null);
    switch (this.m_currentTutorial) {
        case GameTutorial.TUTORIAL_MOVE:
            this.m_balloon.setVisible(!1);
            this.hud.setTutorialMessage(Application.strings.TUTORIAL_MOVE);
            this.m_clipTutorialPos.x = 520;
            this.m_clipTutorialPos.y = 220;
            this.m_clipTutorial = Application.instance.getClip("gui_tutorial_drag_straight");
            this.m_clipTutorial.setX(this.m_clipTutorialPos.x - this.m_camX);
            this.m_clipTutorial.setY(this.m_clipTutorialPos.y -
                this.m_camY);
            this.m_clipTutorial.sprite._depth = 0;
            this.m_objectsCanvas.addChild(this.m_clipTutorial.sprite);
            this.players.push(new PlayerTutorial(this.m_objectsCanvas, this, 325, 250));
            this.selectPlayer(this.players[0]);
            this.m_balloon.setPlayer(this.players[0]);
            this.m_timeSwipe = GameTutorial.TIME_SWIPE;
            break;
        case GameTutorial.TUTORIAL_DRIBBLE:
            this.hud.setTutorialMessage(Application.strings.TUTORIAL_DRIBBLE);
            this.m_clipTutorialPos.x = 660;
            this.m_clipTutorialPos.y = 300;
            this.m_clipTutorial = Application.instance.getClip("gui_tutorial_drag");
            this.m_clipTutorial.setX(this.m_clipTutorialPos.x - this.m_camX);
            this.m_clipTutorial.setY(this.m_clipTutorialPos.y - this.m_camY);
            this.m_clipTutorial.sprite._depth = 0;
            this.m_objectsCanvas.addChild(this.m_clipTutorial.sprite);
            this.players.push(new PlayerTutorial(this.m_objectsCanvas, this, 550, 420));
            this.selectPlayer(this.players[0]);
            this.enemies.push(new EnemyTutorial(this.m_objectsCanvas, this, 700, 420));
            this.enemies.push(new EnemyTutorial(this.m_objectsCanvas, this, 850, 250));
            this.selectPlayer(this.players[0]);
            this.m_balloon.setPlayer(this.players[0]);
            this.m_timeSwipe = GameTutorial.TIME_SWIPE;
            break;
        case GameTutorial.TUTORIAL_SWEEP:
            this.hud.setTutorialMessage(Application.strings.TUTORIAL_SWEEP);
            this.m_clipTutorialPos.x = 460;
            this.m_clipTutorialPos.y = 340;
            this.m_clipTutorial = Application.instance.getClip("gui_tutorial_swipe");
            this.m_clipTutorial.setX(this.m_clipTutorialPos.x - this.m_camX);
            this.m_clipTutorial.setY(this.m_clipTutorialPos.y - this.m_camY);
            this.m_clipTutorial.sprite._depth = 0;
            this.m_objectsCanvas.addChild(this.m_clipTutorial.sprite);
            this.players.push(new PlayerTutorial(this.m_objectsCanvas, this, 350, 370));
            this.enemies.push(new EnemyTutorial(this.m_objectsCanvas, this, 450, 370));
            this.selectPlayer(this.players[0]);
            this.m_balloon.setPlayer(this.enemies[0]);
            break;
        case GameTutorial.TUTORIAL_PASS:
            this.hud.setTutorialMessage(Application.strings.TUTORIAL_PASS);
            this.m_clipTutorialPos.x = 1120;
            this.m_clipTutorialPos.y = 250;
            this.m_clipTutorial = Application.instance.getClip("gui_tutorial_tap");
            this.m_clipTutorial.setX(this.m_clipTutorialPos.x -
                this.m_camX);
            this.m_clipTutorial.setY(this.m_clipTutorialPos.y - this.m_camY);
            this.m_clipTutorial.sprite._depth = 999999;
            this.m_objectsCanvas.addChild(this.m_clipTutorial.sprite);
            this.players.push(new PlayerTutorial(this.m_objectsCanvas, this, 900, 400));
            this.players.push(new PlayerTutorial(this.m_objectsCanvas, this, 1070, 250));
            this.selectPlayer(this.players[0]);
            this.m_balloon.setPlayer(this.players[0]);
            break;
        case GameTutorial.TUTORIAL_SHOOT:
            this.hud.setTutorialMessage(Application.strings.TUTORIAL_SHOOT);
            this.m_clipTutorialPos.x = 1550;
            this.m_clipTutorialPos.y = 530;
            this.m_clipTutorial = Application.instance.getClip("gui_tutorial_swipe");
            this.m_clipTutorial.setX(this.m_clipTutorialPos.x - this.m_camX);
            this.m_clipTutorial.setY(this.m_clipTutorialPos.y - this.m_camY);
            this.m_clipTutorial.sprite._depth = 0;
            this.m_objectsCanvas.addChild(this.m_clipTutorial.sprite);
            this.players.push(new PlayerTutorial(this.m_objectsCanvas, this, 1450, 570));
            this.selectPlayer(this.players[0]);
            this.m_balloon.setPlayer(this.players[0]);
            break;
        case GameTutorial.TUTORIAL_SPECIAL_SHOT:
            this.hud.setTutorialMessage(Application.strings.TUTORIAL_SCISSOR_1);
            this.m_clipTutorialPos.x = 1215;
            this.m_clipTutorialPos.y = 450;
            this.m_clipTutorial = Application.instance.getClip("gui_tutorial_tap");
            this.m_clipTutorial.setX(this.m_clipTutorialPos.x - this.m_camX);
            this.m_clipTutorial.setY(this.m_clipTutorialPos.y - this.m_camY);
            this.m_clipTutorial.sprite._depth = 999999;
            this.m_objectsCanvas.addChild(this.m_clipTutorial.sprite);
            this.players.push(new PlayerTutorial(this.m_objectsCanvas,
                this, 1140, 160));
            this.players.push(new PlayerTutorial(this.m_objectsCanvas, this, 1175, 450));
            this.selectPlayer(this.players[0]);
            this.m_balloon.setPlayer(this.players[0]);
            this.m_timeSwipe = GameTutorial.TIME_SWIPE_MAX;
            break;
        case GameTutorial.TUTORIAL_SUPER_SHOT:
            this.hud.setTutorialMessage(Application.strings.TUTORIAL_SUPER_1), this.m_clipTutorialPos.x = 600, this.m_clipTutorialPos.y = 350, this.m_clipTutorial = Application.instance.getClip("gui_tutorial_drag"), this.m_clipTutorial.setX(this.m_clipTutorialPos.x - this.m_camX),
            this.m_clipTutorial.setY(this.m_clipTutorialPos.y - this.m_camY), this.m_clipTutorial.sprite._depth = 0, this.m_objectsCanvas.addChild(this.m_clipTutorial.sprite), this.items.push(new ItemTutorial(this.m_objectsCanvas, this, 670, 280)), this.players.push(new PlayerTutorial(this.m_objectsCanvas, this, 500, 430)), this.selectPlayer(this.players[0]), this.m_balloon.setPlayer(this.players[0]), this.hud.showSpecialHud(), this.m_timeSwipe = GameTutorial.TIME_SWIPE
    }
};
GameTutorial.prototype.update = function(a) {
    this.updateCamera(a);
    this.m_bgClip.setX(-this.m_camX);
    this.m_bgClip.setY(-this.m_camY);
    this.hud.update(a);
    var b = 0;
    this.m_balloon.update(a);
    for (b = 0; b < this.players.length; ++b) this.players[b].update(a);
    for (b = 0; b < this.enemies.length; ++b) this.enemies[b].update(a);
    for (b = 0; b < this.items.length; ++b) this.items[b].update(a);
    for (b = 0; b < this.goals.length; ++b) this.goals[b].update(a);
    null !== this.m_clipTutorial && (this.m_clipTutorial.update(a), this.m_currentTutorial == GameTutorial.TUTORIAL_MOVE ?
        (this.m_clipTutorial.setX(this.m_clipTutorialPos.x), this.m_clipTutorial.setY(this.m_clipTutorialPos.y)) : (this.m_clipTutorial.setX(this.m_clipTutorialPos.x - this.m_camX), this.m_clipTutorial.setY(this.m_clipTutorialPos.y - this.m_camY)));
    if (null !== this.m_clipTap && (this.m_clipTap.update(a), this.m_clipTap.setX(this.m_clipTapPosition.x - this.m_camX), this.m_clipTap.setY(this.m_clipTapPosition.y - this.m_camY), this.m_clipTap.currentFrame == this.m_clipTap.totalFrames - 1 && (this.m_canvas.removeChild(this.m_clipTap.sprite),
        this.m_clipTap = null, null !== this.player))) this.player.onEndTapClip();
    if (this.m_lines)
        for (b = 0; b < this.m_lines.length; b++) this.m_lines[b].update(a), this.m_lines[b].isAwaitingDeletion && (this.m_lines[b].free(), this.m_lines[b] = null, this.m_lines.splice(b, 1), b--), 0 === this.m_lines.length && (this.m_lastLine = null);
    !0 == this.m_onWaitRepetition && (this.m_waitRepetition -= a, 0 > this.m_waitRepetition && (this.m_onWaitRepetition = !1, this.initTutorial()));
    if (!0 != this.m_waitEndTutorial) {
        this.m_mouseState == GameTutorial.MOUSE_MOVE &&
            (this.m_mouseHoldTime += a, this.m_mouseHoldTime > this.m_timeSwipe && (this.m_mouseState = GameTutorial.MOUSE_MOVE_HOLD, null !== this.player && this.m_currentTutorial == GameTutorial.TUTORIAL_DRIBBLE && this.m_mouseCurrentPos.x + this.m_camX > this.m_targetPointDrag.x - GameTutorial.GAP_TAP_SPRITE && this.m_mouseCurrentPos.x + this.m_camX < this.m_targetPointDrag.x + GameTutorial.GAP_TAP_SPRITE && this.m_mouseCurrentPos.y + this.m_camY > this.m_targetPointDrag.y - GameTutorial.GAP_TAP_SPRITE && this.m_mouseCurrentPos.y + this.m_camY < this.m_targetPointDrag.y +
            GameTutorial.GAP_TAP_SPRITE && (this.player.gotoPosition(this.m_mouseCurrentPos.x + this.m_camX, this.m_mouseCurrentPos.y + this.m_camY, !1), this.player.onHoldMove()), null !== this.player && this.m_currentTutorial == GameTutorial.TUTORIAL_SUPER_SHOT && this.m_mouseCurrentPos.x + this.m_camX > this.items[this.m_powerUps].x() - GameTutorial.GAP_TAP_SPRITE && this.m_mouseCurrentPos.x + this.m_camX < this.items[this.m_powerUps].x() + GameTutorial.GAP_TAP_SPRITE && this.m_mouseCurrentPos.y + this.m_camY > this.items[this.m_powerUps].y() -
            GameTutorial.GAP_TAP_SPRITE && this.m_mouseCurrentPos.y + this.m_camY < this.items[this.m_powerUps].y() + GameTutorial.GAP_TAP_SPRITE && this.player.gotoPosition(this.m_mouseCurrentPos.x + this.m_camX, this.m_mouseCurrentPos.y + this.m_camY, !1)));
        if (this.m_mouseState == GameTutorial.MOUSE_MOVE_HOLD) {
            null !== this.player && this.m_currentTutorial == GameTutorial.TUTORIAL_DRIBBLE && (this.m_mouseCurrentPos.x + this.m_camX > this.m_targetPointDrag.x - GameTutorial.GAP_TAP_SPRITE && this.m_mouseCurrentPos.x + this.m_camX < this.m_targetPointDrag.x +
                GameTutorial.GAP_TAP_SPRITE && this.m_mouseCurrentPos.y + this.m_camY > this.m_targetPointDrag.y - GameTutorial.GAP_TAP_SPRITE && this.m_mouseCurrentPos.y + this.m_camY < this.m_targetPointDrag.y + GameTutorial.GAP_TAP_SPRITE && (this.player.updateHoldMove(), this.player.gotoPosition(this.m_mouseCurrentPos.x + this.m_camX, this.m_mouseCurrentPos.y + this.m_camY, !1)), null !== this.player && this.m_currentTutorial == GameTutorial.TUTORIAL_MOVE && (this.player.gotoPosition(this.m_mouseCurrentPos.x + this.m_camX, this.m_mouseCurrentPos.y +
                    this.m_camY, !1), this.player.onHoldMove()));
            if (null !== this.player && this.m_currentTutorial == GameTutorial.TUTORIAL_MOVE && (this.player.updateHoldMove(), this.player.gotoPosition(this.m_mouseCurrentPos.x + this.m_camX, this.m_mouseCurrentPos.y + this.m_camY, !1), this.m_movementCountTime -= a, 0 > this.m_movementCountTime)) this.ondEndTutorial();
            null !== this.player && this.m_currentTutorial == GameTutorial.TUTORIAL_SUPER_SHOT && this.m_mouseCurrentPos.x + this.m_camX > this.items[this.m_powerUps].x() - GameTutorial.GAP_TAP_SPRITE &&
                this.m_mouseCurrentPos.x + this.m_camX < this.items[this.m_powerUps].x() + GameTutorial.GAP_TAP_SPRITE && this.m_mouseCurrentPos.y + this.m_camY > this.items[this.m_powerUps].y() - GameTutorial.GAP_TAP_SPRITE && this.m_mouseCurrentPos.y + this.m_camY < this.items[this.m_powerUps].y() + GameTutorial.GAP_TAP_SPRITE && this.player.gotoPosition(this.m_mouseCurrentPos.x + this.m_camX, this.m_mouseCurrentPos.y + this.m_camY, !1)
        }
        if (null !== this.player && this.m_currentTutorial == GameTutorial.TUTORIAL_DRIBBLE && this.player.x() > this.m_targetPointDrag.x -
            GameTutorial.GAP_TAP_SPRITE && this.player.x() < this.m_targetPointDrag.x + GameTutorial.GAP_TAP_SPRITE && this.player.y() > this.m_targetPointDrag.y - GameTutorial.GAP_TAP_SPRITE && this.player.y() < this.m_targetPointDrag.y + GameTutorial.GAP_TAP_SPRITE && (this.m_dragMoveCount++, 1 == this.m_dragMoveCount && (this.m_targetPointDrag = GameTutorial.DRAG_TARGET_2, null !== this.m_clipTutorial && (this.m_objectsCanvas.removeChild(this.m_clipTutorial.sprite), this.m_clipTutorial = null), this.m_clipTutorialPos.x = 830, this.m_clipTutorialPos.y =
                330, this.m_clipTutorial = Application.instance.getClip("gui_tutorial_drag02"), this.m_clipTutorial.setX(this.m_clipTutorialPos.x - this.m_camX), this.m_clipTutorial.setY(this.m_clipTutorialPos.y - this.m_camY), this.m_clipTutorial.sprite._depth = 0, this.m_objectsCanvas.addChild(this.m_clipTutorial.sprite)), 2 == this.m_dragMoveCount)) this.ondEndTutorial()
    }
};
GameTutorial.prototype.processTap = function(a) {
    !0 != this.m_waitEndTutorial && (null === this.m_clipTap && (this.m_clipTap = Application.instance.getClip("mcPointer"), this.m_canvas.addChild(this.m_clipTap.sprite), this.m_clipTap.sprite._depth = 999999), this.m_clipTapPosition.x = a.offsetX + this.m_camX, this.m_clipTapPosition.y = a.offsetY + this.m_camY, this.m_clipTap.setX(this.m_clipTapPosition.x - this.m_camX), this.m_clipTap.setY(this.m_clipTapPosition.y - this.m_camY), null !== this.player && this.m_currentTutorial == GameTutorial.TUTORIAL_PASS &&
        (0 == this.m_passes && a.offsetX + this.m_camX > this.players[1].x() - GameTutorial.GAP_TAP_SPRITE && a.offsetX + this.m_camX < this.players[1].x() + GameTutorial.GAP_TAP_SPRITE && a.offsetY + this.m_camY > this.players[1].y() - 3 * GameTutorial.GAP_TAP_SPRITE && a.offsetY + this.m_camY < this.players[1].y() && (this.player.onPass(0), this.player = null), 1 == this.m_passes && a.offsetX + this.m_camX > this.players[0].x() - GameTutorial.GAP_TAP_SPRITE && a.offsetX + this.m_camX < this.players[0].x() + GameTutorial.GAP_TAP_SPRITE && a.offsetY + this.m_camY > this.players[0].y() -
            3 * GameTutorial.GAP_TAP_SPRITE && a.offsetY + this.m_camY < this.players[0].y() && (this.player.onPass(1), this.player = null)), null !== this.player && this.m_currentTutorial == GameTutorial.TUTORIAL_PASS && a.offsetX + this.m_camX > this.player.x() - GameTutorial.GAP_TAP_SPRITE && a.offsetX + this.m_camX < this.player.x() + GameTutorial.GAP_TAP_SPRITE && a.offsetY + this.m_camY > this.player.y() - 2 * GameTutorial.GAP_TAP_SPRITE && a.offsetY + this.m_camY < this.player.y() && (this.hud.setSpecialCount(0), this.player.onSuperShoot()), null !== this.player &&
        this.m_currentTutorial == GameTutorial.TUTORIAL_SPECIAL_SHOT && a.offsetX + this.m_camX > this.players[1].x() - GameTutorial.GAP_TAP_SPRITE && a.offsetX + this.m_camX < this.players[1].x() + GameTutorial.GAP_TAP_SPRITE && a.offsetY + this.m_camY > this.players[1].y() - 3 * GameTutorial.GAP_TAP_SPRITE && a.offsetY + this.m_camY < this.players[1].y() && (this.player.onCenter(), this.player = null))
};
GameTutorial.prototype.processSwipe = function(a) {
    null !== this.player && this.m_currentTutorial == GameTutorial.TUTORIAL_SWEEP && (this.player.onSweep(), this.m_balloon.setPlayer(this.player), this.enemies[0].onHit(), null !== this.m_clipTutorial && (this.m_objectsCanvas.removeChild(this.m_clipTutorial.sprite), this.m_clipTutorial = null), Global.app.playSound("dko_snd_tackle"), Global.app.playSound("dko_snd_tackle_hit"));
    Math.abs(a.offsetX - this.m_touchInitX);
    Math.abs(a.offsetY - this.m_touchInitY);
    a = Math.atan2(a.offsetY -
        this.m_touchInitY, a.offsetX - this.m_touchInitX);
    for (a *= 180 / Math.PI; 0 > a;) a += 360;
    a %= 360;
    null !== this.player && this.m_currentTutorial == GameTutorial.TUTORIAL_SHOOT && 270 < a && 360 > a && (this.player.onShoot(), this.player = null, null !== this.m_clipTutorial && (this.m_objectsCanvas.removeChild(this.m_clipTutorial.sprite), this.m_clipTutorial = null));
    null !== this.player && !0 == this.m_waitSpecialTap && this.m_currentTutorial == GameTutorial.TUTORIAL_SPECIAL_SHOT && (this.player.onSpecialShoot(), null !== this.m_clipTutorial && (this.m_objectsCanvas.removeChild(this.m_clipTutorial.sprite),
        this.m_clipTutorial = null));
    this.m_currentTutorial == GameTutorial.TUTORIAL_SUPER_SHOT && this.m_powerUps >= GameTutorial.POWERUPS_MAX && (this.hud.setSpecialCount(0), this.player.onSuperShoot(), null !== this.m_clipTutorial && (this.m_objectsCanvas.removeChild(this.m_clipTutorial.sprite), this.m_clipTutorial = null))
};
GameTutorial.prototype.onMouseMove = function(a) {
    var b = a.offsetX;
    a = a.offsetY;
    this.m_mouseState == GameTutorial.MOUSE_MOVE && (this.m_lastLine ? (this.m_lastLine.onMouseMove(b, a), this.m_lastLine.endDraw && this.createLine(b, a)) : this.createLine(b, a));
    this.m_mouseCurrentPos.x = b;
    this.m_mouseCurrentPos.y = a
};
GameTutorial.prototype.onMouseDown = function(a) {
    this.m_mouseState = GameTutorial.MOUSE_MOVE;
    for (var b = 0; b < this.m_lines.length; b++) this.m_lines[b].setAwaitingDelete(!0);
    this.m_touchInitX = a.offsetX;
    this.m_touchInitY = a.offsetY;
    this.m_mouseHoldTime = 0
};
GameTutorial.prototype.onMouseUp = function(a) {
    if (this.m_mouseState == GameTutorial.MOUSE_MOVE)
        if (Math.abs(a.offsetX - this.m_touchInitX) < GameTutorial.TAP_DISTANCE && Math.abs(a.offsetY - this.m_touchInitY) < GameTutorial.TAP_DISTANCE) this.processTap(a);
        else {
            var b = Math.abs(a.offsetX - this.m_touchInitX),
                c = Math.abs(a.offsetY - this.m_touchInitY);
            Math.sqrt(b * b + c * c) > this.m_swipeDetectMin && this.processSwipe(a)
        }
    null !== this.player && this.m_mouseState == GameTutorial.MOUSE_MOVE_HOLD && this.player.cancelHoldMove();
    if (null !==
        this.player && this.m_mouseState == GameTutorial.MOUSE_MOVE_HOLD && (this.player.cancelHoldMove(), null !== this.player && this.m_currentTutorial == GameTutorial.TUTORIAL_MOVE && (this.m_moves++, this.m_moves >= GameTutorial.MAX_MOVES))) this.ondEndTutorial();
    this.m_mouseState = GameTutorial.MOUSE_WAIT
};
GameTutorial.prototype.onMouseOutWindow = function(a) {
    this.onMouseUp(a)
};
GameTutorial.prototype.createLine = function(a, b) {
    this.m_lastLine = new DrawLine(a, b);
    this.m_canvas.addChild(this.m_lastLine.clip().sprite);
    this.m_lastLine.clip().parent = this.m_canvas;
    this.m_lines.push(this.m_lastLine)
};
GameTutorial.prototype.onKeyDown = function(a) {};
GameTutorial.prototype.onKeyUp = function(a) {};
GameTutorial.prototype.cameraX = function() {
    return this.m_camX
};
GameTutorial.prototype.cameraY = function() {
    return this.m_camY
};
GameTutorial.prototype.initCamera = function() {
    var a = this.m_worldData.properties;
    this.m_camY = this.m_camX = 0;
    this.m_camWidth = a.cameraWidth;
    this.m_camHeight = a.cameraHeight;
    this.m_camLeftLimit = Math.round(a.cameraXMin * this.m_camWidth);
    this.m_camRightLimit = Math.round(a.cameraXMax * this.m_camWidth);
    this.m_camUpLimit = Math.round(a.cameraYMin * this.m_camHeight);
    this.m_camDownLimit = Math.round(a.cameraYMax * this.m_camHeight)
};
GameTutorial.prototype.updateCamera = function(a) {
    this.m_camX + this.m_camLeftLimit > this.m_balloon.x() && (this.m_camX = this.m_balloon.x() - this.m_camLeftLimit);
    this.m_camX + this.m_camRightLimit < this.m_balloon.x() && (this.m_camX = this.m_balloon.x() - this.m_camRightLimit);
    this.m_camY + this.m_camUpLimit > this.m_balloon.y() && (this.m_camY = this.m_balloon.y() - this.m_camUpLimit);
    this.m_camY + this.m_camDownLimit < this.m_balloon.y() && (this.m_camY = this.m_balloon.y() - this.m_camDownLimit);
    0 > this.m_camX ? this.m_camX = 0 : this.m_camX >
        this.m_mapWidth - this.m_camWidth && (this.m_camX = this.m_mapWidth - this.m_camWidth);
    0 > this.m_camY ? this.m_camY = 0 : this.m_camY > this.m_mapHeight - this.m_camHeight && (this.m_camY = this.m_mapHeight - this.m_camHeight)
};
GameTutorial.prototype.initLayers = function() {
    this.m_bgClip = null;
    for (var a = this.m_worldData.layerTypes, b = 0; b < a.length; b++) "background" == a[b].name && (this.m_bgClip = Application.instance.getDisplayObject(a[b].image[0]), this.m_canvas.addChild(this.m_bgClip));
    this.m_objectsCanvas = Application.instance.addDisplayContainer();
    this.m_canvas.addChild(this.m_objectsCanvas);
    this.m_objectsCanvas._sorted = !0
};
GameTutorial.prototype.free = function() {
    this.m_canvas.removeChild(this.m_objectsCanvas);
    this.m_canvas.removeChild(this.m_bgClip);
    for (var a = 0; a < this.goals.length; ++a) this.goals[a].free(), this.goals[a] = null;
    this.goals = []
};
GameTutorial.DRAG_TARGET_1 = new Point(730, 230);
GameTutorial.DRAG_TARGET_2 = new Point(900, 400);
GameTutorial.WAIT_REPETITION = 1E3;
GameTutorial.MAX_PASSES = 2;
GameTutorial.MAX_SWEEPS = 2;
GameTutorial.MAX_MOVES = 3;
GameTutorial.GAP_ITEM = 40;
GameTutorial.GAP_TAP_SPRITE = 30;
GameTutorial.MESSAGE_TIME = 2E3;
GameTutorial.TOTAL_TUTORIALS = 7;
GameTutorial.TUTORIAL_MOVE = 1;
GameTutorial.TUTORIAL_DRIBBLE = 2;
GameTutorial.TUTORIAL_SWEEP = 3;
GameTutorial.TUTORIAL_PASS = 4;
GameTutorial.TUTORIAL_SHOOT = 5;
GameTutorial.TUTORIAL_SPECIAL_SHOT = 6;
GameTutorial.TUTORIAL_SUPER_SHOT = 7;
GameTutorial.DETECT_SWIPE_MIN = 20;
GameTutorial.MOUSE_WAIT = 1;
GameTutorial.MOUSE_MOVE = 2;
GameTutorial.MOUSE_MOVE_HOLD = 3;
GameTutorial.TAP_DISTANCE = 20;
GameTutorial.TIME_SWIPE = 200;
GameTutorial.TIME_SWIPE_MAX = 1E3;
GameTutorial.TAP_MOVEMENT_MAX = 2;
GameTutorial.POWERUPS_MAX = 3;
GameTutorial.MOVEMENT_COUNT_TIME = 1500;

function HudTutorial(a, b) {
    SScreen.call(this, a, b);
    this.instructionsMsg = $(".ui_hud_tutorialtext");
    this.m_messageTime = -1;
    this.m_showingMessage = !1;
    this.targetCallback = this.onEndMessage = null
}
goog.inherits(HudTutorial, SScreen);
HudTutorial.prototype.setGuiHTML = function() {
    this.css = " .ui_general_screen_bg {  top:0;  left:0;  width: 750px;  height: 500px;  background:url(media/images/ui_images/hud/gui_hud.png); } .ui_hud_button_pause {  position: absolute;  top: 12px;  left: 675px;  width: 60px;  height: 60px;  background: url(media/images/ui_images/buttons/gui_buttons_icons03.png) no-repeat right top;  cursor: pointer; } .ui_hud_button_pause.b1 {  background-position: -120px 0px; } .ui_hud_button_pause.b1:hover {  background-position: -180px 0px; } .ui_hud_special {  position: absolute;  pointer-events: none;  width: 37px;  height: 38px;  top: 23px;  background: url(media/images/ui_images/hud/gui_hud_special.png);  background-position: 0px 0px; } .ui_hud_special.s1 {  left: 399px; } .ui_hud_special.s2 {  left: 447px; } .ui_hud_special.s3 {  left: 497px; } .ui_hud_specialbase {  position: absolute;  pointer-events: none;  width: 155px;  height: 55px;  top: 15px;  background: url(media/images/ui_images/hud/gui_hud_special_base.png);  left: 388px } .ui_hud_specialfx {  position: absolute;  pointer-events: none;  width: 296px;  height: 161px;  top: 0px;  left: 322px;  background: url(media/images/ui_images/hud/gui_hud_special_fx.png);  background-position: 0px 0px; } .ui_hud_support {  position: absolute;  pointer-events: none;  width: 347px;  height: 64px;  left: 9px;  top: 15px;  background: url(media/images/ui_images/hud/gui_hud_support.png);  opacity: 0.8; } .ui_hud_timerbase {  position: absolute;  pointer-events: none;  width: 95px;  height: 52px;  left: 270px;  top: 28px;  background: url(media/images/ui_images/hud/gui_hud_timer_fx.png);  opacity: 0.8; } .ui_hud_timerextra {  position: absolute;  pointer-events: none;  width: 135px;  height: 96px;  left: 249px;  top: 9px;  background: url(media/images/ui_images/hud/gui_hud_timer_fx2.png);  opacity: 0.8; } .ui_hud_point {  position: absolute;  left: 236px;  width: 45px;  height: 34px;  color: #ffffff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 20px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always; } .ui_hud_point.p1 {  top: 21px; } .ui_hud_point.p2 {  top: 48px; } .ui_hud_teamname {  position: absolute;  left: 50px;  width: 154px;  height: 18px;  color: #ffffff;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 14px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always; } .ui_hud_teamname.t1 {  top: 27px; } .ui_hud_teamname.t2 {  top: 52px; } .ui_hud_matchtime{  position: absolute;  top: 25px;  width: 65px;  height: 27px;  color: #242f39;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 18px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 285px; } .ui_hud_timer {  position: absolute;  top: 45px;  width: 26px;  height: 28px;  color: #242f39;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 18px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 285px; } .ui_hud_timer.t1 {  position: absolute;  left: 288px; } .ui_hud_timer.t2 {  position: absolute;  left: 305px; } .ui_hud_timer.t3 {  position: absolute;  left: 319px; } .ui_hud_confetti {  position: absolute;  width: 161px;  height: 442px;  top: 0px; } .ui_hud_confetti.c1 {  background: url('media/images/ui_images/hud/gui_hud_confetti01.png') no-repeat scroll 0 0 rgba(0, 0, 0, 0);  left: 0px; } .ui_hud_confetti.c2 {  background: url('media/images/ui_images/hud/gui_hud_confetti02.png') no-repeat scroll 0 0 rgba(0, 0, 0, 0);  width: 124px;  height: 350px;  left: 626px; } .ui_hud_pinleft {  position: absolute;  width: 31px;  height: 27px;  background: url('media/images/ui_images/hud/gui_hud_pin.png') no-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 19px;  left: 14px; } .ui_hud_pinleft.p1 {  background-position: 0px 0px; } .ui_hud_pinleft.p2 {  background-position: -31px  0px; } .ui_hud_pinleft.p3 {  background-position: -62px  0px; } .ui_hud_pinleft.p4 {  background-position: -93px  0px; } .ui_hud_pinleft.p5 {  background-position: -124px  0px; } .ui_hud_pinleft.p6 {  background-position: -155px  0px; } .ui_hud_pinright {  position: absolute;  width: 31px;  height: 27px;  background: url('media/images/ui_images/hud/gui_hud_pin.png') no-repeat scroll 0 0 rgba(0, 0, 0, 0);  background-position: 0px  0px;  top: 47px;  left: 14px; } .ui_hud_pinright.p1 {  background-position: 0px 0px; } .ui_hud_pinright.p2 {  background-position: -31px  0px; } .ui_hud_pinright.p3 {  background-position: -62px  0px; } .ui_hud_pinright.p4 {  background-position: -93px  0px; } .ui_hud_pinright.p5 {  background-position: -124px  0px; } .ui_hud_pinright.p6 {  background-position: -155px  0px; } .ui_hud_tutorialbase {  position: absolute;  pointer-events: none;  width: 369px;  height: 101px;  left: 0px;  top: 0px;  background: url(media/images/ui_images/popups/gui_popup_tutorial_base.png); } .ui_hud_tutorialtext {  position: absolute;  left: 18px;  top: 20px;  top: 21px;  width: 324px;  height: 56px;  color: #000000;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 15px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always; } .ui_hud_messagetext {  position: absolute;  left: 110px;  top: 197px;  width: 566px;  height: 51px;  color: #005189;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 38px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always; } .ui_hud_messagetext2 {  position: absolute;  left: 169px;  top: 180px;  width: 411px;  height: 77px;  color: #005189;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 32px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always; } .ui_hud_messagepoint1{  position: absolute;  top: 191px;  width: 45px;  height: 70px;  color: #005189;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 44px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 295px; } .ui_hud_messagepoint2 {  position: absolute;  top: 191px;  width: 45px;  height: 70px;  color: #005189;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 44px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 416px; } .ui_hud_messagepoint3 {  position: absolute;  top: 190px;  width: 45px;  height: 70px;  color: #005189;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 44px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  left: 366px; } .ui_hud_messagebase {  position: absolute;  pointer-events: none;  width: 565px;  height: 208px;  left: 94px;  top: 119px;  background: url(media/images/ui_images/popups/gui_popups_message1.png); } .ui_hud_fan {  position: absolute;  left: 0px;  top: 294px;  width: 219px;  height: 206px;  display: table-cell; }  .ui_hud_fan.f1 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan01.png); }  .ui_hud_fan.f2 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan02.png); } .ui_hud_fan.f3 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan03.png); } .ui_hud_fan.f4 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan04.png); } .ui_hud_fan.f5 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan05.png); } .ui_hud_fan.f6 {  background: url(media/images/ui_images/screens/gui_screens_endlevel_fan06.png); }  .ui_hud_fan02 {  position: absolute;  width: 219px;  height: 206px;  top: 294px;  left: 531px;  display: table-cell; } .ui_hud_fan02.f1 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character01.png); }  .ui_hud_fan02.f2 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character02.png); } .ui_hud_fan02.f3 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character03.png); } .ui_hud_fan02.f4 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character04.png); } .ui_hud_fan02.f5 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character05.png); } .ui_hud_fan02.f6 {  background: url(media/images/ui_images/screens/gui_screens_dailymatch_championship_character06.png); } .ui_hud_citytitle {  position: absolute;  left: 0px;  top: 432px;  width: 750px;  height: 46px;  color: #adfcff;  font-family: 'bamtangvicunaferozgordidemiBd';  font-size: 32px;  display: table-cell;  vertical-align: middle;  text-align: center;  font-smooth: always;  padding-top: 5px; } .ui_hud_trophies_text {  position: absolute;  left: 310px;  width: 260px;  height: 23px;  color: #000000;  font-family: 'bamtangguanacogenialgordisBd';  font-size: 16px;  display: table-cell;  vertical-align: middle;  text-align: left;  font-smooth: always; } .ui_hud_trophies_text.t1 {  top: 423px;  color: #005189;  font-size: 18px; } .ui_hud_trophies_text.t2 {  top: 442px; } .ui_hud_trophy {  position: absolute;  top: 400px;  left: 210px;  width: 100px;  height: 100px;  background: url(media/images/ui_images/buttons/gui_buttons_trophies.png) no-repeat scroll 0 0 rgba(0, 0, 0, 0);  cursor: pointer; } .ui_hud_trophy.t1 {  background-position: 0px 0px; } .ui_hud_trophy.t2 {  background-position: -200px 0px; } .ui_hud_trophy.t3 {  background-position: -400px 0px; } .ui_hud_trophy.t4 {  background-position: -600px 0px; } .ui_hud_trophy.t5 {  background-position: -800px 0px; } .ui_hud_trophies_base {  position: absolute;  pointer-events: none;  left: 219px;  top: 407px;  width: 357px;  height: 87px;  background: url(media/images/ui_images/hud/gui_hud_trophies_base.png); } .ui_hud_bg {  top: 0;  left: 0;  width: 750px;  height: 500px;  background-color: #000000;  opacity: 1; }";
    this.html =
        "  \x3c!--<div class='ui_general_screen_bg'>--\x3e  <div class='ui_hud_trophies_base'></div>  <div class='ui_hud_trophies_text t1'>TITLE</div>  <div class='ui_hud_trophies_text t2'>TEXT</div>  <div class='ui_hud_trophy t1' id='btn_trophy1'></div>  <div class='ui_hud_trophy t2' id='btn_trophy2'></div>  <div class='ui_hud_trophy t3' id='btn_trophy3'></div>  <div class='ui_hud_trophy t4' id='btn_trophy4'></div>  <div class='ui_hud_trophy t5' id='btn_trophy5'></div>  <div class='ui_hud_confetti c1'></div>   <div class='ui_hud_confetti c2'></div>  <div class='ui_hud_fan f1'></div>  <div class='ui_hud_fan f2'></div>  <div class='ui_hud_fan f3'></div>  <div class='ui_hud_fan f4'></div>  <div class='ui_hud_fan f5'></div>   <div class='ui_hud_fan f6'></div>  <div class='ui_hud_fan02 f1'></div>  <div class='ui_hud_fan02 f2'></div>  <div class='ui_hud_fan02 f3'></div>  <div class='ui_hud_fan02 f4'></div>  <div class='ui_hud_fan02 f5'></div>   <div class='ui_hud_fan02 f6'></div>   <div class='ui_hud_support'></div>  <div class='ui_hud_pinleft p1' id='img_pinl01'></div>  <div class='ui_hud_pinleft p2' id='img_pinl02'></div>  <div class='ui_hud_pinleft p3' id='img_pinl03'></div>  <div class='ui_hud_pinleft p4' id='img_pinl04'></div>  <div class='ui_hud_pinleft p5' id='img_pinl05'></div>  <div class='ui_hud_pinleft p6' id='img_pinl06'></div>  <div class='ui_hud_pinright p1' id='img_pinr01'></div>  <div class='ui_hud_pinright p2' id='img_pinr02'></div>  <div class='ui_hud_pinright p3' id='img_pinr03'></div>  <div class='ui_hud_pinright p4' id='img_pinr04'></div>  <div class='ui_hud_pinright p5' id='img_pinr05'></div>  <div class='ui_hud_pinright p6' id='img_pinr06'></div>  <div class='ui_hud_point p1'>00</div>  <div class='ui_hud_point p2'>00</div>  <div class='ui_hud_teamname t1'>TEAM NAME01</div>  <div class='ui_hud_teamname t2'>TEAM NAME02</div>  <div class='ui_hud_timerbase'></div>  <div class='ui_hud_timerextra'></div>  <div class='ui_hud_timer t1'>00</div> <div class='ui_hud_timer t2'>:</div>  <div class='ui_hud_timer t3'>00</div>  <div class='ui_hud_matchtime'>1T</div>  <div class='ui_hud_specialbase'></div>  <div class='ui_hud_specialoff i2'></div>   <div class='ui_hud_specialoff i3'></div>  <div class='ui_hud_special s1'></div>  <div class='ui_hud_special s2'></div>  <div class='ui_hud_special s3'></div>  <div class='ui_hud_specialfx'></div>  <div class='ui_hud_button_pause b1' id='btn_pause'></div>  <div class='ui_general_button_skip b1' id='btn_skip'></div>    <div class='ui_hud_tutorialbase'>   <div class='ui_hud_tutorialtext'>tutorial</div>  </div>  <div class='ui_hud_messagebase'></div>  <div class='ui_hud_messagetext'>START</div>  <div class='ui_hud_messagetext2'>MATCH COMPLETED</div>    <div class='ui_hud_messagepoint1'>00</div>   <div class='ui_hud_messagepoint2'>00</div>   <div class='ui_hud_messagepoint3'>-</div>   <div class='ui_hud_bg'></div>  <div class='ui_hud_citytitle'>CITY</div>";
    HudTutorial.superClass_.setGuiHTML.call(this)
};
HudTutorial.prototype.init = function() {
    HudTutorial.superClass_.init.call(this);
    this.addClickListener("btn_skip");
    $(".ui_hud_trophies_base").css("display", "none");
    $(".ui_hud_trophies_text.t1").css("display", "none");
    $(".ui_hud_trophies_text.t2").css("display", "none");
    $(".ui_hud_trophy.t1").css("display", "none");
    $(".ui_hud_trophy.t2").css("display", "none");
    $(".ui_hud_trophy.t3").css("display", "none");
    $(".ui_hud_trophy.t4").css("display", "none");
    $(".ui_hud_trophy.t5").css("display", "none");
    $(".ui_hud_messagebase").css("display",
        "none");
    $(".ui_hud_messagetext").html("");
    $(".ui_hud_messagetext2").html("");
    $(".ui_hud_messagetext").css("pointer-events", "none");
    $(".ui_hud_messagetext2").css("pointer-events", "none");
    $(".ui_hud_confetti.c1").css("display", "none");
    $(".ui_hud_confetti.c2").css("display", "none");
    $(".ui_hud_fan.f1").css("display", "none");
    $(".ui_hud_fan.f2").css("display", "none");
    $(".ui_hud_fan.f3").css("display", "none");
    $(".ui_hud_fan.f4").css("display", "none");
    $(".ui_hud_fan.f5").css("display", "none");
    $(".ui_hud_fan.f6").css("display",
        "none");
    $(".ui_hud_fan02.f1").css("display", "none");
    $(".ui_hud_fan02.f2").css("display", "none");
    $(".ui_hud_fan02.f3").css("display", "none");
    $(".ui_hud_fan02.f4").css("display", "none");
    $(".ui_hud_fan02.f5").css("display", "none");
    $(".ui_hud_fan02.f6").css("display", "none");
    $(".ui_hud_specialoff.i1").css("display", "none");
    $(".ui_hud_specialoff.i2").css("display", "none");
    $(".ui_hud_specialoff.i3").css("display", "none");
    $(".ui_hud_special.s1").css("display", "none");
    $(".ui_hud_special.s2").css("display",
        "none");
    $(".ui_hud_special.s3").css("display", "none");
    $(".ui_hud_support").css("display", "none");
    $(".ui_hud_pinleft.p1").css("display", "none");
    $(".ui_hud_pinleft.p2").css("display", "none");
    $(".ui_hud_pinleft.p3").css("display", "none");
    $(".ui_hud_pinleft.p4").css("display", "none");
    $(".ui_hud_pinleft.p5").css("display", "none");
    $(".ui_hud_pinleft.p6").css("display", "none");
    $(".ui_hud_pinright.p1").css("display", "none");
    $(".ui_hud_pinright.p2").css("display", "none");
    $(".ui_hud_pinright.p3").css("display",
        "none");
    $(".ui_hud_pinright.p4").css("display", "none");
    $(".ui_hud_pinright.p5").css("display", "none");
    $(".ui_hud_pinright.p6").css("display", "none");
    $(".ui_hud_point.p1").css("display", "none");
    $(".ui_hud_point.p2").css("display", "none");
    $(".ui_hud_teamname.t1").css("display", "none");
    $(".ui_hud_teamname.t2").css("display", "none");
    $(".ui_hud_timer").css("display", "none");
    $(".ui_hud_messagepoint1").css("display", "none");
    $(".ui_hud_messagepoint2").css("display", "none");
    $(".ui_hud_messagepoint3").css("display",
        "none");
    $(".ui_hud_button_pause.b1").css("display", "none");
    $(".ui_hud_buttons_sound.s1").css("display", "none");
    $(".ui_hud_buttons_sound.s2").css("display", "none");
    $(".ui_hud_timerextra").css("display", "none");
    $(".ui_hud_specialfx").css("display", "none");
    $(".ui_hud_bg").css("opacity", 0);
    $(".ui_hud_bg").css("display", "none");
    $(".ui_hud_matchtime").css("display", "none");
    $(".ui_hud_specialbase").css("display", "none");
    $(".ui_hud_bg").css("pointer-events", "none");
    $(".ui_hud_timerbase").css("display", "none");
    $(".ui_hud_citytitle").css("display", "none")
};
HudTutorial.prototype.update = function(a) {
    HudTutorial.superClass_.update.call(this, a);
    !0 === this.m_showingMessage && (this.m_messageTime -= a, 0 > this.m_messageTime && (this.m_showingMessage = !1, $(".ui_hud_messagebase").css("display", "none"), $(".ui_hud_messagetext").html(""), $(".ui_hud_messagetext2").html(""), null !== this.onEndMessage && null !== this.targetCallback && (this.targetCallback[this.onEndMessage](), this.onEndMessage = this.targetCallback = null)))
};
HudTutorial.prototype.onClick = function(a) {
    switch (a.id) {
        case "btn_skip":
            Global.app.playSound("dko_snd_ui_buttons"), GameTutorial.instance.ondEndTutorial(!0)
    }
};
HudTutorial.prototype.showSpecialHud = function() {
    $(".ui_hud_specialoff.i1").css("display", "");
    $(".ui_hud_specialoff.i2").css("display", "");
    $(".ui_hud_specialoff.i3").css("display", "");
    $(".ui_hud_specialbase").css("display", "")
};
HudTutorial.prototype.setSpecialCount = function(a) {
    switch (a) {
        case 0:
            $(".ui_hud_specialoff.i1").css("display", "");
            $(".ui_hud_specialoff.i2").css("display", "");
            $(".ui_hud_specialoff.i3").css("display", "");
            $(".ui_hud_special.s1").css("display", "none");
            $(".ui_hud_special.s2").css("display", "none");
            $(".ui_hud_special.s3").css("display", "none");
            break;
        case 1:
            $(".ui_hud_specialoff.i1").css("display", "none");
            $(".ui_hud_specialoff.i2").css("display", "");
            $(".ui_hud_specialoff.i3").css("display", "");
            $(".ui_hud_special.s1").css("display",
                "");
            $(".ui_hud_special.s2").css("display", "none");
            $(".ui_hud_special.s3").css("display", "none");
            break;
        case 2:
            $(".ui_hud_specialoff.i1").css("display", "none");
            $(".ui_hud_specialoff.i2").css("display", "none");
            $(".ui_hud_specialoff.i3").css("display", "");
            $(".ui_hud_special.s1").css("display", "");
            $(".ui_hud_special.s2").css("display", "");
            $(".ui_hud_special.s3").css("display", "none");
            break;
        case 3:
            $(".ui_hud_specialoff.i1").css("display", "none"), $(".ui_hud_specialoff.i2").css("display", "none"), $(".ui_hud_specialoff.i3").css("display",
                "none"), $(".ui_hud_special.s1").css("display", ""), $(".ui_hud_special.s2").css("display", ""), $(".ui_hud_special.s3").css("display", "")
    }
};
HudTutorial.prototype.showMessage = function(a, b, c) {
    $(".ui_hud_messagebase").css("display", "");
    $(".ui_hud_messagetext").html(b);
    $(".ui_hud_messagetext2").html(c);
    this.m_messageTime = a;
    this.m_showingMessage = !0
};
HudTutorial.prototype.setTutorialMessage = function(a) {
    this.instructionsMsg.html(a)
};
HudTutorial.instance = null;

function ItemTutorial(a, b, c, d) {
    this.m_x = c;
    this.m_y = d;
    this.skin = "";
    this.m_state = -1;
    this.m_clip = null;
    this.m_game = b;
    this.m_canvas = a;
    this.m_character = new Character(this.m_x, this.m_y, a);
    this.m_character.addState(ItemTutorial.ST_STAND, "mcSSIcon");
    this.gotoState(ItemTutorial.ST_STAND)
}
ItemTutorial.prototype.x = function() {
    return this.m_x
};
ItemTutorial.prototype.y = function() {
    return this.m_y
};
ItemTutorial.prototype.update = function(a) {
    this.m_character.update(a);
    null !== this.m_clip && (this.m_clip.setX(this.m_x - this.m_game.cameraX()), this.m_clip.setY(this.m_y - this.m_game.cameraY()), this.m_clip.sprite._depth = 1E3 * this.m_y);
    switch (this.m_state) {
        case ItemTutorial.ST_STAND:
            this.validateCollisionWithPlayer();
            break;
        case ItemTutorial.ST_FADING:
            this.m_clip.sprite.opacity -= 0.0015 * a, this.m_y -= 0.25 * a, 0.05 > this.m_clip.sprite.opacity && (this.m_clip.sprite.opacity = 0)
    }
};
ItemTutorial.prototype.validateCollisionWithPlayer = function() {
    for (var a = 0; a < this.m_game.players.length; ++a)
        if (this.m_x > this.m_game.players[a].x() - ItemTutorial.SPRITE_TO_PLAYER_GAP && this.m_x < this.m_game.players[a].x() + ItemTutorial.SPRITE_TO_PLAYER_GAP && this.m_y > this.m_game.players[a].y() - 2 * ItemTutorial.SPRITE_TO_PLAYER_GAP && this.m_y < this.m_game.players[a].y() + ItemTutorial.SPRITE_TO_PLAYER_GAP) {
            this.m_state = ItemTutorial.ST_FADING;
            this.m_game.onGetPowerUp();
            break
        }
};
ItemTutorial.prototype.gotoState = function(a) {
    if (this.m_state != a) {
        this.m_state = a;
        var b = 0,
            c = 0;
        null !== this.m_clip && (b = this.m_clip.x, c = this.m_clip.y);
        this.m_character.gotoState(a);
        this.m_clip = this.m_character.actor().clip();
        this.m_clip.setX(b);
        this.m_clip.setY(c)
    }
};
ItemTutorial.prototype.free = function() {
    null !== this.m_clip && (this.m_canvas.removeChild(this.m_clip.sprite), this.m_clip = null)
};
ItemTutorial.SPRITE_TO_PLAYER_GAP = 30;
ItemTutorial.ST_STAND = 1;
ItemTutorial.ST_FADING = 2;

function PlayerTutorial(a, b, c, d) {
    this.m_x = c;
    this.m_y = d;
    this.skin = "";
    this.m_state = -1;
    this.m_clip = null;
    this.m_game = b;
    this.m_canvas = a;
    this.m_selected = this.m_flipX = !1;
    this.m_clipTargetPos = this.m_clipSelected = null;
    this.m_targetPos = new Point(0, 0);
    this.m_displace = new Displace(this.m_x, this.m_y);
    this.m_displace.onEndDisplaceCallback = "onEndDisplace";
    this.m_displace.targetCallback = this;
    b = Application.config.teams;
    for (c = 0; c < b.length; ++c) b[c].team == Global.selectedTeam && 3 == b[c].idPlayer && (this.skin = b[c].skin);
    this.m_character = new Character(this.m_x, this.m_y, a);
    this.m_character.addState(PlayerTutorial.ST_PLAYER_STAND, this.skin + "_Stand");
    this.m_character.addState(PlayerTutorial.ST_PLAYER_WALK, this.skin + "_Run");
    this.m_character.addState(PlayerTutorial.ST_PLAYER_SHOOT, this.skin + "_Kick");
    this.m_character.addState(PlayerTutorial.ST_PLAYER_BYCICLE, this.skin + "_FastShoot");
    this.m_character.addState(PlayerTutorial.ST_PLAYER_SWEEP, this.skin + "_Sweep");
    this.m_character.addState(PlayerTutorial.ST_PLAYER_HIT, this.skin +
        "_Hit");
    this.m_character.addState(PlayerTutorial.ST_PLAYER_WIN, this.skin + "_Win");
    this.m_character.addState(PlayerTutorial.ST_PLAYER_LOSE, this.skin + "_Defeat");
    this.m_character.addState(PlayerTutorial.ST_CHARGE_KICK, this.skin + "_ChargeShoot");
    this.m_character.addState(PlayerTutorial.ST_SHOOT_SPECIAL, this.skin + "_SpecialShoot");
    this.m_character.onEndAnimation = "onEndAnimation";
    this.m_character.worldActor = this;
    this.gotoState(PlayerTutorial.ST_PLAYER_STAND)
}
PlayerTutorial.prototype.cancelDisplace = function() {
    this.m_displace.cancel()
};
PlayerTutorial.prototype.x = function() {
    return this.m_x
};
PlayerTutorial.prototype.y = function() {
    return this.m_y
};
PlayerTutorial.prototype.isRunning = function() {
    return this.m_state == PlayerTutorial.ST_PLAYER_WALK
};
PlayerTutorial.prototype.isLookingLeft = function() {
    return this.m_flipX
};
PlayerTutorial.prototype.doFlipX = function() {
    this.m_flipX = !this.m_flipX;
    this.m_clip.setScaleX(this.m_flipX ? -PlayerTutorial.CLIP_SCALE : PlayerTutorial.CLIP_SCALE);
    this.m_clip.setScaleY(PlayerTutorial.CLIP_SCALE)
};
PlayerTutorial.prototype.onEndDisplace = function() {
    this.gotoState(PlayerTutorial.ST_PLAYER_STAND);
    null !== this.m_clipTargetPos && (this.m_canvas.removeChild(this.m_clipTargetPos.sprite), this.m_clipTargetPos = null);
    this.m_game.onEndPlayerDisplace()
};
PlayerTutorial.prototype.setSelected = function(a) {
    this.m_selected = a;
    null !== this.m_clipSelected && (this.m_canvas.removeChild(this.m_clipSelected.sprite), this.m_clipSelected = null);
    !0 == this.m_selected && (this.m_clipSelected = Application.instance.getClip("mcSelected"), this.m_clipSelected.setX(this.m_x - this.m_game.cameraX()), this.m_clipSelected.setY(this.m_y - this.m_game.cameraY()), this.m_clipSelected.sprite._depth = 1E3 * this.m_y - 10, this.m_canvas.addChild(this.m_clipSelected.sprite));
    !1 == a && null !== this.m_clipTargetPos &&
        (this.m_canvas.removeChild(this.m_clipTargetPos.sprite), this.m_clipTargetPos = null)
};
PlayerTutorial.prototype.gotoPosition = function(a, b, c) {
    if (!0 != c || this.m_state != PlayerTutorial.ST_PLAYER_WALK) this.m_displace.gotoPosition(a, b, PlayerTutorial.PLAYER_SPEED), this.gotoState(PlayerTutorial.ST_PLAYER_WALK), this.m_flipX = this.m_displace.toLeft(), this.m_clip.setScaleX(this.m_flipX ? -PlayerTutorial.CLIP_SCALE : PlayerTutorial.CLIP_SCALE), null === this.m_clipTargetPos && (this.m_clipTargetPos = Application.instance.getClip("mcTargetDisplace"), this.m_canvas.addChild(this.m_clipTargetPos.sprite), this.m_clipTargetPos.sprite._depth =
        0), this.m_targetPos.x = a, this.m_targetPos.y = b, this.m_clipTargetPos.setX(this.m_targetPos.x - this.m_game.cameraX()), this.m_clipTargetPos.setY(this.m_targetPos.y - this.m_game.cameraY()), !0 == c && this.m_clipTargetPos.setVisible(!1)
};
PlayerTutorial.prototype.update = function(a) {
    this.m_character.update(a);
    null !== this.m_clip && (this.m_clip.setX(this.m_x - this.m_game.cameraX()), this.m_clip.setY(this.m_y - this.m_game.cameraY()), this.m_clip.sprite._depth = 1E3 * this.m_y);
    null !== this.m_clipSelected && (this.m_clipSelected.update(a), this.m_clipSelected.setX(this.m_x - this.m_game.cameraX()), this.m_clipSelected.setY(this.m_y - this.m_game.cameraY()), this.m_clipSelected.sprite._depth = 1E3 * this.m_y - 10);
    null !== this.m_clipTargetPos && (this.m_clipTargetPos.update(a),
        this.m_clipTargetPos.setX(this.m_targetPos.x - this.m_game.cameraX()), this.m_clipTargetPos.setY(this.m_targetPos.y - this.m_game.cameraY()));
    this.m_displace.update(a);
    this.m_x = this.m_displace.x();
    this.m_y = this.m_displace.y()
};
PlayerTutorial.prototype.onEndAnimation = function(a) {
    switch (a) {
        case PlayerTutorial.ST_PLAYER_SHOOT:
            this.gotoState(PlayerTutorial.ST_PLAYER_STAND);
            break;
        case PlayerTutorial.ST_PLAYER_BYCICLE:
            this.gotoState(PlayerTutorial.ST_PLAYER_STAND);
            break;
        case PlayerTutorial.ST_SHOOT_SPECIAL:
            this.gotoState(PlayerTutorial.ST_PLAYER_STAND)
    }
};
PlayerTutorial.prototype.gotoState = function(a) {
    if (this.m_state != a) {
        this.m_state = a;
        var b = 0,
            c = 0;
        null !== this.m_clip && (b = this.m_clip.x, c = this.m_clip.y);
        this.m_character.gotoState(a);
        this.m_clip = this.m_character.actor().clip();
        this.m_flipX = this.m_displace.toLeft();
        this.m_clip.setScaleX(this.m_flipX ? -PlayerTutorial.CLIP_SCALE : PlayerTutorial.CLIP_SCALE);
        this.m_clip.setScaleY(PlayerTutorial.CLIP_SCALE);
        this.m_clip.setX(b);
        this.m_clip.setY(c)
    }
};
PlayerTutorial.prototype.onEndTapClip = function() {
    null !== this.m_clipTargetPos && this.m_clipTargetPos.setVisible(!0)
};
PlayerTutorial.prototype.onHoldMove = function() {};
PlayerTutorial.prototype.updateHoldMove = function() {};
PlayerTutorial.prototype.cancelHoldMove = function() {};
PlayerTutorial.prototype.onSweep = function() {
    this.gotoState(PlayerTutorial.ST_PLAYER_SWEEP);
    this.m_displace.gotoDirection(PlayerTutorial.SWEEP_DISTANCE, 0, PlayerTutorial.SWEEP_SPEED)
};
PlayerTutorial.prototype.onPass = function(a) {
    Global.app.playSound("dko_snd_kick_shoot");
    0 == a && this.m_game.balloon().applyForce(!1, PlayerTutorial.PASS_FORCE, PlayerTutorial.PASS_ANGLE_0, !1);
    1 == a && this.m_game.balloon().applyForce(!1, PlayerTutorial.PASS_FORCE, PlayerTutorial.PASS_ANGLE_1, !1);
    this.gotoState(PlayerTutorial.ST_PLAYER_SHOOT)
};
PlayerTutorial.prototype.onShoot = function() {
    Global.app.playSound("dko_snd_kick_shoot");
    this.m_game.balloon().applyForce(!0, PlayerTutorial.SHOOT_FORCE, PlayerTutorial.SHOOT_ANGLE, !1);
    this.gotoState(PlayerTutorial.ST_PLAYER_SHOOT)
};
PlayerTutorial.prototype.onSuperShoot = function() {
    Global.app.playSound("dko_snd_kick_shoot_sp");
    this.m_game.balloon().applyForce(!0, PlayerTutorial.SUPER_SHOOT_FORCE, 0, !1);
    this.m_game.balloon().onSuperShoot();
    this.gotoState(PlayerTutorial.ST_SHOOT_SPECIAL)
};
PlayerTutorial.prototype.onCenter = function() {
    Global.app.playSound("dko_snd_pass");
    this.m_game.balloon().applyForce(!1, PlayerTutorial.CENTER_FORCE, PlayerTutorial.CENTER_ANGLE, !0);
    this.gotoState(PlayerTutorial.ST_PLAYER_SHOOT)
};
PlayerTutorial.prototype.onSpecialShoot = function() {
    Global.app.playSound("dko_snd_kick_shoot");
    this.m_game.balloon().applyForce(!0, PlayerTutorial.SPECIAL_SHOOT_FORCE, 0, !1);
    this.gotoState(PlayerTutorial.ST_PLAYER_BYCICLE)
};
PlayerTutorial.prototype.free = function() {
    null !== this.m_clip && (this.m_canvas.removeChild(this.m_clip.sprite), this.m_clip = null);
    null !== this.m_clipSelected && (this.m_canvas.removeChild(this.m_clipSelected.sprite), this.m_clipSelected = null)
};
PlayerTutorial.SPECIAL_SHOOT_FORCE = 1E3;
PlayerTutorial.CENTER_FORCE = 400;
PlayerTutorial.CENTER_ANGLE = 1.570796;
PlayerTutorial.SUPER_SHOOT_FORCE = 1050;
PlayerTutorial.SHOOT_FORCE = 750;
PlayerTutorial.SHOOT_ANGLE = 5.49;
PlayerTutorial.PASS_FORCE = 400;
PlayerTutorial.PASS_ANGLE_0 = 5.49;
PlayerTutorial.PASS_ANGLE_1 = 2.356;
PlayerTutorial.SWEEP_DISTANCE = 150;
PlayerTutorial.SWEEP_SPEED = 250;
PlayerTutorial.PLAYER_SPEED = 200;
PlayerTutorial.CLIP_SCALE = 0.7;
PlayerTutorial.ST_PLAYER_STAND = 1;
PlayerTutorial.ST_PLAYER_WALK = 2;
PlayerTutorial.ST_PLAYER_SHOOT = 3;
PlayerTutorial.ST_PLAYER_BYCICLE = 4;
PlayerTutorial.ST_PLAYER_SWEEP = 5;
PlayerTutorial.ST_PLAYER_HIT = 6;
PlayerTutorial.ST_PLAYER_WIN = 7;
PlayerTutorial.ST_PLAYER_LOSE = 8;
PlayerTutorial.ST_CHARGE_KICK = 9;
PlayerTutorial.ST_SHOOT_SPECIAL = 10;

function GoalTutorial(a, b, c, d, e) {
    this.m_x = c;
    this.m_y = d;
    this.m_state = -1;
    this.m_clip = null;
    this.m_game = b;
    this.m_canvas = a;
    this.m_y += GoalTutorial.PIECE_DEPTH;
    this.m_clipPiece = null;
    this.m_character = new Character(c, d, a);
    !0 == e ? (this.m_character.addState(GoalTutorial.ST_STAND, "mcGoal_DKO_left"), this.m_clipPiece = Application.instance.getClip("mcGoal_left_piece")) : (this.m_character.addState(GoalTutorial.ST_STAND, "mcGoal_DKO_right"), this.m_clipPiece = Application.instance.getClip("mcGoal_right_piece"));
    this.m_clipPiece.setX(this.m_x -
        this.m_game.cameraX());
    this.m_clipPiece.setY(this.m_y - this.m_game.cameraY());
    this.m_canvas.addChild(this.m_clipPiece.sprite);
    this.gotoState(GoalTutorial.ST_STAND);
    this.m_piecePosition = new Point(this.m_x, this.m_y);
    this.m_clip.sprite._depth = 1E3 * (this.m_y + GoalTutorial.MID_GOAL);
    this.m_clipPiece.sprite._depth = 1E3 * (this.m_y + GoalTutorial.PIECE_DEPTH)
}
GoalTutorial.ST_STAND = "st1";
GoalTutorial.prototype.onGoal = function() {
    this.m_state = -1;
    this.gotoState(GoalTutorial.ST_STAND)
};
GoalTutorial.prototype.gotoState = function(a) {
    if (this.m_state != a) {
        this.m_state = a;
        var b = 0,
            c = 0;
        null !== this.m_clip && (b = this.m_clip.x, c = this.m_clip.y);
        this.m_character.gotoState(a);
        this.m_clip = this.m_character.actor().clip();
        this.m_clip.setX(b);
        this.m_clip.setY(c);
        this.m_character.actor().clip().setLoop(!1)
    }
};
GoalTutorial.prototype.update = function(a) {
    this.m_character.update(a);
    null !== this.m_clip && (this.m_clip.setX(this.m_x - this.m_game.cameraX()), this.m_clip.setY(this.m_y - this.m_game.cameraY()));
    null !== this.m_clipPiece && (this.m_clipPiece.update(a), this.m_clipPiece.setX(this.m_piecePosition.x - this.m_game.cameraX()), this.m_clipPiece.setY(this.m_piecePosition.y - this.m_game.cameraY()))
};
GoalTutorial.prototype.free = function() {
    null !== this.m_clipPiece && (this.m_canvas.removeChild(this.m_clipPiece.sprite), this.m_clipPiece = null)
};
GoalTutorial.PIECE_DEPTH = -60;
GoalTutorial.MID_GOAL = 300;
